<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hive on Tez</title>
      <link href="/2020/04/21/Hive%20on%20Tez/"/>
      <url>/2020/04/21/Hive%20on%20Tez/</url>
      
        <content type="html"><![CDATA[<h2 id="Downlond"><a href="#Downlond" class="headerlink" title="Downlond"></a>Downlond</h2><p><a href="http://tez.apache.org" target="_blank" rel="noopener">Tez</a></p><h2 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf apache-tez-0.9.1-bin.tar.gz</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">mv</span> apache-tez-0.9.1-bin/ tez-0.9.1</code></pre><p>我的文件目录：<br>tez：/usr/local/tez-0.9.1<br>hive: /usr/local/hive</p><h5 id="上传tez到集群"><a href="#上传tez到集群" class="headerlink" title="上传tez到集群"></a>上传tez到集群</h5><pre class=" language-bash"><code class="language-bash">hadoop fs -mkdir /tezhadoop fs -put tez-0.9.1/ /tez/</code></pre><h4 id="进入hive的conf目录编辑hive-env-sh"><a href="#进入hive的conf目录编辑hive-env-sh" class="headerlink" title="进入hive的conf目录编辑hive-env.sh"></a>进入hive的conf目录编辑hive-env.sh</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Set HADOOP_HOME to point to a specific hadoop install directory</span><span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/opt/module/hadoop-2.7.2<span class="token comment" spellcheck="true"># Hive Configuration Directory can be controlled by:</span><span class="token function">export</span> HIVE_CONF_DIR<span class="token operator">=</span>/opt/module/hive/conf<span class="token comment" spellcheck="true"># Folder containing extra libraries required for hive compilation/execution can be controlled by:</span><span class="token function">export</span> TEZ_HOME<span class="token operator">=</span>/opt/module/tez-0.9.1    <span class="token comment" spellcheck="true">#是你的tez的解压目录</span><span class="token function">export</span> TEZ_JARS<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> jar <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> $TEZ_HOME <span class="token operator">|</span><span class="token function">grep</span> jar<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token function">export</span> TEZ_JARS<span class="token operator">=</span><span class="token variable">$TEZ_JARS</span><span class="token keyword">:</span><span class="token variable">$TEZ_HOME</span>/<span class="token variable">$jar</span><span class="token keyword">done</span><span class="token keyword">for</span> jar <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> $TEZ_HOME/lib<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token function">export</span> TEZ_JARS<span class="token operator">=</span><span class="token variable">$TEZ_JARS</span><span class="token keyword">:</span><span class="token variable">$TEZ_HOME</span>/lib/<span class="token variable">$jar</span><span class="token keyword">done</span><span class="token function">export</span> HIVE_AUX_JARS_PATH<span class="token operator">=</span>/opt/module/hadoop-2.7.2/share/hadoop/common/hadoop-lzo-0.4.20.jar<span class="token variable">$TEZ_JARS</span></code></pre><h4 id="进入hive的conf目录新建tez-site-xml编辑"><a href="#进入hive的conf目录新建tez-site-xml编辑" class="headerlink" title="进入hive的conf目录新建tez-site.xml编辑"></a>进入hive的conf目录新建tez-site.xml编辑</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>?xml-stylesheet type<span class="token operator">=</span><span class="token string">"text/xsl"</span> href<span class="token operator">=</span><span class="token string">"configuration.xsl"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>tez.lib.uris<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">${fs.defaultFS}</span>/tez/tez-0.9.1,<span class="token variable">${fs.defaultFS}</span>/tez/tez-0.9.1/lib<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>tez.lib.uris.classpath<span class="token operator">&lt;</span>/name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">${fs.defaultFS}</span>/tez/tez-0.9.1,<span class="token variable">${fs.defaultFS}</span>/tez/tez-0.9.1/lib<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span>name<span class="token operator">></span>tez.use.cluster.hadoop-libs<span class="token operator">&lt;</span>/name<span class="token operator">></span>     <span class="token operator">&lt;</span>value<span class="token operator">></span>true<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span>name<span class="token operator">></span>tez.history.logging.service.class<span class="token operator">&lt;</span>/name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>org.apache.tez.dag.history.logging.ats.ATSHistoryLoggingService<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span></code></pre><h4 id="进入hive的conf目录给hive-site-xml编辑这个property"><a href="#进入hive的conf目录给hive-site-xml编辑这个property" class="headerlink" title="进入hive的conf目录给hive-site.xml编辑这个property"></a>进入hive的conf目录给hive-site.xml编辑这个property</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>hive.execution.engine<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>tez<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动hive</span>hive</code></pre><p><img src="https://img-blog.csdnimg.cn/20200403161034893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop压缩配置</title>
      <link href="/2020/04/21/Hadoop%E5%8E%8B%E7%BC%A9%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/04/21/Hadoop%E5%8E%8B%E7%BC%A9%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="下载LZO支持包"><a href="#下载LZO支持包" class="headerlink" title="下载LZO支持包"></a>下载LZO<a href="https://github.com/twitter/hadoop-lzo/archive/master.zip" target="_blank" rel="noopener">支持包</a></h2><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><h3 id="maven编译"><a href="#maven编译" class="headerlink" title="maven编译"></a>maven编译</h3><h3 id="将编译好后的hadoop-lzo-0-4-20-jar-放入hadoop-2-7-2-share-hadoop-common"><a href="#将编译好后的hadoop-lzo-0-4-20-jar-放入hadoop-2-7-2-share-hadoop-common" class="headerlink" title="将编译好后的hadoop-lzo-0.4.20.jar 放入hadoop-2.7.2/share/hadoop/common/"></a>将编译好后的hadoop-lzo-0.4.20.jar 放入hadoop-2.7.2/share/hadoop/common/</h3><h2 id="同步到其他主机"><a href="#同步到其他主机" class="headerlink" title="同步到其他主机"></a>同步到其他主机</h2><h2 id="添加配置core-site-xml"><a href="#添加配置core-site-xml" class="headerlink" title="添加配置core-site.xml"></a>添加配置core-site.xml</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>?xml-stylesheet type<span class="token operator">=</span><span class="token string">"text/xsl"</span> href<span class="token operator">=</span><span class="token string">"configuration.xsl"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span><span class="token operator">&lt;</span>name<span class="token operator">></span>io.compression.codecs<span class="token operator">&lt;</span>/name<span class="token operator">></span><span class="token operator">&lt;</span>value<span class="token operator">></span>org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.BZip2Codec,org.apache.hadoop.io.compress.SnappyCodec,com.hadoop.compression.lzo.LzoCodec,com.hadoop.compression.lzo.LzopCodec<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>io.compression.codec.lzo.class<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>com.hadoop.compression.lzo.LzoCodec<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span></code></pre><h3 id="同步core-site-xml"><a href="#同步core-site-xml" class="headerlink" title="同步core-site.xml"></a>同步core-site.xml</h3><h3 id="启动hadoop脚本"><a href="#启动hadoop脚本" class="headerlink" title="启动hadoop脚本"></a>启动hadoop脚本</h3><p>这只是我高可用Hadoop的启动脚本，这一步可选</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#! /bin/bash</span><span class="token keyword">echo</span> <span class="token string">"--------start journalNode----------"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> slave01 slave02 slave03<span class="token keyword">do</span>        <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/usr/local/hadoop-2.8.5/bin/hadoop-deamon.sh start journalnode"</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"--------start dfs---------"</span>/usr/local/hadoop-2.8.5/sbin/start-dfs.sh/usr/local/hadoop-2.8.5/sbin/start-yarn.sh</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kafka压力测试</title>
      <link href="/2020/04/21/Kafka%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/04/21/Kafka%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Producer生产情况"><a href="#Producer生产情况" class="headerlink" title="Producer生产情况"></a>Producer生产情况</h2><p>两个文件。我们来测试一下<br>bin/kafka-producer-perf-test.sh  –topic test –record-size 100 –num-records 100000 –throughput 1000 –producer-props bootstrap.servers=hadoop102:9092,hadoop103:9092,hadoop104:9092<br>说明：throughput 是<br>每秒多少条信息，record size是一条信息有多大，单位是字节。num-records是总共发送多少条信息。</p><p><img src="https://img-blog.csdnimg.cn/20200331123102162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200331123216955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Consumer消费"><a href="#Consumer消费" class="headerlink" title="Consumer消费"></a>Consumer消费</h2><p>Consumer的测试同样如此。如果这四个指标(io，cpu，内存，网络)都未满，考虑增加分区数来提升性能。<br>[atguigu@hadoop102 kafka]$<br>bin/kafka-consumer-perf-test.sh –zookeeper hadoop102:2181 –topic test –fetch-size 10000 –messages 10000000 –threads 1<br>参数说明：<br>–zookeeper 指定zookeeper的链接信息，<br>–topic 指定topic的名称，<br>–fetch-size 指定每次fetch的数据的大小，<br>–messages 总共要消费的消息个数，<br><img src="https://img-blog.csdnimg.cn/20200331123955975.png" alt="在这里插入图片描述"><br>消费好像不是很好</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程-线程间的通信</title>
      <link href="/2020/04/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>/2020/04/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Thread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">waitNotify</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//标志</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//被锁住的对象</span>    <span class="token keyword">static</span> Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread waiThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"WaitThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        waiThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Thread notifyThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Notify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notifyThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Wait</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"flag is true. Wait Method start:"</span>                            <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//调用wait，释放锁，这个线程进入等待队列</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" flag is false. Notify执行完毕！这个线程也从wait方法返回了"</span>                        <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Notify</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取到了lock的锁，执行notify时，不会释放lock锁</span>                <span class="token comment" spellcheck="true">//这个线程执行完锁块内的代码才释放锁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  Notify线程得到锁了"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通知等待队列中的线程，让他们进入同步队列</span>                lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//上面这个锁执行完后，释放锁，执行完后，同步队列中的线程可能会去获得锁</span>            <span class="token comment" spellcheck="true">//而这个线程可能会被调度进入就绪队列，可能不会执行后面的，让另一个线程去执行了</span>            <span class="token comment" spellcheck="true">//再次获得执行机会，也可能根本一直是这个线程在运行，再次获得一个锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"这个线程再次获得锁"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200318151240251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200318145739980.gif" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Thread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PipedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PipedWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">piped</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PipedWriter outPipedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PipedReader inPipedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将这个pipe的两端连接起来，如果不连接，使用一端时会出错</span>            outPipedWriter<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>inPipedReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建一个线程，从而这个线程可以对</span>        Thread pringThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Print</span><span class="token punctuation">(</span>inPipedReader<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"PrintThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pringThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>receive <span class="token operator">=</span> System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outPipedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>receive<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                outPipedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Print</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> PipedReader inPipedReader<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Print</span><span class="token punctuation">(</span>PipedReader in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inPipedReader <span class="token operator">=</span> in<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>receive <span class="token operator">=</span> inPipedReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>receive <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200318152814902.png" alt="在这里插入图片描述"></p><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Thread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">joinTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread previousThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每个线程拥有前一个线程的引用，知道线程</span>            Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Domino</span><span class="token punctuation">(</span>previousThread<span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            previousThread <span class="token operator">=</span> thread<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" terminated."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Domino</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> Thread rThread<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Domino</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>rThread <span class="token operator">=</span> thread<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                rThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"terminated."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200318153354251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个join调用的是<br><img src="https://img-blog.csdnimg.cn/20200318153646286.png" alt="在这里插入图片描述"><br>从而调用了join（0），即mills=0<br><img src="https://img-blog.csdnimg.cn/20200318153726489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>且获取了这个线程的锁。<br><img src="https://img-blog.csdnimg.cn/20200318153951146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200318154838866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当前线程A调用B的join方法，因为在join里面有个wait（0），从而使得线程A在线程B的对象上阻塞，然后当线程B结束时，才会待用notifyAll，通知自身的等待队列上的线程。</p><h2 id="数据库连接池案例"><a href="#数据库连接池案例" class="headerlink" title="数据库连接池案例"></a>数据库连接池案例</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程：Volatile关键字</title>
      <link href="/2020/04/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9AVolatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2020/04/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9AVolatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="看几个示例"><a href="#看几个示例" class="headerlink" title="看几个示例"></a>看几个示例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RunThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        thread<span class="token punctuation">.</span><span class="token function">setRunning</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经赋值为false了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String s<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Test test<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">settest</span><span class="token punctuation">(</span>Test test<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>test <span class="token operator">=</span> test<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> isRunning<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRunning</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isRunning <span class="token operator">=</span> isRunning<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sets</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s  <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入Run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            System.out.println("ha");</span><span class="token comment" spellcheck="true">//             Test test = new Test();</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程停止了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>前提运行模式一定要为Server模式</strong><br>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200316155229673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，永远不会停止线程。为什么呢？<br>传说是这样的：<br><img src="https://img-blog.csdnimg.cn/20200316155508163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们在一个线程中工作，要知道，都是在本地操作，也就是本地内存中操作，然而呢，我们要操作一个对象的数据，比如向上面那个例子，thread对象的isRunning数据，isRunning实际的数据是保存在主内存中，要和以前说过的本地虚拟机栈中的某个线程栈要区别开来。在上面代码执行过程中<br><img src="https://img-blog.csdnimg.cn/20200316160056354.png" alt="在这里插入图片描述"><br>这个循环中的isRunning判断似乎并没有读到Main线程更新到主内存中的IsRunning的新值，也就是这个线程读的还是之前副本的值，导致线程一直处于死循环状态。<br>仔细看这个图片哦，我弄了一个System.out.println(“ha”);<br><img src="https://img-blog.csdnimg.cn/20200316160431452.png" alt="在这里插入图片描述"><br>线程竟然停止了，好神奇啊！<br>还有更离谱的<br><img src="https://img-blog.csdnimg.cn/20200316161801648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我加上创建一个字符串线程也会停止，但是呢，如果加上一个创建数组的对象的却不可以了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flume采集日志到HDFS出现大量小文件</title>
      <link href="/2020/04/21/Flume%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97%E5%88%B0HDFS%E5%87%BA%E7%8E%B0%E5%A4%A7%E9%87%8F%E5%B0%8F%E6%96%87%E4%BB%B6/"/>
      <url>/2020/04/21/Flume%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97%E5%88%B0HDFS%E5%87%BA%E7%8E%B0%E5%A4%A7%E9%87%8F%E5%B0%8F%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>一边是配置，一边在执行。<br><img src="https://img-blog.csdnimg.cn/20200311212614157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200311212701128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如此多的小文件。</p><p><img src="https://img-blog.csdnimg.cn/20200311212732738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>rollSize<br>默认值：1024，当临时文件达到该大小（单位：bytes）时，滚动成目标文件。如果设置成0，则表示不根据临时文件大小来滚动文件。<br>rollCount<br>默认值：10，当events数据达到该数量时候，将临时文件滚动成目标文件，如果设置成0，则表示不根据events数据来滚动文件。<br>round<br>默认值：false，是否启用时间上的”舍弃”，类似于”四舍五入”，如果启用，则会影响除了%t的其他所有时间表达式；</p><p>roundValue<br>默认值：1，时间上进行“舍弃”的值；</p><p>roundUnit</p><p>默认值：seconds，时间上进行”舍弃”的单位，包含：second,minute,hour</p><p>当设置了round、roundValue、roundUnit参数收，需要在sink指定的HDFS路径上指定按照时间生成的目录的格式，例如有需求，每采集1小时就在HDFS目录上生成一个目录，里面存放这1小时内采集到的数据。</p><p>将size变成0即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink行走江湖Operators：底层API-Process Function</title>
      <link href="/2020/04/21/Flink%E8%A1%8C%E8%B5%B0%E6%B1%9F%E6%B9%96Operators%EF%BC%9A%E5%BA%95%E5%B1%82API-Process%20Function/"/>
      <url>/2020/04/21/Flink%E8%A1%8C%E8%B5%B0%E6%B1%9F%E6%B9%96Operators%EF%BC%9A%E5%BA%95%E5%B1%82API-Process%20Function/</url>
      
        <content type="html"><![CDATA[<p>我们知道，Flink把API分成了好几层，每一层所能够看到的都各不相同。<br>最底层的就是Process Function，它能够</p><ul><li>访问events</li><li>访问状态State（容错，一致性，但是仅仅是在keyed流上）</li><li>计时器，也仅仅在keyed流上。</li></ul><h2 id="KeyedProcessFunction"><a href="#KeyedProcessFunction" class="headerlink" title="KeyedProcessFunction"></a>KeyedProcessFunction</h2><h6 id="下面做一个案例，每经过一段时间，发出最新的keyvalue状态"><a href="#下面做一个案例，每经过一段时间，发出最新的keyvalue状态" class="headerlink" title="下面做一个案例，每经过一段时间，发出最新的keyvalue状态"></a>下面做一个案例，每经过一段时间，发出最新的keyvalue状态</h6><h4 id="onTimer是基于ProcessTime时"><a href="#onTimer是基于ProcessTime时" class="headerlink" title="onTimer是基于ProcessTime时"></a>onTimer是基于ProcessTime时</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> flinkscala<span class="token punctuation">.</span>ProcessFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token punctuation">{</span>ValueState<span class="token punctuation">,</span> ValueStateDescriptor<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span>BoundedOutOfOrdernessTimestampExtractor<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">CountwithTimestamp</span><span class="token punctuation">(</span>key<span class="token operator">:</span>String<span class="token punctuation">,</span>count<span class="token operator">:</span>Long<span class="token punctuation">,</span>lastModified<span class="token operator">:</span>Long<span class="token punctuation">)</span>object processfunctionTest1 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span>    val datastream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            val dataArray <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .assignTimestampsAndWatermarks(new BoundedOutOfOrdernessTimestampExtractor[(String, String)](Time.seconds(3)) {</span><span class="token comment" spellcheck="true">//        override def extractTimestamp(element: (String, String)): Long = element._2.toLong * 1000</span><span class="token comment" spellcheck="true">//      })</span>      <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountWithTimeoutFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CountWithTimeoutFunction</span> <span class="token keyword">extends</span> <span class="token class-name">KeyedProcessFunction</span><span class="token punctuation">[</span>String<span class="token punctuation">,</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Long<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//状态，保存CountWithTimeStamp</span>  lazy val state<span class="token operator">:</span> ValueState<span class="token punctuation">[</span>CountwithTimestamp<span class="token punctuation">]</span> <span class="token operator">=</span> getRuntimeContext    <span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueStateDescriptor</span><span class="token punctuation">[</span>CountwithTimestamp<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"mystate"</span><span class="token punctuation">,</span>classOf<span class="token punctuation">[</span>CountwithTimestamp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  override def <span class="token function">processElement</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> ctx<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token punctuation">[</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span>#Context<span class="token punctuation">,</span> out<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">[</span><span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    System.out.println(value)</span>    val currentprocesstime <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentProcessingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val current<span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> match <span class="token punctuation">{</span>      <span class="token keyword">case</span> null <span class="token operator">=</span><span class="token operator">></span>        <span class="token function">CountwithTimestamp</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> currentprocesstime<span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token function">CountwithTimestamp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token function">CountwithTimestamp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> currentprocesstime<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    state<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    ctx.timerService().registerEventTimeTimer(current.lastModified+6000)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"currentProcessingTime:>>>>>"</span><span class="token operator">+</span>currentprocesstime<span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"currentWaterMark>>>>>>"</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ctx.timestamp>>>>>>"</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//注册定时器</span>    ctx<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerProcessingTimeTimer</span><span class="token punctuation">(</span>currentprocesstime<span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  override def <span class="token function">onTimer</span><span class="token punctuation">(</span>timestamp<span class="token operator">:</span> Long<span class="token punctuation">,</span> ctx<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token punctuation">[</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span>#OnTimerContext<span class="token punctuation">,</span> out<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">[</span><span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计时器到期了"</span><span class="token punctuation">)</span>    state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> match <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token function">CountwithTimestamp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>count<span class="token punctuation">,</span>lastModified<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timestamp <span class="token operator">==</span> lastModified <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">.</span>toString<span class="token punctuation">,</span>lastModified<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> _ <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输入：<br><img src="https://img-blog.csdnimg.cn/20200304223142737.png" alt="在这里插入图片描述"><br><strong>运行结果：</strong><br><img src="https://img-blog.csdnimg.cn/20200304223123103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，一共只有两个计时器到期了，因为我们可以看到上面输出的currentPrcessingTimer是只有两种，第一个是一种，而后面三个是相同的，一个计时器只针对时间戳决定，多个一样的时间戳只会出现一个计时器。</p><ul><li><p>第一个计时器<br>处理时间：1583331466746<br>计时器到期时间：1583331466746+1000</p></li><li><p>第二个计时器<br>  处理时间：1583331466761<br>  计时器到期时间：1583331466761+1000</p></li></ul><p>**上面都是基于ProcessingTime的那么如果将其换成EventTime呢</p><h4 id="EventTime"><a href="#EventTime" class="headerlink" title="EventTime"></a>EventTime</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> flinkscala<span class="token punctuation">.</span>ProcessFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token punctuation">{</span>ValueState<span class="token punctuation">,</span> ValueStateDescriptor<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span>BoundedOutOfOrdernessTimestampExtractor<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Timeobject processfunctionTest2 <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>    val datastream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        val dataArray <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              override def <span class="token function">extractTimestamp</span><span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> element<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>toLong <span class="token operator">*</span> <span class="token number">1000</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountWithTimeoutFunction2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CountWithTimeoutFunction2</span> <span class="token keyword">extends</span> <span class="token class-name">KeyedProcessFunction</span><span class="token punctuation">[</span>String<span class="token punctuation">,</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Long<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//状态，保存CountWithTimeStamp</span>  lazy val state<span class="token operator">:</span> ValueState<span class="token punctuation">[</span>CountwithTimestamp<span class="token punctuation">]</span> <span class="token operator">=</span> getRuntimeContext    <span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueStateDescriptor</span><span class="token punctuation">[</span>CountwithTimestamp<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"mystate"</span><span class="token punctuation">,</span>classOf<span class="token punctuation">[</span>CountwithTimestamp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  override def <span class="token function">processElement</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> ctx<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token punctuation">[</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span>#Context<span class="token punctuation">,</span> out<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">[</span><span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    System.out.println(value)</span>    val currentEventtime <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val current<span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> match <span class="token punctuation">{</span>      <span class="token keyword">case</span> null <span class="token operator">=</span><span class="token operator">></span>        <span class="token function">CountwithTimestamp</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> currentEventtime<span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token function">CountwithTimestamp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token function">CountwithTimestamp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> currentEventtime<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    state<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//    ctx.timerService().registerEventTimeTimer(current.lastModified+6000)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"currentEventTime:>>>>>"</span><span class="token operator">+</span>currentEventtime<span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"currentWaterMark>>>>>>"</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ctx.timestamp>>>>>>"</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//注册定时器</span>    ctx<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerEventTimeTimer</span><span class="token punctuation">(</span>currentEventtime<span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  override def <span class="token function">onTimer</span><span class="token punctuation">(</span>timestamp<span class="token operator">:</span> Long<span class="token punctuation">,</span> ctx<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token punctuation">[</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span>#OnTimerContext<span class="token punctuation">,</span> out<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">[</span><span class="token punctuation">(</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>timestamp<span class="token operator">+</span><span class="token string">":计时器到期了"</span><span class="token operator">+</span>state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> match <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token function">CountwithTimestamp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>count<span class="token punctuation">,</span>lastModified<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timestamp <span class="token operator">>=</span> lastModified<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">.</span>toString<span class="token punctuation">,</span>lastModified<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> _ <span class="token operator">=</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"什么都没有！！！！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行一下：<br><img src="https://img-blog.csdnimg.cn/20200304230647820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里用了watermark，是对于EventTime*1000并且延迟了3秒钟，所以我们看到的watermark都会比实际EventTime小3000毫秒。<br>在输入a,14后，这时候的watermark应该是11000毫秒，但是输出的是10000毫秒<br>这是因为，watermark夹在中间了，比如我们输入11的时候，它前面携带的watermark却是7000，这个7000是因为processElement还没有执行完，对应的watermark还没有更新，所以在这个方法里看还是上次的watermark，但是一旦执行完，它就会更新到最新的，比如在14000的时候，我们看到的还是10000，但是一旦执行完了processElement方法，就会更新watermark为11000，这时候就认为11000之前的数据都到了，那么就会触发第一个定时器，因为它是11000的时候到期，所以被计时器生效了。NICE！！！    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flume怎么操作</title>
      <link href="/2020/04/21/Flume%E6%80%8E%E4%B9%88%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/21/Flume%E6%80%8E%E4%B9%88%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="先来个小简例"><a href="#先来个小简例" class="headerlink" title="先来个小简例"></a>先来个小简例</h3><p>我们将本地文件的内容用flume搞到HDFS上面去。<br>直接上配置文件吧</p><pre class=" language-java"><code class="language-java"># example<span class="token punctuation">.</span>conf<span class="token operator">:</span> A single<span class="token operator">-</span>node Flume configuration# Name the components on <span class="token keyword">this</span> agenta1<span class="token punctuation">.</span>sources <span class="token operator">=</span> r1a1<span class="token punctuation">.</span>sinks <span class="token operator">=</span> k1a1<span class="token punctuation">.</span>channels <span class="token operator">=</span> c1# 我们Source定义了从本地文件secure末尾读取数据# Describe<span class="token operator">/</span>configure the sourcea1<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>r1<span class="token punctuation">.</span>type <span class="token operator">=</span> execa1<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>r1<span class="token punctuation">.</span>command <span class="token operator">=</span> tail <span class="token operator">-</span>F <span class="token operator">/</span>root<span class="token operator">/</span>secure#这个Sink定义将数据送到hdfs# Describe the sinka1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>k1<span class="token punctuation">.</span>type <span class="token operator">=</span> hdfsa1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>k1<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>path <span class="token operator">=</span> hdfs<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">114.116</span><span class="token punctuation">.</span><span class="token number">206.19</span><span class="token operator">:</span><span class="token number">5009</span><span class="token operator">/</span>flumehdfs<span class="token operator">/</span>dataa1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>hdfssink<span class="token punctuation">.</span>filePrefix             <span class="token operator">=</span> alert<span class="token operator">-</span>a1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>hdfssink<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>useLocalTimeStamp <span class="token operator">=</span> <span class="token boolean">true</span>a1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>hdfssink<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>rollInterval      <span class="token operator">=</span> <span class="token number">60</span>a1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>hdfssink<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>rollSize          <span class="token operator">=</span> <span class="token number">10485760</span>a1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>hdfssink<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>rollCount         <span class="token operator">=</span> <span class="token number">0</span>a1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>hdfssink<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>codeC             <span class="token operator">=</span> snappya1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>hdfssink<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>fileType          <span class="token operator">=</span> DataStreama1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>hdfssink<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>writeFormat       <span class="token operator">=</span> Text# Use a channel which buffers events in memorya1<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>c1<span class="token punctuation">.</span>type <span class="token operator">=</span> memorya1<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>c1<span class="token punctuation">.</span>capacity <span class="token operator">=</span> <span class="token number">1000</span>a1<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>c1<span class="token punctuation">.</span>transactionCapacity <span class="token operator">=</span> <span class="token number">100</span># Bind the source and sink to the channela1<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>r1<span class="token punctuation">.</span>channels <span class="token operator">=</span> c1a1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>k1<span class="token punctuation">.</span>channel <span class="token operator">=</span> c1</code></pre><h4 id="然后在我们的HDFS就可以看到数据了"><a href="#然后在我们的HDFS就可以看到数据了" class="headerlink" title="然后在我们的HDFS就可以看到数据了"></a>然后在我们的HDFS就可以看到数据了</h4><p><img src="https://img-blog.csdnimg.cn/20200217164041819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>关于Flume-HDFS</p><pre class=" language-shell"><code class="language-shell">hdfs.filePrefix    默认值FlumeData，Flume在hdfs创建的文件名前缀hdfs.fileSuffix    默认为空，文件名后缀hdfs.inUsePrefix 默认为空，临时文件的前缀。hdfs.inUseSuffix    默认为.tmp，临时文件的后缀hdfs.emptyInUseSuffix    默认为false    ，不重要，就用false把hdfs.rollInterval    默认为30秒，文件滚动时间间隔。如果设置为0，则表示永远不滚动。hdfs.rollSize    默认1024字节，文件滚动的大小间隔。如果设置为0，则表示永远不滚动。hdfs.rollCount    默认为10，滚动前Event的个数。这三个可以用来解决HDFS小文件问题hdfs.idleTimeout    默认0，关闭交互文件的超时时间，为0则为永不超时。hdfs.batchSize    默认100，100Evnet刷写一次Hdfs。    hdfs.codeC    默认为空，压缩格式，例如: gzip, bzip2, lzo, lzop, snappyhdfs.fileType    默认为SequenceFile。当前SequenceFile, DataStream或CompressedStream (1)DataStream不会压缩输出文件，请不要设置codeC (2)CompressedStream需要设置hdfs。带有可用编解码器的编解码器。hdfs.maxOpenFiles    默认5000，最大允许同时打开的文件，超过了则踢掉最先打开的文件。    hdfs.minBlockReplicas    默认为空，指定最小的hdfs块数量。hdfs.writeFormat    默认为Writable。    hdfs.threadsPoolSize    默认10，对hdfs IO读写的线程池大小。hdfs.rollTimerPoolSize    默认1，每个HDFS接收器用于调度定时文件滚动的线程数hdfs.kerberosPrincipal 默认为空，认证系统，可以不用管。hdfs.kerberosKeytab    默认为空。hdfs.round    默认false，是否按照时间戳进行四舍五入。hdfs.roundValue    默认1，四舍五入到该值的最高倍数(在使用hdfs.roundUnit配置的单元中)，小于当前时间。.hdfs.roundUnit    默认second，下舍入值的单位——秒、分或小时。hdfs.timeZone    默认为Local Time    hdfs.useLocalTimeStamp    默认false，serializer    默认TEXT，序列化工具    </code></pre><p>挺不错的，这个工具。<br>我写的另一片博客关于flume的不是很好，很笼统，现在来详细说明一下Flume吧。</p><h5 id="其实Flume的核心就是利用source将数据收集过来，然后通过channel缓存在本地，然后通过Sink传出去，传出去之后就可以删除本地缓存了。"><a href="#其实Flume的核心就是利用source将数据收集过来，然后通过channel缓存在本地，然后通过Sink传出去，传出去之后就可以删除本地缓存了。" class="headerlink" title="其实Flume的核心就是利用source将数据收集过来，然后通过channel缓存在本地，然后通过Sink传出去，传出去之后就可以删除本地缓存了。"></a>其实Flume的核心就是利用source将数据收集过来，然后通过channel缓存在本地，然后通过Sink传出去，传出去之后就可以删除本地缓存了。</h5><h3 id="传输数据的形式：Event"><a href="#传输数据的形式：Event" class="headerlink" title="传输数据的形式：Event"></a>传输数据的形式：Event</h3><p>我们吧传输的一个数据叫做一个Event，你可以实践一下这个小例子</p><pre class=" language-java"><code class="language-java"># example<span class="token punctuation">.</span>conf<span class="token operator">:</span> A single<span class="token operator">-</span>node Flume configuration# Name the components on <span class="token keyword">this</span> agenta1<span class="token punctuation">.</span>sources <span class="token operator">=</span> r1a1<span class="token punctuation">.</span>sinks <span class="token operator">=</span> k1a1<span class="token punctuation">.</span>channels <span class="token operator">=</span> c1# Describe<span class="token operator">/</span>configure the sourcea1<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>r1<span class="token punctuation">.</span>type <span class="token operator">=</span> exec#a1<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>r1<span class="token punctuation">.</span>bind <span class="token operator">=</span> <span class="token number">114.55</span><span class="token punctuation">.</span><span class="token number">37.70</span>a1<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>r1<span class="token punctuation">.</span>command <span class="token operator">=</span> tail <span class="token operator">-</span>F <span class="token operator">/</span>root<span class="token operator">/</span>secure#a1<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>r1<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">5000</span># Describe the sinka1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>k1<span class="token punctuation">.</span>type <span class="token operator">=</span> logger# Use a channel which buffers events in memorya1<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>c1<span class="token punctuation">.</span>type <span class="token operator">=</span> memorya1<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>c1<span class="token punctuation">.</span>capacity <span class="token operator">=</span> <span class="token number">1000</span>a1<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>c1<span class="token punctuation">.</span>transactionCapacity <span class="token operator">=</span> <span class="token number">100</span># Bind the source and sink to the channela1<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>r1<span class="token punctuation">.</span>channels <span class="token operator">=</span> c1a1<span class="token punctuation">.</span>sinks<span class="token punctuation">.</span>k1<span class="token punctuation">.</span>channel <span class="token operator">=</span> c1</code></pre><p>然后使用这个命令，我们就可以将数据传输了OK</p><pre class=" language-shell"><code class="language-shell">bin/flume-ng agent --name a1 --conf conf --conf-file flumeconfigure/example.conf Dflume.root.logger=INFO,console指令传参解释agent 表示启动一个agent--conf 指定flume启动的配置文件夹，比如log4j，flume-env.sh--conf-file 指定agent配置文件地址--name 指定启动的agent名字，也就是在刚刚的example.conf文件中，可以定义两个agent，并通过命令行，指定启动其中之一。-D 指定其他配置参数，上面命令制定了logger级别，和流向。</code></pre><p>然后向secure文件添加数据<br><img src="https://img-blog.csdnimg.cn/2020021716495050.png" alt="在这里插入图片描述"><br>可以看到Event的形式就是这样子的，用图来形象化<br><img src="https://img-blog.csdnimg.cn/20200217165100653.png" alt="在这里插入图片描述"><br>body才是我们需要的内容，key-value可以用来分流，整个flume其实就是一个水管一样，一个槽Sink配置一个Channel，但是一个Source可以流向多个Channel，而分流就是根据Event的key来分流的。<br>然后body是字节数组的形式，那才是我们真正的数据，不要弄错了，header你就想象成平常我们所说的协议吧，比如HTTP，都有一个头对吧，传输正文以外的其他东西。</p><h3 id="Flume的可靠性，恢复性"><a href="#Flume的可靠性，恢复性" class="headerlink" title="Flume的可靠性，恢复性"></a>Flume的可靠性，恢复性</h3><p>Flume的Event只有通过Sink传输到下一个Agent或者被持久化到HDFS才可以被删除。第二点非常容易疏忽，就是所有的数据都是基于事务的，这就是可靠性。<br>而可恢复性，肯定就是Channel缓存形式了，它有两种缓存形式，分别是file-Chinnel和In-Memory Channel。可想而知，哪个恢复性好。file-Channel的形式明显可以持久化到磁盘，当宕机或者出错了都可以从磁盘恢复过来对吧，但是如果是In-Memory Channel的话，就不行了，只要断电啥都没有了。其实还有一种叫Kafka-Channel，以后将两者连起来的时候再来看看吧。</p><h3 id="Taildir-Source应用"><a href="#Taildir-Source应用" class="headerlink" title="Taildir Source应用"></a>Taildir Source应用</h3><h5 id="这个就非常重要了，其实就是Flume可以读取到上次读取的位置，观察指定的文件，一旦检测到添加到每个文件中的新行，就几乎实时跟踪它们。它定期将每个文件的最后读取位置以JSON格式写入给定位置文件。如果Flume由于某种原因停止或关闭，它可以从现有位置文件上的位置重新启动。在其他用例中，该源还可以使用给定的位置文件从每个文件的任意位置开始跟踪。当指定路径上没有位置文件时，默认情况下它将从每个文件的第一行开始跟踪。文件将按修改时间顺序使用。修改时间最长的文件将首先被使用。此源不会重命名、删除或对跟踪的文件进行任何修改。目前，该源代码不支持跟踪二进制文件。它逐行读取文本文件。"><a href="#这个就非常重要了，其实就是Flume可以读取到上次读取的位置，观察指定的文件，一旦检测到添加到每个文件中的新行，就几乎实时跟踪它们。它定期将每个文件的最后读取位置以JSON格式写入给定位置文件。如果Flume由于某种原因停止或关闭，它可以从现有位置文件上的位置重新启动。在其他用例中，该源还可以使用给定的位置文件从每个文件的任意位置开始跟踪。当指定路径上没有位置文件时，默认情况下它将从每个文件的第一行开始跟踪。文件将按修改时间顺序使用。修改时间最长的文件将首先被使用。此源不会重命名、删除或对跟踪的文件进行任何修改。目前，该源代码不支持跟踪二进制文件。它逐行读取文本文件。" class="headerlink" title="这个就非常重要了，其实就是Flume可以读取到上次读取的位置，观察指定的文件，一旦检测到添加到每个文件中的新行，就几乎实时跟踪它们。它定期将每个文件的最后读取位置以JSON格式写入给定位置文件。如果Flume由于某种原因停止或关闭，它可以从现有位置文件上的位置重新启动。在其他用例中，该源还可以使用给定的位置文件从每个文件的任意位置开始跟踪。当指定路径上没有位置文件时，默认情况下它将从每个文件的第一行开始跟踪。文件将按修改时间顺序使用。修改时间最长的文件将首先被使用。此源不会重命名、删除或对跟踪的文件进行任何修改。目前，该源代码不支持跟踪二进制文件。它逐行读取文本文件。"></a>这个就非常重要了，其实就是Flume可以读取到上次读取的位置，观察指定的文件，一旦检测到添加到每个文件中的新行，就几乎实时跟踪它们。它定期将每个文件的最后读取位置以JSON格式写入给定位置文件。如果Flume由于某种原因停止或关闭，它可以从现有位置文件上的位置重新启动。在其他用例中，该源还可以使用给定的位置文件从每个文件的任意位置开始跟踪。当指定路径上没有位置文件时，默认情况下它将从每个文件的第一行开始跟踪。文件将按修改时间顺序使用。修改时间最长的文件将首先被使用。此源不会重命名、删除或对跟踪的文件进行任何修改。目前，该源代码不支持跟踪二进制文件。它逐行读取文本文件。</h5><p>首先我们要知道Flume有三种监控文件或者目录的方式：</p><ul><li><p>Exec Source<br>  Exec Source可通过tail -f命令去tail住一个文件，然后实时同步日志到sink。但存在的问题是，当agent进程挂掉重启后，会有重复消费的问题。可以通过增加UUID来解决，或通过改进ExecSource来解决。</p></li><li><p>Spooling Directory Source<br> Spooling Directory Source可监听一个目录，同步目录中的新文件到sink,被同步完的文件可被立即删除或被打上标记。适合用于同步新文件，但不适合对实时追加日志的文件进行监听并同步。如果需要实时监听追加内容的文件，可对SpoolDirectorySource进行改进。</p></li></ul><ul><li>taildir Source<br>  Taildir Source可实时监控一批文件，并记录每个文件最新消费位置，agent进程重启后不会有重复消费的问题。<br>使用时建议用1.8.0版本的flume，1.8.0版本中解决了Taildir Source一个可能会丢数据的bug。</li></ul><p>总而言之Taildir Source就是不管Flume怎么停止任务，只要那个位置文件在，Flume重启相同任务时就可以根据这个位置来继续读取。可以不用重复读取以前读过的。</p><pre class=" language-bash"><code class="language-bash">channels    channel名     <span class="token function">type</span>     必须是TAILDIR.filegroups 指定一个文件组名filegroups.<span class="token operator">&lt;</span>filegroupName<span class="token operator">></span>    文件组中文件名描述正则字符串。比如 fliegroups.f3<span class="token operator">=</span>/usr/tmp/net.+，定义了f3文件组为/usr/tmp目录下所有以net开头的文件。可选的配置：这个官网也有，不同版本不知道想不相同positionFile    默认~/.flume/taildir_position.json，Flume进程Json元数据信息存储地址.headers.<span class="token operator">&lt;</span>filegroupName<span class="token operator">></span>.<span class="token operator">&lt;</span>headerKey<span class="token operator">></span>    默认为空，对于header key的赋值，可以赋值多个。byteOffsetHeader    默认false，是否将尾行的字节偏移量添加到名为“byteoffset”的标头中。skipToEnd    默认false，如果PositionFile文件上没有写文件，是否跳过位置到EOF。.idleTimeout    默认120000毫秒，关闭非活动文件的时间<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>。如果关闭的文件附加了新行，这个Source将自动重新打开它。writePosInterval    默认3000，将每个文件的最后一个位置写入positionFile的间隔时间<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>。batchSize    默认100，每次读取和发送到通道的最大行数。使用默认值通常没有问题。maxBatchCount    默认Long.MAX_VALUE，控制从同一文件中连续读取的批数。如果源跟踪多个文件，并且其中一个文件以较快的速度写入，则可以防止处理其他文件，因为繁忙的文件将在无休止的循环中读取。在这种情况下，降低这个值backoffSleepIncrement    默认1000，重新尝试轮询新数据<span class="token punctuation">(</span>上次尝试没有发现任何新数据<span class="token punctuation">)</span>之前的时间延迟增量。maxBackoffSleep    默认5000，每次重新尝试轮询新数据之间的最大时间延迟，当上次尝试没有发现任何新数据时。    cachePatternMatching    默认true，对于包含数千个文件的目录，列出目录并应用文件名regex模式可能会耗费时间。缓存匹配文件列表可以提高性能。文件的使用顺序也将被缓存。要求文件系统至少以1秒的粒度跟踪修改时间fileHeader    默认false，是否添加存储绝对路径文件名到header。fileHeaderKey    默认file，fileHeader对应的key名。</code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class=" language-Bash"><code class="language-Bash"># Name the components on this agenta1.sources = r1a1.sinks = k1a1.channels = c1# Describe/configure the sourcea1.sources.r1.type = taildira1.sources.r1.positionFile = /root/flume/flumedata/taildir_position.jsona1.sources.r1.filegroups = f1a1.sources.r1.filegroups.f1 = /root/flume/flumedata/log/.*loga1.sources.r1.fileHeader = true# Channel类型a1.channels.c1.type = file# 数据存放路径a1.channels.c1.dataDirs = /root/flume/flumedata/dataDirs#检查点路径a1.channels.c1.checkpointDir = /root/flume/flumedata/checkpoint#Channel中最多缓存多少a1.channels.c1.capacity = 1000#channel一次给sink多少a1.channels.c1.transactionCapacity = 100# Sinka1.sinks.k1.type = hdfsa1.sinks.k1.hdfs.path = hdfs://114.116.206.19:5009/flumehdfs/dataa1.sinks.hdfssink.filePrefix             = alert-a1.sinks.hdfssink.hdfs.useLocalTimeStamp = truea1.sinks.hdfssink.hdfs.rollInterval      = 60a1.sinks.hdfssink.hdfs.rollSize          = 10485760a1.sinks.hdfssink.hdfs.rollCount         = 0a1.sinks.hdfssink.hdfs.codeC             = snappya1.sinks.hdfssink.hdfs.fileType          = DataStreama1.sinks.hdfssink.hdfs.writeFormat       = Texta1.sources.r1.channels = c1a1.sinks.k1.channel = c1</code></pre><p>先往我们监控的目录写东西<br><img src="https://img-blog.csdnimg.cn/20200217183204892.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200217183251315.png" alt="在这里插入图片描述"><br>数据也成功到达。<br>然后将flume停掉<br><img src="https://img-blog.csdnimg.cn/20200217183503824.png" alt="在这里插入图片描述"><br>这时候的位置信息这样子<br>往flume添加新消息<br><img src="https://img-blog.csdnimg.cn/20200217183430930.png" alt="在这里插入图片描述"><br>重启flume<br><img src="https://img-blog.csdnimg.cn/20200217183539119.png" alt="在这里插入图片描述"><br>这时候位置信息这样子，那么看看hdfs里面有没有重复数据呢<br>可以看到一共生成了两个文件，说明没有问题的<br><img src="https://img-blog.csdnimg.cn/20200217184003955.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中泛型的使用（一）</title>
      <link href="/2020/04/21/java%E4%B8%AD%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/04/21/java%E4%B8%AD%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="泛型，顾名思义，广泛的使用呗，所以不确定用到的是哪一块了，是具体的哪一个东西，给你一个范围一个东西自己去选"><a href="#泛型，顾名思义，广泛的使用呗，所以不确定用到的是哪一块了，是具体的哪一个东西，给你一个范围一个东西自己去选" class="headerlink" title="泛型，顾名思义，广泛的使用呗，所以不确定用到的是哪一块了，是具体的哪一个东西，给你一个范围一个东西自己去选"></a>泛型，顾名思义，广泛的使用呗，所以不确定用到的是哪一块了，是具体的哪一个东西，给你一个范围一个东西自己去选</h4><blockquote><h5 id="泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用-调用时传入具体的类型（类型实参）。注意这里的类型只能时引用类型，不能时基本数据类型。"><a href="#泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用-调用时传入具体的类型（类型实参）。注意这里的类型只能时引用类型，不能时基本数据类型。" class="headerlink" title="泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。注意这里的类型只能时引用类型，不能时基本数据类型。"></a><strong>泛型</strong>，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。注意这里的类型只能时引用类型，不能时基本数据类型。</h5><h5 id="泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。"><a href="#泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。" class="headerlink" title="泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。"></a>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</h5></blockquote><hr><h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><hr><blockquote><p>public class Generic&lt; Q &gt; {<br> private T key;<br>public Generic(Q key) { //泛型构造方法形参key的类型也为Q，Q的类型由外部指定<br>        this.key = key;<br>    }<br>}</p><h5 id="就这样的，很简单，用“-lt-”和“-gt-”包起来了一个Q泛型，这个Q是什么，就是我们再创建类时具体传进去的类"><a href="#就这样的，很简单，用“-lt-”和“-gt-”包起来了一个Q泛型，这个Q是什么，就是我们再创建类时具体传进去的类" class="headerlink" title="就这样的，很简单，用“&lt;”和“&gt;”包起来了一个Q泛型，这个Q是什么，就是我们再创建类时具体传进去的类"></a>就这样的，很简单，用“&lt;”和“&gt;”包起来了一个Q泛型，这个Q是什么，就是我们再创建类时具体传进去的类</h5><p>比如：<br><strong>Generic&lt; String &gt; newQ = new Generic&lt; String &gt;();</strong></p><h5 id="这样的传进去了一个Stirng对象。没什么好说的了，就基本就是这样。"><a href="#这样的传进去了一个Stirng对象。没什么好说的了，就基本就是这样。" class="headerlink" title="这样的传进去了一个Stirng对象。没什么好说的了，就基本就是这样。"></a>这样的传进去了一个Stirng对象。没什么好说的了，就基本就是这样。</h5><h5 id="常用的java集合中，就用到了许多泛型的知识"><a href="#常用的java集合中，就用到了许多泛型的知识" class="headerlink" title="常用的java集合中，就用到了许多泛型的知识"></a>常用的java集合中，就用到了许多泛型的知识</h5><p>Person person = new Student(3, “df”);<br>        person.s();<br>        ArrayList&lt; Person &gt; list1 = new ArrayList&lt; Person &gt;();<br>        list1.add(new Person(3));<br>        list1.add(new Person(4));<br>        ArrayList&lt; Student &gt; list2 = new ArrayList&lt; Student &gt;();<br>        list2.add(new Student(3, “f”));<br>        list1.addAll(list2);<br>        ArrayList&lt; faslkf &gt; list3 = new ArrayList&lt; faslkf &gt;();<br>        list3.add(new faslkf());<br>        list1.addAll(list3);<br>        String[] strings = new String[] {“a”,”b”,”c”};<br>        List&lt; String &gt; bList = Arrays.asList(strings);<br>        bList.add(“d”);<br>        System.out.println(bList);<br>        下面这个例子中list的addAll方法，原型如下<br>        <img src="https://img-blog.csdnimg.cn/20190802232555520.png" alt="在这里插入图片描述"><br>在参数中，用到了E泛型，其中？extends E表示任何继承E的子类都可以</p></blockquote><hr><h1 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h1><hr><h5 id="泛型接口和泛型类基本都差不多，就像抽象类和接口有什么区别对吧，自己想一想就知道，顺便提一下，抽象类和接口的区别也是面试常常问的题目，上半年我面了三家，两家这么问的。"><a href="#泛型接口和泛型类基本都差不多，就像抽象类和接口有什么区别对吧，自己想一想就知道，顺便提一下，抽象类和接口的区别也是面试常常问的题目，上半年我面了三家，两家这么问的。" class="headerlink" title="泛型接口和泛型类基本都差不多，就像抽象类和接口有什么区别对吧，自己想一想就知道，顺便提一下，抽象类和接口的区别也是面试常常问的题目，上半年我面了三家，两家这么问的。"></a>泛型接口和泛型类基本都差不多，就像抽象类和接口有什么区别对吧，自己想一想就知道，顺便提一下，抽象类和接口的区别也是面试常常问的题目，上半年我面了三家，两家这么问的。</h5><blockquote><p>public interface Generator&lt; T&gt; {<br>    public T next();<br>}<br>泛型接口使用有==两种比较常用的方式==</p><h5 id="一"><a href="#一" class="headerlink" title="一"></a>一</h5><p><strong>class FruitGenerator&lt; T&gt; implements Generator&lt; T&gt;{<br>        public T next() {<br>        return null;<br>    }<br>}</strong><br>这里我们直观看过去并不知道T的具体类型，所以在创建对象的时候，必须传入一个具体的类型来告诉编译器你是啥。</p><h5 id="二"><a href="#二" class="headerlink" title="二"></a>二</h5><p>public class FruitGenerator implements Generator&lt; String&gt; {<br>    private String[] fruits = new String[]{“Apple”, “Banana”, “Pear”};<br>    public String next() {<br>        Random rand = new Random();<br>        return fruits[rand.nextInt(3)];<br>    }<br>}<br>这个就是在类的定义的时候直接将String类型传给了接口，所以我们在创建对象时就不需要进行七七八八的传入操作了。其实最常用的应该也是第二种了，因为所谓接口，就是提供给各种实现类去实现，那么接口用泛型很OK，但是对于实现类，应该还是要针对一种具体的情况去分类实现，这也是编程中一种比较艺术的方式，如果把各种类型都集中到一个类实现，就像第一种，那就要求各种类型的业务要求有很高的集中度和相似度，才能够降低成本，不然，还是要针对各种类型去实现。所以在开发中，一般情况还是用的第二种。</p></blockquote><hr><h1 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h1><hr><p>先来看一个模板</p><blockquote><p>/**<br> 泛型方法的基本介绍<br> @param tClass 传入的泛型实参<br> @return T 返回值为T类型<br> 说明：<br>     1）public 与 返回值中间&lt; T&gt;非常重要，可以理解为声明此方法为泛型方法。<br>     2）只有声明了&lt; T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。<br>     3）&lt; T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。<br>      4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。<br> */<br>public &lt; T&gt; T genericMethod(Class&lt; T&gt; tClass)throws InstantiationException ,<br>  IllegalAccessException{<br>        T instance = tClass.newInstance();<br>        return instance;<br>}<br>怎么说呢，不符合这种方式的都不是泛型方法</p></blockquote><p>比如看看下面这种</p><blockquote><p>public T a(){<br>}<br>这种只是引用了类中泛型T，并不是方法自己的泛型，你看类它用了自己的泛型，所以方法也应该用自己的泛型，而且再泛型类中，泛型方法可以和泛型类使用同一名字泛型</p></blockquote><h4 id="同时注意，这里有个比较特殊的方法，我们需要注意，就是静态方法，并不需要创建相应类的对象，我们研究静态方法的泛型的时候，也不需要类的信息，也根本不可能直到类的信息，所以，对于静态方法，我们不能使用类中的泛型和类定义的信息，比如下面"><a href="#同时注意，这里有个比较特殊的方法，我们需要注意，就是静态方法，并不需要创建相应类的对象，我们研究静态方法的泛型的时候，也不需要类的信息，也根本不可能直到类的信息，所以，对于静态方法，我们不能使用类中的泛型和类定义的信息，比如下面" class="headerlink" title="同时注意，这里有个比较特殊的方法，我们需要注意，就是静态方法，并不需要创建相应类的对象，我们研究静态方法的泛型的时候，也不需要类的信息，也根本不可能直到类的信息，所以，对于静态方法，我们不能使用类中的泛型和类定义的信息，比如下面"></a>同时注意，这里有个比较特殊的方法，我们需要注意，就是静态方法，并不需要创建相应类的对象，我们研究静态方法的泛型的时候，也不需要类的信息，也根本不可能直到类的信息，所以，对于静态方法，我们不能使用类中的泛型和类定义的信息，比如下面</h4><pre><code>public class gei&lt;T&gt;{    public static T ik(){//这里根本不能这样使用，因为再类加载的时候这个静态方法就加载进了虚拟机，再这种情况下，类根本还没有创建对象，所以根本没有通过创建对象传入相应的实际参数类，这时候静态方法根本不知道T是啥，所以静态方法不能使用类中的泛型。    }}第二种情况:正确的静态方法使用情况public static&lt;T&gt; T t() {        return t();}当然这个例子会内存溢出，这里只是为了举个例子而已，定义正确的静态方法泛型就是这样的。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中class类文件结构</title>
      <link href="/2020/04/21/java%E4%B8%ADclass%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2020/04/21/java%E4%B8%ADclass%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h4 id="类文件是java程序编译后产生的文件，要了解java虚拟机，了解它的类文件结构是必不可少的。"><a href="#类文件是java程序编译后产生的文件，要了解java虚拟机，了解它的类文件结构是必不可少的。" class="headerlink" title="类文件是java程序编译后产生的文件，要了解java虚拟机，了解它的类文件结构是必不可少的。"></a>类文件是java程序编译后产生的文件，要了解java虚拟机，了解它的类文件结构是必不可少的。</h4><hr><h2 id="类文件简介"><a href="#类文件简介" class="headerlink" title="类文件简介"></a>类文件简介</h2><blockquote><p>首先我们要清楚java的class类文件是以8字节为基础的二进制流，什么叫以8位字节为基础，就是如果你是16,32位或者以上的东西，它都会分割开来存储的，而且每个数据之间没有任何的分割符号，像一家人一样紧凑的挨在一起。<br>这种文件中包含了虚拟机指令集，符号表还有一些辅助信息。它的数据类型只有两种：无符号数和表：<br>无符号数：用u1，u2，u4，u8分别表示1字节，2字节，4字节，8字节的无符号数，可以用来描述一些数值，索引引用等等。<br>表：由多个无符号数和表组成的一种复合数据类型。由于整个class文件就是由这些东西组成的，所以class文件本身就是一个表。习惯性的以_info结尾。</p></blockquote><p><strong>下面我们弄一张图片看看class文件的整体结构，尽量让大家有个印象，不求记住，只求了解就行。</strong><br><img src="https://img-blog.csdnimg.cn/20190802121403276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>刚开始我看到这些东西也是很陌生，很头疼，但你仔细看，其中的常量池在我写的虚拟机内存结构就提及过了。不记得不要急，我在这里一一谈一谈我自己的理解。<br>下面这张图是一个程序的二进制文件，把它转成了十六进制，便于观察。可以清楚的看到，每两个字符一起组成了一个字节。<br><img src="https://img-blog.csdnimg.cn/2019080212142774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h4 id="一：魔数和版本号："><a href="#一：魔数和版本号：" class="headerlink" title="一：魔数和版本号："></a>一：魔数和版本号：</h4><blockquote><p>magic：魔数，前4个字节都是描述魔数的，这个东西是指区分能够被java虚拟机识别的class文件，值位CAFEBABE，如果肉麻的话，可以理解成“咖啡宝贝”。</p><p>minor_version：此版本号，占2个字节，分别是5,6字节。</p><p>major_version: 主版本号， 占2个字节，分别是7,8字节。 这部分了解一下就行，没有多大意义。</p></blockquote><h4 id="二：常量池计数器和常量池："><a href="#二：常量池计数器和常量池：" class="headerlink" title="二：常量池计数器和常量池："></a>二：常量池计数器和常量池：</h4><blockquote><p>常量池在前面的内存区域已经涉及到了一点点了。在版本号之后呢，有一个常量计数器，因为常量的值不确定，得要知道有多少个常量对不对。而且常量的计数是从1开始的。占2个字节。<br>下面就是常量池中的东西了。<br><img src="https://img-blog.csdnimg.cn/20190802121514824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>字面量相信大家都已经有所了解，我介绍一下符号引用吧。<br>完全限定名：又称作绝对名称，一般描述类和接口的名称，比如一个类Thread，全限定名就是java.lang.Thread，但是非限定名不同他可以省略一点点，就是Thread。<br>描述符：描述符是一个描述字段或方法的类型的字符串。<br>字段描述符：是一个表示类、实例或局部实例变量的语法符号。<br>方法描述符：描述一个方法所需的参数和返回值信息，即包括参数描述符和返回描值述符；<br>下面是描述符中表示基本类型的符号：<br><img src="https://img-blog.csdnimg.cn/20190802121529242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>int实例变量的描述符是”I”；这从这个表中应该可以看出来。</p><p>java.lang.Object实例描述符是”Ljava/lang/Object;”；</p><p>double的三维数组”double d[][][];”的描述符为”[[[D”；</p><p>接下来就是常量池中的常量项及其结构了：<br><img src="https://img-blog.csdnimg.cn/20190802121545624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190802121552896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="从上面这些东西可以看到，常量池中的每一常量（符号引用或者字面量）都是以上途中14种类型中的一种。我们举一个例子来理解一下："><a href="#从上面这些东西可以看到，常量池中的每一常量（符号引用或者字面量）都是以上途中14种类型中的一种。我们举一个例子来理解一下：" class="headerlink" title="从上面这些东西可以看到，常量池中的每一常量（符号引用或者字面量）都是以上途中14种类型中的一种。我们举一个例子来理解一下："></a>从上面这些东西可以看到，常量池中的每一常量（符号引用或者字面量）都是以上途中14种类型中的一种。我们举一个例子来理解一下：</h5><p><strong>07 00 02 01 假设class文件中的某一十六进制码段是这个，那么首先看07，这个首先看的07就是标志位（tag），然后在上面 的表中找到07标志位对应的数据类型CONSTANT_class_info，这个数据类型的索引占2个字节，然后接下来2个字节00 02就是一个索引，指向第二个常量，0x01表 示CONSTANT_Utf8_info，差不多就是字符串，就是一个类或者接口的名字了，以此类推，后面的十六进制码我们 可以一一推出来。</strong></p></blockquote><h4 id="三：访问标志"><a href="#三：访问标志" class="headerlink" title="三：访问标志"></a>三：访问标志</h4><p>接着常量池后面的2个字节表示访问标志，含义见下表<br><img src="https://img-blog.csdnimg.cn/20190802121639759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个根据十六进制码找到对应的含义就行。包括类和接口的访问类型，是否为public等等。</p><h4 id="四：类索引，父类索引，接口索引"><a href="#四：类索引，父类索引，接口索引" class="headerlink" title="四：类索引，父类索引，接口索引"></a>四：类索引，父类索引，接口索引</h4><blockquote><p>类索引：占2个字节，表示对本类的描述。</p><p>父类索引：占2个字节，表示对父类的描述。</p><p>接口索引：头两个字节表示实现的接口数，然后紧跟着接口列表。</p><p>每一个索引都要对应到常量数据中的信息。</p></blockquote><h4 id="五：字段表集合"><a href="#五：字段表集合" class="headerlink" title="五：字段表集合"></a>五：字段表集合</h4><p>接着接口索引集合后面的就是字段表的个数，然后就是字段表。个数任然占有两个字节。</p><p>字段表用于描述接口或者类中声明的变量。字段包括类级变量以及实例级变量。主要包括以下信息：</p><ul><li>字段的作用域（public、private、protected修饰符） </li><li>实例变量还是类变量（static修饰符）</li><li>可变性（final）</li><li>并发可见性（volatile） <ul><li>可否被序列化（transient） </li><li>字段数据类型（基本类型，对象，数组）</li><li>字段名称</li></ul><strong>字段表结构：</strong><br><img src="https://img-blog.csdnimg.cn/20190802121804420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><blockquote><p>1：access_flags:<br><img src="https://img-blog.csdnimg.cn/20190802121820520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2：name_index:是对常量池的索引<br>3：descripto_index:也是对应常量池的索引<br><img src="https://img-blog.csdnimg.cn/20190802121841132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>字段表都包含的固定数据项到descriptor_index为止就结束了，不过在descriptor_index之后跟随着一个属性表集合用于存储一些额外的信息，字段都可以在属性表中描述零至多项的额外信息。属性表等会儿后面会提到。</strong></p></blockquote><h4 id="六：方法表集合"><a href="#六：方法表集合" class="headerlink" title="六：方法表集合"></a>六：方法表集合</h4><blockquote><p>和字段表集合其实差不多，也有对应方法表结构，紧跟着字段表后面的就是方法的个数，然后就是方法表。</p><p>方法表结构：<br><img src="https://img-blog.csdnimg.cn/20190802121912928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190802121917154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>方法表中·的方法代码具体存在了属性中，下一标题会讲到的。这样的方法表集合也就和字段表差不多了，虽然表中有一定的区别。</p></blockquote><h4 id="七：属性表集合"><a href="#七：属性表集合" class="headerlink" title="七：属性表集合"></a>七：属性表集合</h4><p>属性这一块就是一个大块了。最然在最后谈属性表，但是属性表在前面的许多地方都有的，比如字段表，方法表。<br><img src="https://img-blog.csdnimg.cn/20190802121935859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190802121942254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190802121946870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>对于每个属性，它的名称需要从常量池引用一个CONSTANT_Utf8_info类型的常量来表示。</p><h5 id="属性表结构："><a href="#属性表结构：" class="headerlink" title="属性表结构："></a>属性表结构：</h5><p><strong>1：Code属性：</strong><br><img src="https://img-blog.csdnimg.cn/20190802122014144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>attributenameindex:表示指向的CONSTANT_Utf8_info类型常量的值固定为Code</p><p>attribute——length：表示属性表的总长度。</p><p>max_stack:这个在上一篇文章讲过了，我说过在编译的时候最大的操作数栈就已经确定了。</p><p>max_locals：最大的存储空间，以slot（内存槽为单位），也是在之前的文章说过了，可以去看一看。</p><p>code_length:表示核心代码长度。</p><p>code:存储核心代码，它是一种指令集每个占1个字节。<br><strong>2：异常表</strong><br>异常表结构：<br><img src="https://img-blog.csdnimg.cn/20190802122056871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果当字节码在第start_pc行到end_pc行之间（不含第end_pc行）出现了类型为catch_type或其子类异常（catch_type为指向一个CONSTANT_Class_info型常量的索引），则转到第handler_pc行继续处理。当catch_type的值为0时，代表任意异常情况都需要转向到handler_pc处进行处理。</p><ul><li>如果try语句块中出现属于Exception或其子类的异常，则转到catch语句块处理。</li><li>如果try语句块中出现不属于Exception或其子类的异常，则转到finally语句块处理。</li><li>如果catch语句块中出现任何异常，则转到finally语句块处理。</li><li>更详细的可参考异常处理机制；</li></ul><p><strong>3：Exception属性</strong><br><img src="https://img-blog.csdnimg.cn/20190802122157685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Exception属性的作用是列举出方法中可能抛出的受查异常, 也就是方法描述时在throws关键字后面列举的异常。</p></blockquote><h4 id="接下来我说的属性我没有详细介绍，个人感觉对我自己暂时没有啥帮助。哈哈哈"><a href="#接下来我说的属性我没有详细介绍，个人感觉对我自己暂时没有啥帮助。哈哈哈" class="headerlink" title="接下来我说的属性我没有详细介绍，个人感觉对我自己暂时没有啥帮助。哈哈哈"></a>接下来我说的属性我没有详细介绍，个人感觉对我自己暂时没有啥帮助。哈哈哈</h4><blockquote><p>LineNumberTable属性</p><p>LineNumberTable属性用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系。<br><img src="https://img-blog.csdnimg.cn/201908021222295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>linenumberinfo包括startpc和line_number，对应字节码行号和源码行号</p><p>LocalVariableTable属性</p><p><img src="https://img-blog.csdnimg.cn/20190802122236384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>LocalVariableTable属性用于描述栈帧中局部变量表中的变量与Java源码中定义的变量之间的关系。</p><p>SourceFile属性</p><p>SourceFile属性用于记录生成这个Class文件的源码文件名称。</p><p>ConstantValue属性</p><p>ConstantValue属性的作用是通知虚拟机自动为静态变量赋值。只有被static关键字修饰的常量（类变量）才可以使用这项属性。</p><p>InnerClasses属性</p><p>InnerClasses属性用于记录内部类与宿主类之间的关联。</p><p>Deprecated及Synthetic属性</p><p>两个属性都属于标志类型的布尔属性，只存在有和没有的区别，没有属性值的概念。Synthetic代表字段或者方法并不是有Java源码直接产生的，而是由编译器自行添加的。</p><p>StackMapTable属性</p><p>它是一个复杂的变长属性，位于Code属性的属性表中。会在虚拟机类加载的字节码验证阶段被新类型检查验证器（Type<br>Checker）使用，目的在于代替以前比较消耗性能的基于数据流分析的类型推导验证器。一个方法的Code属性最多只能有一个StackMapTable属性。</p><p>Signature属性</p><p>用于记录泛型签名信息。</p><p>BootstrapMethods属性</p><p>位于类文件的属性表中。用于保存invokedynamic指令引用的引导方法限定符。</p></blockquote><h1 id="以上是我对类文件结构的理解，后面的属性因为某些知识的缺乏，暂时还没有理解透，后期我会补上，大家暂时看看我的文章有没有问题，希望大家多提提意见，如果实在还看不懂，我会更新一篇具体的看解析字节码的文章。"><a href="#以上是我对类文件结构的理解，后面的属性因为某些知识的缺乏，暂时还没有理解透，后期我会补上，大家暂时看看我的文章有没有问题，希望大家多提提意见，如果实在还看不懂，我会更新一篇具体的看解析字节码的文章。" class="headerlink" title="以上是我对类文件结构的理解，后面的属性因为某些知识的缺乏，暂时还没有理解透，后期我会补上，大家暂时看看我的文章有没有问题，希望大家多提提意见，如果实在还看不懂，我会更新一篇具体的看解析字节码的文章。"></a>以上是我对类文件结构的理解，后面的属性因为某些知识的缺乏，暂时还没有理解透，后期我会补上，大家暂时看看我的文章有没有问题，希望大家多提提意见，如果实在还看不懂，我会更新一篇具体的看解析字节码的文章。</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>String和StringBuffer，StringBuilder</title>
      <link href="/2020/04/21/String%E5%92%8CStringBuffer%EF%BC%8CStringBuilder/"/>
      <url>/2020/04/21/String%E5%92%8CStringBuffer%EF%BC%8CStringBuilder/</url>
      
        <content type="html"><![CDATA[<p>今天看了看String，又对比了StringBuffer和StringBuilder看了看，感觉里面的知识点还挺多的，而且String的使用我还不是很熟练，包括他们之间的区别，又是面试中经常问到的，这里我就来分享分享自己的想法吧。</p><hr><h1 id="String"><a href="#String" class="headerlink" title="String"></a><em>String</em></h1><hr><p><img src="https://img-blog.csdnimg.cn/20190723223846661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看看源码的介绍<br><strong>value数组</strong></p><blockquote><p>这个value是一个字符数组，可以知道是用来存储字符串的，字符串的底层就是字符数组char[]，而且它被定义成了value，注意了，这里是value数组被定义成value，只是value这个对象不可以改变，但是value里面的值还是可以改变的，这里我在很多博客里面都说String对象的底层值不能改变，但具体也没说清楚。<br>举个例子：final int x[]={1,2,3};这个数组，只是标识x这个变量的指向不可以变，不代表x[1]的具体值不可以变。<br>而在value数组中，记录的就是我们创建的字符串，它又被定义了private，所以在创建String对象时，所以直接情况下，是改变不了String对象的值的，而平时的“+”操作符，实际是新建了一个对象。</p></blockquote><h4 id="还有就是注意这个类和value都是被final修饰的所以不能被继承访问"><a href="#还有就是注意这个类和value都是被final修饰的所以不能被继承访问" class="headerlink" title="还有就是注意这个类和value都是被final修饰的所以不能被继承访问"></a>还有就是注意这个类和value都是被final修饰的所以不能被继承访问</h4><p>再来看看几个构造方法：<br><img src="https://img-blog.csdnimg.cn/20190723224902693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190723224923106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里的构造方法都会给value赋值，从虚拟机的角度分析一下String对象创建时的流程：<br><strong>以String s = new String(“ak”);为例</strong><br><img src="https://img-blog.csdnimg.cn/20190723225644690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在内存里面是这样的，这里实际上是有两个对象的，也就是说，new String时，创建了<strong>两个对象</strong></p><blockquote><ul><li>一就是s这个对象在堆中的实例<ul><li>二时value数组在常量池中保存的真正的常量字符序列</li></ul></li></ul></blockquote><p><strong>以String s = “ak”;为例</strong></p><p><img src="https://img-blog.csdnimg.cn/20190723230110187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里s变量就直接指向了在<strong>字符串常量池</strong>中的实际“ak”序列</p><blockquote><p><strong>而字符串常量池中的Stirng数据可以说是共享的，也就是说，如果还有一个ak的序列，就不会重新创建，而会用原来的。但是如果要用别的序列，如果常量池中没有，就会要重新在常量池中创建一个新的。<br>String s = new String(“abc”)实际上是”abc”本身就是文字池中的一个对象，          在运行 new<br>String()时，把文字池即pool中的字符串”abc”复制到堆中，<br>并把这个对象的应用交给s，所以创建了两个String对象，一个在pool 中，一个在堆中。<br>也就始说在堆中的就是从常量池中复制过来的副本</strong></p></blockquote><p>在我的知乎文章Class文件结构 - Tmhoney的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/44378698" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44378698</a><br>中，已经详细介绍了在java虚拟机里面关于内存区域和类文件结构运行时常量结构的有关内容，可以去看看，有启发的话可以关注我一下，哈哈哈。</p><blockquote><p><strong>在比较字符串是”==“比较的是对象的地址，而equals是比较的实际值。</strong></p></blockquote><p>那么既然了解了String创建过程，我们还是来几个有意义的问答。</p><h5 id="一"><a href="#一" class="headerlink" title="一"></a>一</h5><p><img src="https://img-blog.csdnimg.cn/2019072323092054.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到这里的s1和s2是指向常量池中的同一字符序列对象。</p><h5 id="二"><a href="#二" class="headerlink" title="二"></a>二</h5><p><img src="https://img-blog.csdnimg.cn/20190723231515772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>s4可以说是abc对象的副本，s5是直接指向了abc对象，s4和s5的地址值不同，但是字符内容相同。</p><h5 id="三"><a href="#三" class="headerlink" title="三"></a>三</h5><p><img src="https://img-blog.csdnimg.cn/20190723232055517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><pre><code>     java语言提供的字符串串联符号“+”以及其他对象转换为字符串的特殊支持         </code></pre><p>字符串串联时通过StringBuilder或者StringBuffer及其append方法实现的<br>字符串转换通过toString实现，该方法由Object类定义。          String s1 = “ab”;          String s2 =<br>“abc”;<br>          String s3 = s1 + “c”;          这个时候ab和abc已经在常量池中创建了两个对象          这个后s3在s1和c串联，底层先创建一个StringBuffer对象          将abc放在StringBuffer里面<br>调用StrigBuffer的toString方法转化成String对象，和StringBuffer那个对象不一样</p></blockquote><hr><hr><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a><em>StringBuffer</em></h1><hr><hr><p><img src="https://img-blog.csdnimg.cn/20190723233042581.png" alt="在这里插入图片描述"></p><p>StringBuffer是一个线程安全，可修改的字符序列。<br>StringBuffer可以在任意一个时间点改变其中的序列。<br><img src="https://img-blog.csdnimg.cn/20190723233150323.png" alt="在这里插入图片描述"><br>从源码来看，它继承了AbstractStringBuilder类并实现了序列化接口。先来看看AbstractStringBuilder类</p><h4 id="AbstractStringBuilder类"><a href="#AbstractStringBuilder类" class="headerlink" title="AbstractStringBuilder类"></a>AbstractStringBuilder类</h4><p><img src="https://img-blog.csdnimg.cn/20190723233329443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190723233553771.png" alt="在这里插入图片描述"></p><blockquote><p>它是一个抽象类，成员变量包括了字符数组的保存值value，还有实际字符数目的大小count<br>length（）是返回实际长度大小，capacity（）是返回最大容量的理论大小<br>两个构造方法：</p><ul><li>空构造方法什么也没做<ul><li>而带参的则告诉了字符的最大容量大小。</li></ul></li></ul></blockquote><h4 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h4><p><img src="https://img-blog.csdnimg.cn/20190723233833391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>这里StringBuffer的实现基本和AbstractStringBuilder差不多，只是另外定义了toStringCache的缓冲区变量，而且它的空构造使用了最小的字符空间16<br>而length和capacity方法还是和父类一样。</p></blockquote><hr><h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h1><hr><h4 id="StringBuilder和StringBuffer几乎一模一样，同样继承了AbstractStringBuilder，这里就不对源码进行分析了。只是StringBuffer比StringBuilder多了一个-同步锁-，能够保证StringBuffer在对StringBuffer的对象进行增删操作时，能够保证线程安全。"><a href="#StringBuilder和StringBuffer几乎一模一样，同样继承了AbstractStringBuilder，这里就不对源码进行分析了。只是StringBuffer比StringBuilder多了一个-同步锁-，能够保证StringBuffer在对StringBuffer的对象进行增删操作时，能够保证线程安全。" class="headerlink" title="StringBuilder和StringBuffer几乎一模一样，同样继承了AbstractStringBuilder，这里就不对源码进行分析了。只是StringBuffer比StringBuilder多了一个==同步锁==，能够保证StringBuffer在对StringBuffer的对象进行增删操作时，能够保证线程安全。"></a>StringBuilder和StringBuffer几乎一模一样，同样继承了AbstractStringBuilder，这里就不对源码进行分析了。只是StringBuffer比StringBuilder多了一个==同步锁==，能够保证StringBuffer在对StringBuffer的对象进行增删操作时，能够保证线程安全。</h4><hr><h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><hr><h2 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h2><h4 id="Stringbuilder-gt-StringBuffer-gt-String"><a href="#Stringbuilder-gt-StringBuffer-gt-String" class="headerlink" title="Stringbuilder&gt;StringBuffer&gt;String"></a>Stringbuilder&gt;StringBuffer&gt;String</h4><h5 id="因为StringBuilder减少了性能开销，但是线程不安全，而StringBuffer能够保证线程安全，但是效率不高，而String就更不用说了，根本就是不能够增加减少，每次都是重新创建一块区域来锁定目标字符串，对于多次创建字符串的情况下，应该减少String的使用，对于StringBuilder和StringBuffer只是重新创建了对象中的value字符数组，用来保存字符串，而String则需要重新在堆中创建整个对象来锁定字符串。"><a href="#因为StringBuilder减少了性能开销，但是线程不安全，而StringBuffer能够保证线程安全，但是效率不高，而String就更不用说了，根本就是不能够增加减少，每次都是重新创建一块区域来锁定目标字符串，对于多次创建字符串的情况下，应该减少String的使用，对于StringBuilder和StringBuffer只是重新创建了对象中的value字符数组，用来保存字符串，而String则需要重新在堆中创建整个对象来锁定字符串。" class="headerlink" title="因为StringBuilder减少了性能开销，但是线程不安全，而StringBuffer能够保证线程安全，但是效率不高，而String就更不用说了，根本就是不能够增加减少，每次都是重新创建一块区域来锁定目标字符串，对于多次创建字符串的情况下，应该减少String的使用，对于StringBuilder和StringBuffer只是重新创建了对象中的value字符数组，用来保存字符串，而String则需要重新在堆中创建整个对象来锁定字符串。"></a>因为StringBuilder减少了性能开销，但是线程不安全，而StringBuffer能够保证线程安全，但是效率不高，而String就更不用说了，根本就是不能够增加减少，每次都是重新创建一块区域来锁定目标字符串，对于多次创建字符串的情况下，应该减少String的使用，对于StringBuilder和StringBuffer只是重新创建了对象中的value字符数组，用来保存字符串，而String则需要重新在堆中创建整个对象来锁定字符串。</h5><p><strong>所以：<br>一般情况下：<br>对于单线程数据大的情况下，使用StringBuilder<br>对于多线程数据大的情况下，使用StringBuffer<br>其他一般清情况下斟酌使用String；</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spark(三)-spark算子</title>
      <link href="/2020/04/21/spark(%E4%B8%89)-spark%E7%AE%97%E5%AD%90/"/>
      <url>/2020/04/21/spark(%E4%B8%89)-spark%E7%AE%97%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>• RDD（Resilient Distributed Dataset )• 五大特性：<br>– A list of partitions<br>– A function for computing each partition<br>– A list of dependencies on other RDDs<br>– Optionally, a Partitioner for key-value RDDs• shuffle的时<br>– Optionally, a list of preferred locations to compute each split on• task计算的数据本地化</p><p><img src="https://img-blog.csdnimg.cn/20190707154921553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>RDD里截图：<br><img src="https://img-blog.csdnimg.cn/20190707155016848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>==注意：==</p><ul><li>textFile方法底层封装的是读取MR读取文件的方式，读取文件之前先split，默认split大小是一个block大小。</li><li>RDD实际上不存储数据，这里方便理解，暂时理解为存储数据。</li><li>什么是K,V格式的RDD?<br>如果RDD里面存储的数据都是二元组对象，那么这个RDD我们就叫做K,V格式的RDD。</li><li>哪里体现RDD的弹性（容错）？<ul><li>partition数量，大小没有限制，体现了RDD的弹性。</li><li>RDD之间依赖关系，可以基于上一个RDD重新计算出RDD。</li></ul></li><li>哪里体现RDD的分布式？<ul><li>RDD是由Partition组成，partition是分布在不同节点上的。</li></ul></li><li>RDD提供计算最佳位置，体现了数据本地化。体现了大数据中“计算移动数据不移动”的理念。</li></ul><hr><h2 id="Transformations转换算子"><a href="#Transformations转换算子" class="headerlink" title="Transformations转换算子"></a>Transformations转换算子</h2><hr><blockquote><p>Transformations类算子是一类算子（函数）叫做转换算子，如map,flatMap,reduceByKey等。Transformations算子是延迟执行，也叫懒加载执行。</p></blockquote><hr><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><hr><p><strong>过滤符合条件的记录数，true保留，false过滤掉。</strong><br><img src="https://img-blog.csdnimg.cn/20190707155811993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>   filter 函数功能是对元素进行过滤，对每个 元 素 应 用 f 函 数， 返 回 值 为 true 的 元 素 在RDD<br>中保留，返回值为 false 的元素将被过滤掉。<br> 内 部 实 现 相 当 于 生 成 FilteredRDD(this，sc.clean(f))。<br>下面代码为函数的本质实现：    deffilter(f:T=&gt;Boolean):RDD[T]=newFilteredRDD(this,sc.clean(f))<br>　　上图中每个方框代表一个 RDD 分区， T 可以是任意的类型。通过用户自定义的过滤函数 f，对每个数据项操作，将满足条件、返回结果为 true 的数据项保留。例如，过滤掉 V2 和 V3 保留了 V1，为区分命名为 V’1。<br>　　比如下面这个例子。<br>　　<img src="https://img-blog.csdnimg.cn/20190707160350753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><hr><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><hr><blockquote><p>将一个RDD中的每个数据项，通过map中的函数映射变为一个新的元素。 特点：输入一条，输出一条数据。<br>  图 中每个方框表示一个 RDD 分区，左侧的分区经过用户自定义函数 f:T-&gt;U 映射为右侧的新 RDD 分区。但是，实际只有等到 Action算子触发后，这个 f 函数才会和其他函数在一个stage 中对数据进行运算。在图 1 中的第一个分区，数据记录 V1 输入 f，通过 f 转换输出为转换后的分区中的数据记录 V’1。<br>  <img src="https://img-blog.csdnimg.cn/2019070716054520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  <img src="https://img-blog.csdnimg.cn/20190707160756448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><hr><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><hr><blockquote><p>先map后flat。与map类似，每个输入项可以映射为0到多个输出项。<br>将原来 RDD 中的每个元素通过函数 f 转换为新的元素，并将生成的 RDD 的每个集合中的元素合并为一个集合，内部创建 FlatMappedRDD(this，sc.clean(f))。<br>图中表 示 RDD 的 一 个 分 区 ，进 行 flatMap函 数 操 作， flatMap 中 传 入 的 函 数 为 f:T-&gt;U， T和 U 可以是任意的数据类型。将分区中的数据通过用户自定义函数 f 转换为新的数据。外部大方框可以认为是一个 RDD 分区，小方框代表一个集合。 V1、 V2、 V3 在一个集合作为 RDD 的一个数据项，可能存储为数组或其他容器，转换为V’1、 V’2、 V’3 后，将原来的数组或容器结合拆散，拆散的数据形成为 RDD 中的数据项。<br><img src="https://img-blog.csdnimg.cn/2019070716102749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190707161527442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面这个例子，就是对于lines中一共有三个分区：<br>第一个分区：”ak gh” “hh rr”<br>第二个分区：”tt rtwer”,”mm gsfg”,”qq dlee”,<br>第三个分区：”dfsa pp”,”ade qjid”,”sdf laow”<br>三个分区是一个RDD，当对它使用flatmap时，就是对RDD的每一个分区作用，将某一个分区的不同部分操作，然后组成一个集合，比如对第一个分区，将每个字符串用空格分离，然后组成一个字符串集合。<br>每一个分区都组成了一个集合。</p></blockquote><hr><h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><hr><blockquote><p>sample 将 RDD<br>这个集合内的元素进行采样，获取所有元素的子集。用户可以设定是否有放回的抽样、百分比、随机种子，进而决定采样方式。<br>内部实现是生成<br>SampledRDD(withReplacement， fraction， seed)。　<br>函数参数设置：<br>　　withReplacement=true，表示有放回的抽样。<br>　　withReplacement=false，表示无放回的抽样。<br>          fraction：用来抽取百分之多少的数据，0-1之间<br>        seed：如果针对同一批数据源，则对于同样的参数，抽取的数据永远一样，只要所有参数一样。这主要针对一个公司有一个公共数据集，每个人写的算法从中抽取相同数据来比较谁的好。<br>图 中 的 每 个 方 框 是 一 个 RDD 分 区。 通 过 sample 函 数， 采 样 50% 的 数 据。V1、 V2、<br>U1、 U2、U3、U4 采样出数据 V1 和 U1、 U2 形成新的 RDD。<img src="https://img-blog.csdnimg.cn/20190707162147603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019070716390969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><hr><h3 id="reduceByKey"><a href="#reduceByKey" class="headerlink" title="reduceByKey"></a>reduceByKey</h3><hr><blockquote><p>   reduceByKey 是比 combineByKey 更简单的一种情况，只是两个值合并成一个值<br>   （ Int， Int V）to （Int， Int C）<br>   比如叠加。所以 createCombiner reduceBykey 很简单，就是直接返回 v，而 mergeValue和 mergeCombiners 逻辑是相同的，没有区别。<br>   图中的方框代表 RDD 分区。通过用户自定义函数 (A,B) =&gt; (A + B) 函数，将相同 key 的数据 (V1,2) 和 (V1,1) 的 value 相加运算，结果为（ V1,3）。<br>   <img src="https://img-blog.csdnimg.cn/20190707164316326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   <img src="https://img-blog.csdnimg.cn/20190707165337907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   reducebykey可以将所有分区里面key值相同的聚集到一块，然后将它进行用户定义的聚合操作，这种聚合操作（(v1,v2)=&gt;{v1+v2})就是针对每一个key值，轮回迭代，v1+v2的结果作为下一轮回的v1，v2在取下一个相同key的value，知道一个key中的所有value用完。然后再取下一个key进行相同的运算。</p></blockquote><hr><h3 id="sortByKey-sortBy"><a href="#sortByKey-sortBy" class="headerlink" title="sortByKey/sortBy"></a>sortByKey/sortBy</h3><hr><p>sortBy就是根据传递的参数进行排序：<br>就像下面这个例子，将rdd中的第二个元素，就是单词个数进行排序。<br><img src="https://img-blog.csdnimg.cn/20190707165915550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>sortBykey就是根据key去排序了。</p><hr><h1 id="Action算子"><a href="#Action算子" class="headerlink" title="Action算子"></a>Action算子</h1><hr><blockquote><p>Action类算子也是一类算子（函数）叫做行动算子，如foreach,collect，count等。Transformations类算子是延迟执行，Action类算子是触发执行。一个application应用程序中有几个Action类算子执行，就有几个job运行。</p></blockquote><hr><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><hr><p>返回数据集中的元素数。会在结果计算完成后回收到Driver端</p><hr><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><hr><p>返回一个包含数据集前n个元素的集合。</p><hr><h3 id="first"><a href="#first" class="headerlink" title="first"></a>first</h3><hr><p>first=take(1),返回数据集中的第一个元素。</p><hr><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><hr><p>循环遍历数据集中的每个元素，运行相应的逻辑</p><hr><h3 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h3><hr><p>将计算结果回收到Driver端。</p><hr><h1 id="持久化算子"><a href="#持久化算子" class="headerlink" title="持久化算子"></a>持久化算子</h1><hr><blockquote><p>控制算子有三种，cache,persist,checkpoint，以上算子都可以将RDD持久化，持久化的单位是partition。cache和persist都是懒执行的。必须有一个action类算子触发执行。checkpoint算子不仅能将RDD持久化到磁盘，还能切断RDD之间的依赖关系。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spark(一)-spark安装与配置</title>
      <link href="/2020/04/21/Spark(%E4%B8%80)-spark%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/04/21/Spark(%E4%B8%80)-spark%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;&emsp;<strong>Spark是整个BDAS的核心组件，是一个大数据分布式编程框架，不仅实现了MapReduce的算子map 函数和reduce函数及计算模型，还提供更为丰富的算子，如filter、join、groupByKey等。是一个用来实现快速而同用的集群计算的平台。Spark将分布式数据抽象为弹性分布式数据集（RDD），实现了应用任务调度、RPC、序列化和压缩，并为运行在其上的上层组件提供API。其底层采用Scala这种函数式语言书写而成，并且所提供的API深度借鉴Scala函数式的编程思想，提供与Scala类似的编程接口。</strong><br>&emsp;&emsp;&emsp;<strong>学习spark有一段时间了，就针对平时的学习内容做个总结。今天就简单介绍spark集群的简单搭建。</strong></p><h1 id="Spark集群搭建"><a href="#Spark集群搭建" class="headerlink" title="Spark集群搭建"></a>Spark集群搭建</h1><h4 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h4><blockquote><p><strong>hadoop-2.8.5<br>jdk1.8.0_201<br>spark-2.4.3<br>节点：hadoop01，hadoop02，hadoop03</strong></p></blockquote><p>hadoop集群搭建这里就不重点介绍了。<br>主要介绍spark集群搭建。</p><p><strong>注意:</strong> </p><blockquote><p>我为了搞大数据专门搞了一个大数据的工作目录，就是普通用户主目录的app文件。<br>我将所有的大数据相关组件都下载在这里。将spark-2.4.3从<a href="http://spark.apache.org/docs/latest/index.html" target="_blank" rel="noopener"><strong>官网</strong></a>下载自己对应版本的压缩包。我放在了app目录下面了，然后解压。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190612230448373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>我们来看看spark目录的一些主要文件：</strong></p><ul><li>bin和sbin就是含有一些主要的配置启动命令。</li><li>logs包含了日志信息。</li><li>conf是配置文件目录</li></ul><p><img src="https://img-blog.csdnimg.cn/20190612230752681.png" alt="在这里插入图片描述"><br><strong>进入conf目录：</strong></p><ul><li>主要配置的就是spark-env.sh(由spark-env.sh.template改名而来),slaves.<br><img src="https://img-blog.csdnimg.cn/20190612230933925.png" alt="在这里插入图片描述"></li><li>slaves：</li><li>主要配置三个节点信息：</li><li>hadoop01，hadoop02，hadoop03<br><img src="https://img-blog.csdnimg.cn/20190612231041807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><strong>spark-env.sh:</strong><br>我这里只截了一部分图：</p><blockquote><ul><li><strong>export SPARK_MASTER_HOST=hadoop01//主节点信息</strong></li><li><strong>export SPARK_MASTER_PORT=7077//</strong></li><li><strong>export SPARK_WORKER_CORES=2</strong></li><li><strong>export SPARK_WORKER_MEMORY=3G</strong></li><li><strong>export JAVA_HOME=/home/hadoop/app/jdk1.8.0_201//jdk的目录</strong></li><li><strong>export HADOOP_CONF_DIR=/home/hadoop/app/hadoop-2.8.5/etc/hadoop//hadoop的配置目录</strong></li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/2019061223121612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里基本配置就完了。我们可以在sbin目录直接启动start-all.sh这样就启动了集群<br>这是基于yarn的配置，基于standlone就不需要配置hadoop的配置目录<br>但是在yarn部分机器可能会有内存超过一定比例限制或者hdfs的block的信息不完整的情况，导致进入安全模式，可能是yarn开启了内存检查的功能，在hadoop的yarn配置文件中添加一下文件可以改掉</p><blockquote><p>&lt; property&gt;<br>        &lt; name&gt;yarn.scheduler.maximum-allocation-mb&lt;/ name&gt;<br>        &lt; value&gt;9000&lt;/ value&gt;<br>        &lt; discription&gt;每个任务最多可用内存,单位MB,默认8192MB&lt;/ discription&gt;<br>    &lt;/ property&gt;<br>    &lt; property&gt;<br>        &lt; name&gt;yarn.scheduler.minimum-allocation-mb&lt;/ name&gt;<br>        &lt; value&gt;200&lt;/ value&gt;<br>        &lt; discription&gt;每个任务最少可用内存，单位MB&lt;/ discription&gt;<br>    &lt;/ property&gt;<br>    &lt; property&gt;<br>        &lt; name&gt;yarn.nodemanager.vmem-pmem-ratio&lt;/ name&gt;<br>        &lt; value&gt;4.1&lt;/ value&gt;<br>         &lt; discription&gt;container最少使用的虚拟内存比例&lt;/ discription&gt;<br>    &lt; /property&gt; 也可以关闭虚拟内存检查：<br>#在yarn-site.xml中设置： &lt; property&gt;   &lt; name&gt;yarn.nodemanager.vmem-check-enabled&lt; /name&gt;<br>&lt; value&gt;false&lt;/ value&gt;<br>  &lt;/ property&gt;</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spark在windows端与在linux端的虚拟机分布式集群通信问题</title>
      <link href="/2020/04/21/spark%E5%9C%A8windows%E7%AB%AF%E4%B8%8E%E5%9C%A8linux%E7%AB%AF%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%80%9A%E4%BF%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/21/spark%E5%9C%A8windows%E7%AB%AF%E4%B8%8E%E5%9C%A8linux%E7%AB%AF%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%80%9A%E4%BF%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Could not locate executable null\bin\winutils.exe in the Hadoop binaries.问题<br>加入代码：System.setProperty(“hadoop.home.dir”, “D:\IDEA\hadoop-common-2.2.0-bin-master”);</p><p>只能暂时加入这些代码，但是打包肯定不行的，建议直接在项目里面写入一个配置文件</p><p>hbase再windows端和linux端不匹配的问题：会造成部分mapreduce过程不能执行完，数据写不进去</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java集合之家——LinkList(源码)</title>
      <link href="/2020/04/21/java%E9%9B%86%E5%90%88%E4%B9%8B%E5%AE%B6%E2%80%94%E2%80%94LinkList(%E6%BA%90%E7%A0%81)/"/>
      <url>/2020/04/21/java%E9%9B%86%E5%90%88%E4%B9%8B%E5%AE%B6%E2%80%94%E2%80%94LinkList(%E6%BA%90%E7%A0%81)/</url>
      
        <content type="html"><![CDATA[<p>前面分析了ArrayList，可知它的底层实现就是一个普通数组而已，用到的数据结构就是顺序表。虽然说对于随机访问效率是还可以的，但是如果要进行插入删除的的话，因为要移动大批的元素，导致性能非常地差，所以我们不得不研究出另一种数据结构，可以高效率的实现插入删除，这个数据结构就是链表。而今天的LinkList就利用了双向循环链表实现了这个数据结构。下面我们就来看看源码。</p><blockquote><p><strong>类声明：</strong><br>public class LinkedList<E><br>    extends AbstractSequentialList<E><br>    implements List<E>, Deque<E>, Cloneable, java.io.Serializable<br>    继承了AbstractSequentialList，实现了List，Deque（这个就是一个双端队列），Cloneable。java.io.Serializable。<br>    这里就只说一下AbstractSequentialList，Deque以后另写。</p></blockquote><blockquote><p><strong>AbstractSequentialList</strong>、<br><strong>类声明：</strong><br>public abstract class AbstractSequentialList<E> extends AbstractList<E> {<br>继承了AbstractList，ArrayList的父类也有类似的继承关系<br><strong>构造方法：</strong><br>    protected AbstractSequentialList() {   }<br>    <strong>获取index元素</strong><br>     public E get(int index) {<br>        try {<br>            return listIterator(index).next();/<strong>/调用lslitlterator</strong><br>        } catch (NoSuchElementException exc) {<br>            throw new IndexOutOfBoundsException(“Index: “+index);<br>        }<br>    }<br>    public abstract ListIterator<E> listIterator(int index);<strong>//这个方法由子类实现</strong><br>    <strong>设置元素：</strong><br>    public E set(int index, E element) {<br>        try {<br>            ListIterator<E> e = listIterator(index);<strong>//调用listlterator方法</strong><br>            E oldVal = e.next();<br>            e.set(element);<br>            return oldVal;<br>        } catch (NoSuchElementException exc) {<br>            throw new IndexOutOfBoundsException(“Index: “+index);<br>        }<br>    }<br>    <strong>添加元素：</strong><br>     public void add(int index, E element) {<br>        try {<br>            listIterator(index).add(element);<br>        } catch (NoSuchElementException exc) {<br>            throw new IndexOutOfBoundsException(“Index: “+index);<br>        }<br>    }<br>    <strong>删除元素：</strong><br>    public E remove(int index) {<br>        try {<br>            ListIterator<E> e = listIterator(index);<br>            E outCast = e.next();<br>            e.remove();<br>            return outCast;<br>        } catch (NoSuchElementException exc) {<br>            throw new IndexOutOfBoundsException(“Index: “+index);<br>        }<br>    }<br>    public boolean addAll(int index, Collection&lt;? extends E&gt; c) {<br>        try {<br>            boolean modified = false;<br>            ListIterator<E> e1 = listIterator(index);<br>            Iterator&lt;? extends E&gt; e2 = c.iterator();<br>            while (e2.hasNext()) {<br>                e1.add(e2.next());<br>                modified = true;<br>            }<br>            return modified;<br>        } catch (NoSuchElementException exc) {<br>            throw new IndexOutOfBoundsException(“Index: “+index);<br>        }<br>    }<br>     public Iterator<E> iterator() {<br>        return listIterator();<br>    }<br>    其实上面这些方法在子类LinkList都有类似的实现。</p></blockquote><hr><h2 id="LinkList源码"><a href="#LinkList源码" class="headerlink" title="LinkList源码"></a>LinkList源码</h2><hr><blockquote><p><strong>变量：</strong><br>transient int size = 0;//这个linklist的大小<br>    transient Node<E> first;//头结点，永远指向第一个元素<br>    transient Node<E> last;//尾节点，永远指向最后一个元素<br>    <strong>构造方法：</strong><br>public LinkedList() {  }<strong>无参构造方法</strong><br>    public LinkedList(Collection&lt;? extends E&gt; c) {将集合变成一个双向链表linklist<br>        this();<br>        addAll(c);<br>    }<br>    <strong>————————————————————————————————————————<br>    **将元素插入到第一个结点前面</strong><br>    private void linkFirst(E e) {<br>        final Node<E> f = first;<strong>将头结点赋给f，也就是说f指向了第一个结点</strong><br>        final Node<E> newNode = new Node&lt;&gt;(null, e, f)；<strong>建立一个新的newNode，这里的Node是后面结点的包装，这个新结点就是传过来的e</strong><br>        first = newNode;<strong>将first指向这个新节点</strong><br>        if (f == null)<strong>如果f指向的第一个结点为空，也就是这个链表为空的时候就应该让头结点尾节点都只想newNode</strong><br>            last = newNode;<br>        else<br>            f.prev = newNode;<strong>否则第一个结点不是空，这样就将newNode插入到第一个结点的前面</strong><br>        size++;<strong>长度+1*</strong><br>        modCount++;//<strong>修改次数+1</strong><br>    }<br>    —————————————————————————————————————————<br>    void linkLast(E e) ：<strong>和linkfirst差不多，就是插入到尾节点</strong><br>    <strong>添加节点方法：</strong>默认添加到尾部，代用linkLast<br>    public boolean add(E e) {<br>        linkLast(e);<br>        return true;<br>    }<br>    —————————————————————————————————————————<br>    <strong>将e插入到succ前面：</strong><br>    void linkBefore(E e, Node<E> succ) {<br>        final Node<E> pred = succ.prev;//<strong>将succ结点的前驱赋给pred</strong><br>        final Node<E> newNode = new Node&lt;&gt;(pred, e, succ);//<strong>根据e和succ得到一个新节点</strong><br>        succ.prev = newNode;//<strong>succ.prev就是succ的前驱就是这个新节点</strong><br>        if (pred == null)//<strong>如果前驱为空说明succ是第一个结点。相当于要插入到第一个结点，也就是实现linkfirst</strong><br>            first = newNode;<br>        else<br>            pred.next = newNode;//<strong>不是空说明就是中间的点，这样直接让succ的前驱结点的后继等于newNode即可，而pred，newNode，succ的其他关系都在Node里面实现了<br>        size++;<br>        modCount++;<br>    }<br>    —————————————————————————————————————————<br>    **删除第一个元素：</strong><br>     private E unlinkFirst(Node<E> f) {<br>        final E element = f.item;<br>        final Node<E> next = f.next;<br>        f.item = null;<br>        f.next = null; // 依靠GC回收<br>        first = next;//指向第一个结点的下一个，因为第一个结点已经删除了。<br>        if (next == null)//如果这个节点没有后继，说明整个表只有一个节点，那么last也只能为空<br>            last = null;<br>        else<br>            next.prev = null;<br>        size–;<br>        modCount++;<br>        return element;<br>    }<br>    private E unlinkLast(Node<E> l)同理，删除出最后一个元素<br>    —————————————————————————————————————————<br>    <strong><em>删除某一个元素x：</em></strong><br>     E unlink(Node<E> x) {<br>        final E element = x.item;<br>        final Node<E> next = x.next;/<strong>/先取出x的下一个元素</strong><br>        final Node<E> prev = x.prev;<strong>//先取出x的上一个元素</strong><br>        if (prev == null) {<strong>//前驱为空说明是第一个元素，另first指向第一个元素后继就可以了</strong><br>            first = next;<br>        } else {/<strong>/前驱不是空，就是让prev的后继指向删除元素x的后继next</strong><br>            prev.next = next;<br>            x.prev = null;<br>        }<br>        if (next == null) {<strong>//如果next为空说明x是最后一个元素，另last指向x的前驱就可以了。</strong><br>            last = prev;<br>        } else {<br>            next.prev = prev;//<strong>后继不是空，就让后继的前驱指向删除元素x的前驱prev</strong><br>            x.next = null;<br>        }<br>        x.item = null;<br>        size–;<br>        modCount++;<br>        return element;<br>    }<br>    <strong>供对象调用的删除方法：</strong><br>    public boolean remove(Object o) {<br>        if (o == null) {<br>            for (Node<E> x = first; x != null; x = x.next) {//<strong>遍历聊表找到null</strong>，<br>                if (x.item == null) {<br>                    unlink(x);//<strong>调用上面的unlink删除元素</strong><br>                    return true;<br>                }<br>            }<br>        } else {<br>            for (Node<E> x = first; x != null; x = x.next) {<strong>//遍历链表找到对象o</strong><br>                if (o.equals(x.item)) {<br>                    unlink(x);//<br>                    return true;<br>                }<br>            }<br>        }<br>        return false;<br>    }<br>    —————————————————————————————————————————<br>    <strong>获取第一个元素</strong><br>    public E getFirst() {<br>        final Node<E> f = first;<br>        if (f == null)<br>            throw new NoSuchElementException();<br>        return f.item;<br>    }<br>    <strong>获取最后一个元素</strong><br>     public E getLast() {<br>        final Node<E> l = last;<br>        if (l == null)<br>            throw new NoSuchElementException();<br>        return l.item;<br>    }<br>    —————————————————————————————————————————<br>    <strong>删除第一个元素，调用unlinkFirst实现</strong><br>    public E removeFirst() {<br>        final Node<E> f = first;<br>        if (f == null)<br>            throw new NoSuchElementException();<br>        return unlinkFirst(f);<br>    }<br>    —————————————————————————————————————————<br>    <strong>删除最后一个元素，调用unlinkLast实现</strong><br>    public E removeLast() {<br>        final Node<E> l = last;<br>        if (l == null)<br>            throw new NoSuchElementException();<br>        return unlinkLast(l);<br>    }<br>    —————————————————————————————————————————<br>    <strong>添加第一个或者最后一个元素</strong><br>    public void addFirst(E e) {<br>        linkFirst(e);<br>    }<br> public void addLast(E e) {<br>        linkLast(e);<br>    }   —————————————————————————————————————————<br>    <strong>是否包含某个元素o</strong><br>    public boolean contains(Object o) {<br>        return indexOf(o) != -1;调用下面的indexof<br>    }<br>    <strong>indexof方法：</strong><br>    public int indexOf(Object o) {<br>        int index = 0;<br>        if (o == null) {<br>            for (Node<E> x = first; x != null; x = x.next) {//从前往后遍历，找到第一个空的<br>                if (x.item == null)<br>                    return index;<br>                index++;<br>            }<br>        } else {<br>            for (Node<E> x = first; x != null; x = x.next) {//从前往后遍历，找到第一个o<br>                if (o.equals(x.item))<br>                    return index;<br>                index++;<br>            }<br>        }<br>        return -1;<br>    }—————————————————————————————————————————<br>    <strong>返回链表大小</strong><br>    public int size() {<br>        return size;<br>    }<br>    —————————————————————————————————————————<br>    <strong>向链表中添加一个集合中的元素：</strong><br>    public boolean addAll(Collection&lt;? extends E&gt; c) {<br>        return addAll(size, c);//调用下面的addAll<br>    }<br>    <strong>真正的添加方法：</strong><br>    public boolean addAll(int index, Collection&lt;? extends E&gt; c) {<br>        checkPositionIndex(index);<strong>//检查index是否越界</strong><br>        Object[] a = c.toArray();//<strong>将集合转换成一个数组</strong><br>        int numNew = a.length;<br>        if (numNew == 0)<br>            return false;<br>        Node<E> pred, succ;<br>        if (index == size) {//如果要插入的位置是最后面，那么前驱就是last节点，后继暂时为空<br>            succ = null;<br>            pred = last;<br>        } else {<br>            succ = node(index);//否则后继就是第index个节点<br>            pred = succ.prev;//要插入的点的前驱<br>        }<br>        for (Object o : a) {<br>            @SuppressWarnings(“unchecked”) E e = (E) o;<br>            Node<E> newNode = new Node&lt;&gt;(pred, e, null);<br>            if (pred == null)<br>                first = newNode;<br>            else<br>                pred.next = newNode;<br>            pred = newNode;<br>        }<br>        if (succ == null) {<br>            last = pred;<br>        } else {<br>            pred.next = succ;<br>            succ.prev = pred;<br>        }<br>        size += numNew;<br>        modCount++;<br>        return true;<br>    }—————————————————————————————————————————<br>    <strong>清除链表</strong><br>     public void clear() {<br>        // Clearing all of the links between nodes is “unnecessary”, but:<br>        // - helps a generational GC if the discarded nodes inhabit<br>        //   more than one generation<br>        // - is sure to free memory even if there is a reachable Iterator<br>        for (Node<E> x = first; x != null; ) {<br>            Node<E> next = x.next;<br>            x.item = null;<br>            x.next = null;<br>            x.prev = null;<br>            x = next;<br>        }<br>        first = last = null;<br>        size = 0;<br>        modCount++;<br>    }<br>    —————————————————————————————————————————<br>    <strong>获取第index个节点<br>     public E get(int index) {<br>        checkElementIndex(index);<br>        return node(index).item;//调用node方法<br>    }<br>    **node方法：这里采用了索引分开搜索的方法，缩小一半的搜寻量</strong><br>     Node<E> node(int index) {<br>        if (index &lt; (size &gt;&gt; 1)) {//如果索引index小于size的一半<br>            Node<E> x = first;<br>            for (int i = 0; i &lt; index; i++)<br>                x = x.next;<br>            return x;<br>        } else {//如果索引index大于size的一半<br>            Node<E> x = last;<br>            for (int i = size - 1; i &gt; index; i–)<br>                x = x.prev;<br>            return x;<br>        }<br>    }<br>    —————————————————————————————————————————<br>    <strong>从后往前索引</strong><br>    public int lastIndexOf(Object o) {<br>        int index = size;<br>        if (o == null) {<br>            for (Node<E> x = last; x != null; x = x.prev) {<br>                index–;<br>                if (x.item == null)<br>                    return index;<br>            }<br>        } else {<br>            for (Node<E> x = last; x != null; x = x.prev) {<br>                index–;<br>                if (o.equals(x.item))<br>                    return index;<br>            }<br>        }<br>        return -1;<br>    }<br>    —————————————————————————————————————————<br>    栈模拟操作<br>    public void push(E e) {入栈<br>        addFirst(e);<br>    }<br>  public E pop() {出栈<br>        return removeFirst();<br>    }   —————————————————————————————————————————<br>   返回一个迭代器<br> public ListIterator<E> listIterator(int index) {<br>        checkPositionIndex(index);//检查是否越界<br>        return new ListItr(index);/<strong>/直接new一个Listltr对象，就是下面这个类</strong><br>    }<br>    —————————————————<br>    private class ListItr implements ListIterator<E> {<br>        private Node<E> lastReturned;<br>        private Node<E> next;<br>        private int nextIndex;<br>        private int expectedModCount = modCount;<br>        ListItr(int index) {<br>            next = (index == size) ? null : node(index);<strong>//如果索引是最后一个，那么就是null的迭代了，否则就返回索引的那个元素，以他为迭代器的首位元素。</strong><br>            nextIndex = index;<br>        }<br>        public boolean hasNext() {/<strong>/是否有下一个元素</strong><br>            return nextIndex &lt; size;<br>        }<br>        public E next() {<strong>//获取下一个元素</strong><br>            checkForComodification();<strong>//检查当前操作是否一样，一面线程不安全</strong><br>            if (!hasNext())<br>                throw new NoSuchElementException();<br>            lastReturned = next;<br>            next = next.next;<br>            nextIndex++;<br>            return lastReturned.item;<br>        }<br>        public boolean hasPrevious() {<br>            return nextIndex &gt; 0;<br>        }<br>        public E previous() {<strong>//获取前一个元素</strong><br>            checkForComodification();<br>            if (!hasPrevious())<br>                throw new NoSuchElementException();<br>            lastReturned = next = (next == null) ? last : next.prev;<br>            nextIndex–;<br>            return lastReturned.item;<br>        }<br>        public int nextIndex() {<br>            return nextIndex;<br>        }<br>        public int previousIndex() {<br>            return nextIndex - 1;<br>        }<br>        public void remove() {//移除<br>            checkForComodification();<br>            if (lastReturned == null)<br>                throw new IllegalStateException();<br>            Node<E> lastNext = lastReturned.next;<br>            unlink(lastReturned);<br>            if (next == lastReturned)<br>                next = lastNext;<br>            else<br>                nextIndex–;<br>            lastReturned = null;<br>            expectedModCount++;<br>        }<br>        public void set(E e) {<br>            if (lastReturned == null)<br>                throw new IllegalStateException();<br>            checkForComodification();<br>            lastReturned.item = e;<br>        }<br>        public void add(E e) {<br>            checkForComodification();<br>            lastReturned = null;<br>            if (next == null)<br>                linkLast(e);<br>            else<br>                linkBefore(e, next);<br>            nextIndex++;<br>            expectedModCount++;<br>        }<br>        public void forEachRemaining(Consumer&lt;? super E&gt; action) {<br>            Objects.requireNonNull(action);<br>            while (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) {<br>                action.accept(next.item);<br>                lastReturned = next;<br>                next = next.next;<br>                nextIndex++;<br>            }<br>            checkForComodification();<br>        }<br>        final void checkForComodification() {<br>            if (modCount != expectedModCount)<br>                throw new ConcurrentModificationException();<br>        }<br>    }<br>    —————————————————————————————————————————<br>    <strong>节点包装类</strong><br>    private static class Node<E> {<br>        E item;<br>        Node<E> next;//后继<br>        Node<E> prev;//前驱<br>        Node(Node<E> prev, E element, Node<E> next) {<br>            this.item = element;<br>            this.next = next;<br>            this.prev = prev;<br>        }<br>    }<br>    —————————————————————————————————————————<br>    还有一些方法我就没有列举了，基本和ArrayList差不多，还有就是调用父类的方法，然后实现了克隆，序列化等等，不是主要的我就不仔细介绍了。<br>    —————————————————————————————————————————</p></blockquote><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>和ArrayList比较起来，LinkList更适用于插入删除，它作为双向链表来实现的。<br>所以插入和删除操作明显效率要高于ArrayList，索引查找的话虽然不如ArrayList，但是也提供了索引减半的优化了，缩小了一般的搜寻量。和ArrayList一样，他也是线程不安全的，容易被多个线程修改访问，尽量要避免这种情况，采用同步或者锁的方法。<br>好了这篇文章就写到这里了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spark关于在IDEA中使用maven创建scala项目时不能使用makeRDD和parallerize的原因</title>
      <link href="/2020/04/21/Spark%E5%85%B3%E4%BA%8E%E5%9C%A8IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8maven%E5%88%9B%E5%BB%BAscala%E9%A1%B9%E7%9B%AE%E6%97%B6%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8makeRDD%E5%92%8Cparallerize%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2020/04/21/Spark%E5%85%B3%E4%BA%8E%E5%9C%A8IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8maven%E5%88%9B%E5%BB%BAscala%E9%A1%B9%E7%9B%AE%E6%97%B6%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8makeRDD%E5%92%8Cparallerize%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<p>Spark关于在IDEA中使用maven创建scala项目时不能使用makeRDD和parallerize的原因</p><p>前几天，一直在学习Spark的计算引擎，但是刚开始学习，很多地方都摸不清方向，网上又找不着相关的解决办法。从今天开始就记录自己学习过程中所有不知名的错误。## 新的改变</p><p>由于最近不知道是我重新装了个Linux系统的原因，还是我电脑不稳定，还是我不经意间删除了什么东西，在我使用scala创建RDD的时候IDEA总是会报错，不管是makeRDD或者是parallerize都一样，出现数组越界，这里图片忘记截图了。<br>但是我折腾了很久，终于解决了。<br>解决办法如下：<br>在马maven的pom.xml配置文件中添加依赖：</p><blockquote><dependency>      <groupId>com.thoughtworks.paranamer</groupId>      <artifactId>paranamer</artifactId>      <version>2.8</version>    </dependency>其实没有别的，就是paranamer的版本太低，需要添加到自己仓库而已。</blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2020/04/21/%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/04/21/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 链表<br>date: 2019-10-29 17:46:41<br>author: ongbo<br>categories: 数据结构与算法<br>cover: false<br>tags:</p><ul><li>java</li><li>数据结构</li><li>集合</li></ul><hr><p>   之前秋招参加了几家公司的面试，大多问到了基础，数据结构基本都问到了，想了想还是好好复习一下数据结构，现在就从链表开始吧。<br>   链表毋庸置疑，和顺序表是两大基础了，之前在知乎也写过顺序表的博客，以后搬过来。<br>   先看看顺序表结构，顺序表无非就是像数组一样，可以通过下标去访问元素，但是可以设计成比数组更灵活的东西，你可以设计成不断往里面添加元素。还有一些基本操作了，增删改查，但是有些人发现，顺序表去增删改查真的超级费劲，要在插入点之后的每个元素后移，删除元素时每个元素又要前移，当涉及到百万级的顺序表，肯定是处理时间很长的，这样就要采取另一种数据结构了，链表。<br>   链表和数组不一样，不需要连续的地址空间，但是不需要连续的地址空间又怎么让元素之间联系起来呢，在c和c++里面可以给每个元素弄一个指针，这个指针指向的类型就是一个节点，从而这个指针就将一个个元素串起来了，这里用串不合适，因为并不是连续的，而是随机的地址空间联系起来，这样说起来应该更准确。而在java里面就是引用联系元素了，引用可以想象成A和B是同一个东西，共享同一块地址。java里面没有了许多繁杂的概念，指针操作是真的麻烦。这里我就不用c或者c++演示了，直接用java代码。<br>   一些基本操作我就不多说，增删改查，还有面试的时候（当然我没有被问到，别人被问到过），判断是否成环，或者查倒数第几个元素（再没有尾节点的情况下）等等一些相关的链表操作，我都来一一列举.<br>   <strong>链表就是除了包含了数据之外还有一个后继，指向下一个节点。</strong><br>   需要注意的是，<strong>链表有很多种，单向链表，双向链表，循环链表</strong>等等。<br>   以下我就以单链表为例了。<br>   首先就是<strong>增删改查</strong><br>   增加我写了两个，一个是添加L型的数据，还有就是添加节点<br>   其他的我相信看代码就可以理解了。</p><pre class=" language-public"><code class="language-public">        node<L> newnode=new node<>();        newnode.data=e;        tail.next=newnode;        tail=newnode;        size++;    }    public void addElem(node<L> e) {        tail.next=e;        tail=e;        size++;    }    public void del_index(int index) {        node<L> link=head;        for (int i=0;i<index-1;i++) {            link=link.next;        }        link.next=link.next.next;    }    public void change(int index,L e) {        node<L> datae=find(index);        datae.data=e;    }    public  node find(int index) {        node<L> link=head;        int i=0;        while(link.next!=null) {            link=link.next;            if(index==i) {return link;}            i++;        }        return null;    }    public void display() {        node<L> link=head.next;        while(link!=null) {System.out.println(link.data); link=link.next;}    }    public void insert(list<L> list_inversion,L e,int index) {        node<L> nodea=head;        int i=0;        while(i<index-1) {            nodea=nodea.next;            i++;        }        node<L> newnode=new node();        newnode.data=e;        newnode.next=nodea.next;        nodea.next=newnode;    }</code></pre><p>上面还有一个输出链表的操作，这也是基本操作，我也不多说。</p><p><strong>链表的倒置</strong>，这里链表的倒置有两种了<br>简单的就是双向链表的倒置，这个很简单的呗，就是从末节点往前驱找啦。<br>单链表的话就可能有点麻烦了。就是从第二个节点开始，一个个往头结点后面移动，就像这样：<br>    原链表：head-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7<br>    第一次移动：head-&gt;2-&gt;1-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7<br>    第二次移动：head-&gt;3-&gt;2-&gt;1-&gt;4-&gt;5-&gt;6-&gt;7<br>    ……..<br>    最终倒置：head-&gt;7-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1<br>    就是这样一步步实现，相信大家都可以的。</p><pre><code>    public void inversion() {         node&lt;L&gt; nodeA,nodeB;         nodeA=head.next;         nodeB=nodeA.next;         while(nodeB.next!=null) {             nodeA.next=nodeB.next;             nodeB.next=head.next;             head.next=nodeB;             nodeB=nodeA.next;         }         nodeB.next=head.next;         head.next=nodeB;         nodeA.next=null;    }</code></pre><p><strong>交换节点：</strong><br>这个是我晕晕呵呵的时候写的，可能想法有点傻哈哈哈，就是找到交换节点的前驱然后交换了。</p><pre><code>public void swap(list&lt;L&gt; link,node a,node b) {        //找到前驱        node&lt;L&gt; apre=null,bpre=null;        node&lt;L&gt; flag=link.head;        while(flag!=null&amp;&amp;(apre==null||bpre==null)) {            if(flag.next==a) {apre=flag;}            if(flag.next==b) {bpre=flag;}            flag=flag.next;        }        //a 和 b的前驱分别为apre和 bpre        if(a.next==b) {            a.next=b.next;            b.next=a;            apre.next=b;        }else if(b.next==a) {            b.next=a.next;            a.next=b;            bpre.next=a;        }else {            node c=b.next;            b.next=a.next;            a.next=c;            bpre.next=a;            apre.next=b;        }                                             }</code></pre><p><strong>查找倒数第几个</strong>：这个前提是不知道链表长度的情况下。如果是双链表就没有出这个题目的意义了。<br>首先我们来看看，倒数第n个与最后一个节点的联系，是不是和它相差一定的距离，倒数第3个，和最后一个节点相差两个，倒数第7个，和最后一个节点相差6个，这样就可想而知了，倒数第n个节点，和最后一个节点相差n-1个节点。我们只要从head开始找出相差同样距离的节点，然后以同样的速度往尾节点移动，当后面的节点到达尾节点了，前面那个节点就是我们要找的。<br>代码如下：</p><pre><code>    public void check(list&lt;L&gt; li,int last_index) {        //设置两个指针差        if(li.head==li.tail) {System.out.println(&quot;没有元素&quot;); return;}        node&lt;L&gt; first=li.head.next;        node&lt;L&gt; seconde=first;//此时first是倒数第1个        for (int i=1;i&lt;last_index;i++) {            if(seconde.next!=null) {                seconde=seconde.next;            }else {                System.out.println(&quot;不存在&quot;+last_index+&quot;倒数！&quot;);                return;            }        }        while(seconde!=li.tail) {            first=first.next;            seconde=seconde.next;        }        System.out.println(first.data);    }</code></pre><p><strong>判断是否成环</strong>：</p><p>这个我们可以想一下初中的相遇问题，在一个操场上，当一个人跑另一个人追，当跑的那个人很快的时候，是不是可以再次追上他，就形成了一个环了。<br>同样的道理，在链表里面，我们只要用两个移动节点，一个速度快于另一个，这样如果是一个有环的链表的话，快的节点总会追上它，并且到达同一个节点的，这样的话，就可以判断是否成环了。</p><pre><code>    public boolean judge_circle(list&lt;L&gt; li) {        //指针是否追上另一个        node&lt;L&gt; first=li.head;        node&lt;L&gt; second=li.head;        while(true) {            if(second.next!=null) {                if(second.next==first) return true;            }else return false;            if(second.next.next!=null) {                if(second.next.next==first) return true;                second=second.next.next;            }else return false;            first=first.next;        }    }</code></pre><p>当然还有一些其他操作，面试的时候大家都有可能会碰到，当然数据结构知识一部分，还有很多的其他方面的，以防万一，还是理解理解复习复习比较好。<br>另外我还写了一个双向链表。增加了前驱和后继。<br>node类：</p><pre><code>package bothway_linklist;public class node {    node pre;    int data;    node next;}</code></pre><p>linklist类：</p><pre><code>package bothway_linklist;//双向链表public class linklist {    node head;    node tail;    public linklist() {        head=new node();        tail=head;    }    public void add(int e) {//尾插        node newnode=new node();        newnode.data=e;        tail.next=newnode;        newnode.pre=tail;        tail=newnode;    }    public void display_x() {        node link=head;        while(link.next!=null) {            link=link.next;            System.out.println(link.data);        }    }    public void display_t() {        node link=tail;        while(link!=head) {            System.out.println(link.data);            link=link.pre;        }    }    /*     *      *          *      */    //双向链表增删改查随机插入    //实现链表合并    public static void main(String[] args) {        linklist list=new linklist();        list.add(1);        list.add(2);        list.add(3);        list.add(34);        list.add(53);        list.add(32);        list.add(65);        list.add(3432);        list.display_x();        System.out.println();        list.display_t();    }}</code></pre><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.824 lab1 mapreduce</title>
      <link href="/2020/04/21/MIT%206.824%20lab1%20mapreduce/"/>
      <url>/2020/04/21/MIT%206.824%20lab1%20mapreduce/</url>
      
        <content type="html"><![CDATA[<p>   经过一段时间的了解这个MIT 6.824，真的深深感觉，见识越多，就越知道自己有多菜。我登入6.824网站，可以看到别人一周的安排是怎样的，一周之内学会go语言，并完成lab 1，其中lab 1 又有五个部分。而我呢，我大概花了一周才了解了go语言，又看了一周才了解mapreduce，然后才开始做lab1，不得不说里面的introduction，Read，lab全是英文，真的超烦人，有时候写程序写着也会忘记go怎么用的，甚至和java，c++混淆了，说真的，这一个月真的搞这个东西搞到自闭，搞到脑袋都要炸了。<br>   不过呢还是得承认这个过程还是挺不错的，知道了自己和别人的差距，做出来的过程中成就感还是有的哈哈哈。挺喜欢这种感觉。<br>   如果想要学习的话可以去<a href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="noopener">MIT 6.824</a>学习。</p><h2 id="一：MapReduce简介"><a href="#一：MapReduce简介" class="headerlink" title="一：MapReduce简介"></a><strong><em>一：MapReduce简介</em></strong></h2><p>首先就是理一理mapreduce了，其实是map and reduce，这是一个编程模型，一般笼统的分为map函数和reduce函数。<br><strong>原理：通过输入key–value有map函数生成中间的key–value，并作为reduce的输入由reduce生成最终的value。</strong><br>   <img src="https://img-blog.csdnimg.cn/20181123204426599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看看上面这个图片梳理一下大概的过程了。<br><strong>1：首先就是用户是吧，根据具体的场景，选取具体的mapreduce编程模型。<br>2：mapreduce库里面的某些程序将输入文件分成M个数据片，如上图左边的split0，1，2，3……有的用户程序会在集群中创建大量副本，备用。<br>3：有个特殊的程序master程序，还有就是worker程序。master程序分配M个map任务和R个reduce任务，将他们分给空闲的worker程序<br>4：分配的map任务的worker程序读取相应的输入数据,解析出key-value，然后传递给map函数，map函数生成相应的中间文件key-value，这时一个key对应的是集合value，这些文件会缓存在该worker程序的内存中，尽量减少网络传输，和某些程序故障时，数据丢失。<br>5：缓存的中间文件key-value被分成R个区域，然后写入到本地磁盘上，他们的存储位置会被传回master，master将存储位置传给reduce。<br>6：当reduce接收到这些位置时，使用RPC从map worker所在的位置上读取这些中间文件作为输入文件，同时reduce需要对key进行排序。<br>7：reduce的worker程序遍历这些输入文件，传给reduce函数，并输出所需要的文件。<br>8：所有map，reduce任务完成，master唤醒用户程序，这个时候对Mapreduce的调用才会返回。<br>这时候虽然完成了，一般还有R个输出文件吧，它们其实也可以作为其他的分布式输入文件，在进行mapreduce的。</strong></p><p>其实吧，在map过程中，都还有一定的优化过程：<br><strong>~会有一个排序的过程<br>~会将同样的key配到一起，一般情况下是&lt;a,”1”&gt;,&lt;b,”1”&gt;,&lt;c,”1”&gt;,&lt;a,”1”&gt;,但            是这个过程会把a键值整合到一起，&lt;a,{“1”.”1”}&gt;<br>~还有个过程就是常说的combine过程，实质就是一个本地reduce，将整合的KeyValue值reduce，比如上面的变成了&lt;a,”2”&gt;，这都是可以优化的。</strong><br>上面的我都只是以wordcount为例。<br>但是这真的知识个大概过程，具体的需求要设计对应的程序，刚刚也说了，mapreduce只是个编程模型而已，并没有明确怎么做。另外还有一些容错机制，mapreduce技巧，性能等各方面的原因都要考虑，其中很多东西非常复杂。<br>在看lab1的代码时，我们还是先看看rpc吧。<br><img src="https://img-blog.csdnimg.cn/20181125115014267.png" alt="在这里插入图片描述"></p><p>这是我写的一个简单的rpc目录结构。<br>ser_file：服务注册文件</p><pre><code>在这里插入代码片package mathimport &quot;errors&quot;type Args struct{    A,B float32}type Result struct {    Value float32}type CountService struct{    fe float32}func (s *CountService) add(args *Args,result Result) error{    result.Value=args.A+args.B    return nil}func (s *CountService) Divide(args *Args, result *Result) error {    if args.B == 0 {        return errors.New(&quot;除数不能为零！&quot;)    }    result.Value = args.A / args.B    return nil}</code></pre><p>service：服务端文件</p><pre><code>package serveimport (    &quot;fmt&quot;    &quot;net&quot;    &quot;net/rpc&quot;    &quot;../math&quot;)func main(){        var ms=new (math.CountService)//实例化服务对象        rpc.Register(ms)//注册服务        fmt.Print(&quot;服务启动了&quot;)        var address,_=net.ResolveTCPAddr(&quot;tcp&quot;,&quot;127.0.0.1:8000&quot;)        listener,err:=net.ListenTCP(&quot;tcp&quot;,address)        if err!=nil{            fmt.Print(&quot;start error!&quot;)        }        for{            conn,err:=listener.Accept()            if err!=nil{                continue            }            fmt.Print(&quot;accept a &quot;)            rpc.ServeConn(conn)//让这个rpc绑定这个tcp链接上        }}</code></pre><p>客户端调用文件：</p><blockquote><p>package clients</p></blockquote><p>import (<br>    “fmt”<br>    “net/rpc”<br>)</p><p>func main(){</p><pre><code>var clien,err=rpc.Dial(&quot;tcp&quot;,127,0,0,1:8000)//链接服务器if err!=nil{    fmt.Print(&quot;连接失败&quot;)}var args=Args{40,3}var result=Result{}fmt.Print(&quot;sstart&quot;)err=clien.Call(&quot;CountService.Add&quot;,args,&amp;result)if err!=nil{    fmt.Print(&quot;error&quot;,err)}fmt.Print(&quot;error&quot;)</code></pre><p>}</p><p>这里需要注意：<strong><strong>定义的服务文件里面，方法一定要严格按照<br><em>func (t *T) MethodName(argType T1, replyType *T2) error</em><br>的样式写，t一般没有多大用处，argType是传进来的参数，replyType是传进来的参数地址，学c的话也知道，它可以寻找该地址并修改里面的值，从而达到一种传回给原函数的效果，就像一个返回值一样。</strong></strong><br>我这里是在自己机器上调用，所以地址端口都是自己的，大家可以用不同的机器去用，只要客户端和服务端对应的端口相对应就行。但是我一直没搞清楚，有时候需要关闭防火墙。<br>这就是一个简单的远程rpc调用了。<br>现在正是来看lab1。</p><p>我们先来看<br><strong><em>master</em></strong></p><pre><code>package mapreduce//// Please do not modify this file.//import (    &quot;fmt&quot;    &quot;net&quot;    &quot;sync&quot;)//这个结构体主要是记录master需要的实时信息type Master struct {    sync.Mutex//    address     string//master地址    doneChannel chan bool//信道，用来通信    // 被mutex保护着    newCond *sync.Cond // 注册worker的信号    workers []string   // 每个worker的地址    jobName string   // 作业名称1    files   []string // 输入文件名称切片    nReduce int      // reduce任务数量    shutdown chan struct{}//关闭服务的信道结构体    l        net.Listener//监听    stats    []int}//这个Register是供给woerker注册的，此时只是将worker的地址传过来，加入到workers的切片中，一定要和启动rpc的Register区别func (mr *Master) Register(args *RegisterArgs, _ *struct{}) error {//提供给worker注册链接    mr.Lock()    defer mr.Unlock()    debug(&quot;Register: worker %s\n&quot;, args.Worker)    mr.workers = append(mr.workers, args.Worker)    // tell forwardRegistrations() that there&#39;s a new workers[] entry.    mr.newCond.Broadcast()    return nil}// 这个newMaster无非就是实例化一个master，并初始化它的信息func newMaster(master string) (mr *Master) {    mr = new(Master)    mr.address = master    mr.shutdown = make(chan struct{})    mr.newCond = sync.NewCond(mr)    mr.doneChannel = make(chan bool)    return}//顺序执行任务，不用分发任务，这个是顺序执行的，与分布式想区别func Sequential(jobName string, files []string, nreduce int,    mapF func(string, string) []KeyValue,    reduceF func(string, []string) string,) (mr *Master) {    mr = newMaster(&quot;master&quot;)    go mr.run(jobName, files, nreduce, func(phase jobPhase) {        switch phase {        case mapPhase:            for i, f := range mr.files {                doMap(mr.jobName, i, f, mr.nReduce, mapF)            }        case reducePhase:            for i := 0; i &lt; mr.nReduce; i++ {                doReduce(mr.jobName, i, mergeName(mr.jobName, i), len(mr.files), reduceF)            }        }    }, func() {        mr.stats = []int{len(files) + nreduce}    })    return}//这个forwardRegistrations方法就是当从分布式里面传过来的，主要是把新的worker实时告诉schedule（分发tasks），以便schedule实时的分发任务func (mr *Master) forwardRegistrations(ch chan string) {//刷新worker，传给分发任务的schedule.go    i := 0    for {        mr.Lock()        if len(mr.workers) &gt; i {            // there&#39;s a worker that we haven&#39;t told schedule() about.            w := mr.workers[i]            go func() { ch &lt;- w }() // send without holding the lock.            i = i + 1        } else {            // wait for Register() to add an entry to workers[]            // in response to an RPC from a new worker.            mr.newCond.Wait()        }        mr.Unlock()    }}**//分布式任务，这个就与之前的Sequential方法相区别了，分布式的分发执行tasks**func Distributed(jobName string, files []string, nreduce int, master string) (mr *Master) {    mr = newMaster(master)//为一个master初始化    mr.startRPCServer()//启动master一个RPC服务器，等待worker    go mr.run(jobName, files, nreduce,        func(phase jobPhase) {            ch := make(chan string)//提供给forwardRegistrations一个通信ch，同时也给了schedule.go，互相通知当前所有worker            go mr.forwardRegistrations(ch)//为master增加一个worker，并通知给schedule            schedule(mr.jobName, mr.files, mr.nReduce, phase, ch)//执行分发任务        },        func() {            mr.stats = mr.killWorkers()            mr.stopRPCServer()        })    return}func (mr *Master) run(jobName string, files []string, nreduce int,    schedule func(phase jobPhase),    finish func(),) {    mr.jobName = jobName    mr.files = files    mr.nReduce = nreduce    fmt.Printf(&quot;%s: Starting Map/Reduce task %s\n&quot;, mr.address, mr.jobName)    schedule(mapPhase)//这两个schedule不是直接的schedule.go里面的schedule，而是自己传进来的函数参数，真正的用法在func Distributed    schedule(reducePhase)    finish()    mr.merge()//综合reduce输出    fmt.Printf(&quot;%s: Map/Reduce task completed\n&quot;, mr.address)    mr.doneChannel &lt;- true}// Wait blocks until the currently scheduled work has completed.// This happens when all tasks have scheduled and completed, the final output// have been computed, and all workers have been shut down.func (mr *Master) Wait() {    &lt;-mr.doneChannel}//当所有的分发任务完成后，执行这个方法func (mr *Master) killWorkers() []int {    mr.Lock()    defer mr.Unlock()    ntasks := make([]int, 0, len(mr.workers))    for _, w := range mr.workers {        debug(&quot;Master: shutdown worker %s\n&quot;, w)        var reply ShutdownReply        ok := call(w, &quot;Worker.Shutdown&quot;, new(struct{}), &amp;reply)        if ok == false {            fmt.Printf(&quot;Master: RPC %s shutdown error\n&quot;, w)        } else {            ntasks = append(ntasks, reply.Ntasks)        }    }    return ntasks}</code></pre><blockquote><p>这个就是master，是主要的mapreduce开始的地方，我也是根据mapreduce原理从这里读起来的。其中包括的common_rpc.go我就不列举了，到时候我传到github上面看详细的，或者大家自己去下源码也可以。<br>下面来看看schedule怎么工作的，这也是part3我们需要完成的</p></blockquote><p><strong><em>schedule</em></strong></p><pre><code>package mapreduceimport (    &quot;fmt&quot;    &quot;sync&quot;)func schedule(jobName string, mapFiles []string, nReduce int, phase jobPhase, registerChan chan string) {//我写这里的时候已经把这个需要的参数传进来了//jobName：是当前工作的名字//mapFiles：传入文件的切片//nReduce：reduce的数量//phase：工作类型，判断是map任务还是reduce任务//registerChan：信道，与master分布式的forward啥的实时通信有多少worker    var ntasks int//任务数量    var n_other int //如果phase是map，那就记录reduce数量，反过来一样     switch phase {//如下实现    case mapPhase:        ntasks = len(mapFiles)        n_other = nReduce    case reducePhase:        ntasks = nReduce        n_other = len(mapFiles)    }fmt.Printf(&quot;Schedule: %v %v tasks (%d I/Os)\n&quot;, ntasks, phase, n_other)taskArgsList :=make([]DoTaskArgs, ntasks)//先创建一个任务切片，这个DoTaskArgs是common_rpc.go里面的，包含了任务各种信息的结构体for i:=0;i&lt;ntasks;i++ {    taskArgsList[i].JobName=jobName    taskArgsList[i].Phase=phase    taskArgsList[i].TaskNumber=i    taskArgsList[i].NumOtherPhase = n_other    taskArgsList[i].File=mapFiles[i]}//上面这个循环将所有的任务分别记录进去了切片fmt.Printf(&quot;Schedule: taskArgsList prepared.\n&quot;)var wg sync.WaitGroup//保证在主携程结束前，完成所有工作for taskIndex :=0;taskIndex &lt; ntasks; taskIndex++{    wg.Add(1)    var idleWorker string    go func(index int){        defer wg.Done()        for{            idleWorker = &lt;-registerChan//接收worker            ok:=call(idleWorker,&quot;Worker.DoTask&quot;,&amp;taskArgsList[index],new(struct{}))//这里是呼叫Worker.DoTask相应的服务            if ok ==false{                fmt.Printf(&quot;Master: RPC %s DoTask error\n&quot;,idleWorker)                continue            }else{                go func(){                    registerChan &lt;- idleWorker                }()                break            }        }    }(taskIndex)}wg.Wait()fmt.Printf(&quot;Schedule: %v phase done\n&quot;,phase)fmt.Printf(&quot;Schedule: %v done\n&quot;, phase)}</code></pre><p>以上就是master到schudule分发任务过程。</p><p><strong><em>common_map.go</em></strong></p><pre><code>package mapreduceimport (        &quot;encoding/json&quot;    &quot;io/ioutil&quot;    &quot;log&quot;    &quot;os&quot;    &quot;hash/fnv&quot;)func doMap(    jobName string, // the name of the MapReduce job    mapTask int, // which map task this is    inFile string,    nReduce int, // the number of reduce task that will be run (&quot;R&quot; in the paper)    mapF func(filename string, contents string) []KeyValue,) {    dat,errinput:=ioutil.ReadFile(inFile)//返回的dat是一字节数组[]byte    if errinput !=nil{//读取不成功,errinput如果返回nil则是读取成功        log.Fatal(errinput)    }    outFiles:=make([]*os.File,nReduce)//创建输出中间文件切片，最大容量为nReduce    encoders:=make([]*json.Encoder,nReduce)    for i:=range outFiles{        var erroutput error        filename:=reduceName(jobName,mapTask,i)//设置中间输出文件的filename=jobname+mapTaskNumber+nReduce_number        outFiles[i],erroutput = os.Create(filename)//创建文件        if erroutput!=nil{//如果创建成功返回nil，否则返回错误            log.Fatal(erroutput)        }        encoders[i]=json.NewEncoder(outFiles[i])//转换数据格式    }    mapRes:=mapF(inFile,string(dat))//在test_test.go中的函数，返回的是dat文件分割单词后的键值对    for _,kv:=range mapRes{//遍历keyvalue键值对，由kv接收        index:=int(ihash(kv.Key))%nReduce        encoders[index].Encode(&amp;kv)    }    for _,file:=range outFiles{        file.Close()    }}func ihash(s string) int {    h := fnv.New32a()    h.Write([]byte(s))    return int(h.Sum32() &amp; 0x7fffffff)}</code></pre><p><strong><em>common_reduce.go</em></strong></p><pre><code>package mapreduceimport (    &quot;encoding/json&quot;    &quot;fmt&quot;    &quot;log&quot;    &quot;os&quot;    &quot;sort&quot;)func doReduce(    jobName string, // the name of the whole MapReduce job    reduceTask int, // which reduce task this is    outFile string, // write the output here    nMap int, // the number of map tasks that were run (&quot;M&quot; in the paper)    reduceF func(key string, values []string) string,) {    KeyValues:=make(map[string][]string)    i:=0    for i&lt;nMap{        filename:=reduceName(jobName,i,reduceTask)//弄一个未见名        file,err:=os.Open(filename)//打开文件        if err!=nil{            log.Fatal(err)        }        enc:=json.NewDecoder(file)//开始解码file        for{            var kv KeyValue            err:=enc.Decode(&amp;kv)            if err!=nil{                break            }            _,ok:=KeyValues[kv.Key]//ok返回是否索引成功，也就是查看KeyValues里面是否有file文件里面是否有kv.Key这个Key            if !ok{                KeyValues[kv.Key]=make([]string,0)//没有索引成功，说明没有这个键，就创建一个，就创建这个key            }            KeyValues[kv.Key]=append(KeyValues[kv.Key],kv.Value)        }        i++    }    var keys []string    for k:=range KeyValues{        keys=append(keys,k)    }    sort.Strings(keys)    file,err:=os.Create(mergeName(jobName,reduceTask))    if err!=nil{        fmt.Printf(&quot;reduce merge file:%s can&#39;t open\n&quot;,mergeName(jobName,reduceTask))        return    }    enc:=json.NewEncoder(file)    for _,k:=range keys{        enc.Encode(KeyValue{k,reduceF(k,KeyValues[k])})    }    file.Close()}</code></pre><p>以上就是我在MIT lab1中实现的主要部分，通过这个过程，总算了解了mapreduce基本原理，当然因为初学go的关系，很多东西不了解，所以需要自己独立写一个mapreduce的框架还是有难度的。<br>但是，这么久了，才弄出来一个这样的东西，真是很菜。。。<br>不过这个过程我真的觉得对大数据，分布式有很兴趣</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CurrentHashMap源码分析</title>
      <link href="/2020/04/19/CurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/19/CurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//最大容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最大数组大小</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认并发量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CONCURRENCY_LEVEL <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//负载因子</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转变树的阙值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转变链表的阙值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当容量小于64的时候，即便某个链表长度大雨了treeify_threshold，也不会转成树，而是进行扩容，如果当容量大于了64，那么当某个链表长度大于了这个treeify_threshold就会转换成树结构</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//和Hashmap一样，作为一个Node的数组</span>    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**    * 下一个新的table，即扩容的时候不能为空     * 简单来说，就是扩容的新数组。为原来数组两倍大小  */</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 用来控制初始化和扩容操作* 有几种值：* 0表示默认值* -1:表示正在初始化* -N(N>1)：表示有N个线程正在扩容* >1：*     如果table没有初始化，那么就需要进行初始化的大小*     如果已经初始化了，就是table容量*/</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span></code></pre><p><strong>Node数据结构数据结构</strong><br><img src="https://img-blog.csdnimg.cn/20200402164513573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>ForwardNode数据结构：在扩容的时候使用，它的node的hash值都为-1，nextTable存储着上面nextTable的引用</strong><br><img src="https://img-blog.csdnimg.cn/20200402164544589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="几个下面要经常用的方法"><a href="#几个下面要经常用的方法" class="headerlink" title="几个下面要经常用的方法"></a>几个下面要经常用的方法</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*扰动函数：*将h的低16位和高16位做^操作，从而增加了随机性，碰撞旅能够减少10%*/</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> HASH_BITS<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//找到容量c的最小2次幂</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h5 id="重要的三个原子操作"><a href="#重要的三个原子操作" class="headerlink" title="重要的三个原子操作"></a>重要的三个原子操作</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Unsafe的getObjectVolatile方法用来获取指定位置的变量引用</span><span class="token comment" spellcheck="true">//这里是获取table数组的第i个元素，其计算需要用i*单位元素大小+基础偏移量，从而获得了指定位置元素的其实内存地址</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">tabAt</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>U<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> ASHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> ABASE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里是利用比较和交换的方法，获取指定位置的元素，和自己的预期值c进行比较，如果相同则赋值v，如果不同那么就CAS失败，返回false。其底层还是Unsafe的compareAndSwapObject方法在起作用</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>                                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> c<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> U<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> ASHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> ABASE<span class="token punctuation">,</span> c<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将tab的第i个元素设置为v，其底层也是调用了Unsafe的putObjectVolatile方法，其中i*单位元素大小+基础偏移量来获取指定位置的内存</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">setTabAt</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        U<span class="token punctuation">.</span><span class="token function">putObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> ASHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> ABASE<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="扩容相关：helpTransfer方法"><a href="#扩容相关：helpTransfer方法" class="headerlink" title="扩容相关：helpTransfer方法"></a>扩容相关：helpTransfer方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">ForwardingNode</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>nextTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>nextTable<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> nextTable <span class="token operator">&amp;&amp;</span> table <span class="token operator">==</span> tab <span class="token operator">&amp;&amp;</span>                   <span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">>>></span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span> <span class="token operator">!=</span> rs <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span>                    sc <span class="token operator">==</span> rs <span class="token operator">+</span> MAX_RESIZERS <span class="token operator">||</span> transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> nextTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> table<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="扩容相关：addCount方法"><a href="#扩容相关：addCount方法" class="headerlink" title="扩容相关：addCount方法"></a>扩容相关：addCount方法</h4><h1 id="添加元素putVal方法"><a href="#添加元素putVal方法" class="headerlink" title="添加元素putVal方法"></a>添加元素putVal方法</h1><p><strong>不管CurentHashMap怎么添加元素，都是最后调用的putVal方法的</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//key和value不能为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null <span class="token operator">||</span> value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用扰动函数先找到这个key的hash值</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用来计数当前这个位置有多少个元素，一边后续进行扩容或者链表转红黑树或者红黑树转链表</span>    <span class="token comment" spellcheck="true">//接下来就是死循环自旋了，处理并发操作，一直到操作成功的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用来遍历某个hash位置下的所有元素 </span>            <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fh保存f对应的hash值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//这里说明将CurrentHashMap的Node数组的创建延迟到了put方法中，调用上面的initTable进行初始化咯</span>                tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token comment" spellcheck="true">//否则这时候就是已经初始化过咯</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如过在hash位置为空，说明这里的元素应该为空的，</span>                    <span class="token comment" spellcheck="true">//也就是数组那个位置还没有赋值，这时候赋值就行了</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 这里利用CAS，如果和预期值相同说明可以进行交换设置预期值，并且可以跳出循环了</span>                    <span class="token comment" spellcheck="true">//否则就只能继续死循环，继续进行上面的过程，一直到放入元素成功的</span>                <span class="token punctuation">}</span>            <span class="token keyword">else</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//如果hash值为-1，说明当前这个节点正在参与扩容，应该调用helpTransfer去帮助他</span>                    tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//没有扩容也没有初始化，那么进入正常的模式</span>                V oldVal <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//利用synchronized锁住f对象，即这个正在加入的数组位置的第一个元素</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//如果tab的第i偏移量元素</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//如果fh也就是f的hash值>0，说明是链表结构</span>                            binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                K ek<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//如果是同一key那么就替代掉，然后退出循环</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                     <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                        e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">//不是同一key就继续往后遍历，直到尾节点为止，可见是尾插法</span>                                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                              value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//如果是红黑树结构，那么就采用红黑树的替入方式</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>                            binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                           value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//看binCount即这个位置下元素的个数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//大于treeify_threshold就需要扩容或者转红黑树</span>                    <span class="token comment" spellcheck="true">//这个treeifyBin方法要看，当当下位置的元素达到了treeify_threshold的值了，还要判断是否总容量达到了MIN_TREEIFY_CAPACITY=64（默认64），如果达到了就转红黑树，没达到就扩容即可。</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//添加binCount，里面还可以进行扩容的。</span>        <span class="token function">addCount</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/202004021819051.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><h1 id="Get操作😊"><a href="#Get操作😊" class="headerlink" title="Get操作😊"></a>Get操作😊</h1><hr><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>         Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span>         <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span>         K ek<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先取key的hash值</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//如果table不空，而且table的长度大于0，而且h经过hash之后的数组位置不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果当前位置的hash值和这个key的值确实相等</span>            <span class="token comment" spellcheck="true">//说明没有扩容操作，那么就可以直接读取</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//如果数组的当前位置的第一个元素是的，那么就直接返回吧。</span>                    <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//这时候如果hash值小于0了，说明这个点是ForwardNode，正在处于扩容的阶段，它的hash值是-1，通过nextTable指向了新扩容的数组</span>                <span class="token comment" spellcheck="true">//这时候就需要通过ForwardNode节点的find方法，取新扩容的数组去找</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这时候经过上面的过程了，说明这个元素不在第一个节点，那么就需要进行遍历</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="去看看find方法"><a href="#去看看find方法" class="headerlink" title="去看看find方法"></a>去看看find方法</h5><pre class=" language-java"><code class="language-java">Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> Object k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// loop to avoid arbitrarily deep recursion on forwarding nodes</span>            outer<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> nextTable<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果table为空或者k为空或者在k的位置为空直接返回null</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null <span class="token operator">||</span> tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                           <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> eh<span class="token punctuation">;</span> K ek<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//和之前的调用一样，如果确实第一个元素的hash值是这个，且对应其他条件相同的化，就直接返回这个元素</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> e<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果hash还是小于0，说明这个位置处于扩容状态</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ForwardingNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//如果这个点确实是ForwardingNode实例，那么就需要指向nextTable节点去找</span>                            tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>nextTable<span class="token punctuation">;</span>                            <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//否则的化就是Node实例咯，这样说明这个节点是已经扩容之后的了。</span>                        <span class="token keyword">else</span>                            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h1 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h1><p><strong>前面到处都有一些莫名其妙的方法，比如get中的find方法，以及扩容怎么高的，都怪怪的，现在就来了解一些。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程安全 </tag>
            
            <tag> HashMap </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Java撸一下LFU简易版本</title>
      <link href="/2020/04/16/%E7%94%A8Java%E6%92%B8%E4%B8%80%E4%B8%8BLFU%E7%AE%80%E6%98%93%E7%89%88%E6%9C%AC/"/>
      <url>/2020/04/16/%E7%94%A8Java%E6%92%B8%E4%B8%80%E4%B8%8BLFU%E7%AE%80%E6%98%93%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>最近在别人文章看到一片关于LFU的题目，个人觉得实现可以不同，他用的c，那我用java写一下，毕竟c已经忘的差不多了。<br>那个题就是让我们来设计一个数据结构，使其能够按照key-value的方式来实现put和get，而且要满足LFU，而且在空间满了之后，又要满足最近最少使用即LRU，且操作时间复杂度要满足O(1)</p><h3 id="首先看看什么是LFU"><a href="#首先看看什么是LFU" class="headerlink" title="首先看看什么是LFU"></a>首先看看什么是LFU</h3><p>LFU(Leatest Frequently Used)即访问频次最少被使用。当空间满了时，或者达到了阙值，那么不应该在缓存里面的数据应该是使用时间点最久远的，而且使用次数最少的。<br><img src="https://img-blog.csdnimg.cn/20200219152029962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200219152046377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200219152103296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200219152113176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200219152124183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200219152134658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在这里，为了满足一个操作时间复杂度，由get和put很容易就想到java里面有HashMap，这个很醒脑。<br>那么数据结构该怎么设计。<br><img src="https://img-blog.csdnimg.cn/20200219154226443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就这样，直接的数据缓存采用HashMap，所有的直接数据存这里。<br>但是还有就是关于频次的问题，采用的是一个双向链表+HashSet，但是底层又采用了HashMap。至于到底怎么回事，去看看我的文章<a href="https://blog.csdn.net/weixin_43272605/article/details/104394392" target="_blank" rel="noopener">看看他们怎么回事👍</a><br>为什么这么设计，HashMap不用管，大家都清楚，关键是这个LinkedHashSet怎么搞的。它是按照频次1，2，3，4，5….去存在HashSet里面的，然后每个频次会对应着LinkedHashSet来存储当前频次的所有节点，而且这个LinkedHashSet非常有意思，能够保持插入的顺序和读取的顺序是一样的，也就是说，如果越靠前说明是越早插入的。那么呢如果一个节点被访问了，或者被重置了，那么就将它放到频次高的，然后插入到频次高的后面，这样不仅频次高了，而且还能够满足它是频次高的且最近使用的。<br>总而言之，我们如果不看频次的Set，只看某一竖下来的双向链表，那么越在上面的是最久远的，要remove也是remove它。<br>那么来看看版本1的具体实现吧。<br>首先Node类，每个版本都一样的哦。<br>Node类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//键</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//值</span>        <span class="token keyword">int</span> freq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//频率</span>        <span class="token comment" spellcheck="true">//构造方法</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//构造方法</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LFUCache1</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Node<span class="token operator">></span> cacheMap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储缓存的内容</span>         Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>LinkedHashSet<span class="token operator">&lt;</span>Node<span class="token operator">>></span> freqMap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储每个频次对应的双向链表</span>         <span class="token keyword">int</span> size<span class="token punctuation">;</span>         <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>         <span class="token keyword">int</span> min<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储最小频次</span>        <span class="token function">LFUCache1</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> p7<span class="token punctuation">.</span>Node<span class="token operator">></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            freqMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> LinkedHashSet<span class="token operator">&lt;</span>Node<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node node <span class="token operator">=</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">freqInc</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加一次频次</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>capacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Node node <span class="token operator">=</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//已经存在了就替换掉，且增加一次频次</span>                node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">freqInc</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//容量到达极限，移除</span>                    Node deadNode <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cacheMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>deadNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    size<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Node newnodeNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newnodeNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//没存在过，说明要增加最开始频率为1</span>                <span class="token function">addNode</span><span class="token punctuation">(</span>newnodeNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">freqInc</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从原来对应的链表里面一处，并更新min；</span>            <span class="token comment" spellcheck="true">//获取这个节点的频率</span>            <span class="token keyword">int</span> freq <span class="token operator">=</span> node<span class="token punctuation">.</span>freq<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获得当前节点频率找到对应频率的HashMap里面的LinkedHashSet</span>            LinkedHashSet<span class="token operator">&lt;</span>Node<span class="token operator">></span> set <span class="token operator">=</span> freqMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移除掉LinkedHashSet里面的这个元素</span>            set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>freq <span class="token operator">==</span> min <span class="token operator">&amp;&amp;</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> freq <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//加入新freq对应的链表</span>            node<span class="token punctuation">.</span>freq<span class="token operator">++</span><span class="token punctuation">;</span>            LinkedHashSet<span class="token operator">&lt;</span>Node<span class="token operator">></span> newSet <span class="token operator">=</span> freqMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>freq<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>newSet <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                newSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                freqMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>freq<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> newSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            newSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LinkedHashSet<span class="token operator">&lt;</span>Node<span class="token operator">></span> set <span class="token operator">=</span> freqMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> set <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>p7<span class="token punctuation">.</span>Node<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                freqMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LinkedHashSet<span class="token operator">&lt;</span>Node<span class="token operator">></span> set <span class="token operator">=</span> freqMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>            Node deadNode <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>deadNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> deadNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h3><p>Node类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">int</span> freq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Node preNode<span class="token punctuation">;</span>        Node postNode<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这个版本没有采用LinkedHashSet，而是自定义了一个双向链表</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SelfLinkedList</span><span class="token punctuation">{</span>        Node headNode<span class="token punctuation">;</span>        Node tailNode<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SelfLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            headNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tailNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            headNode<span class="token punctuation">.</span>postNode <span class="token operator">=</span> tailNode<span class="token punctuation">;</span>            tailNode<span class="token punctuation">.</span>preNode <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">removeNode</span> <span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>preNode<span class="token punctuation">.</span>postNode <span class="token operator">=</span> node<span class="token punctuation">.</span>postNode<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>postNode<span class="token punctuation">.</span>preNode <span class="token operator">=</span> node<span class="token punctuation">.</span>preNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">addNode</span> <span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>postNode <span class="token operator">=</span> headNode<span class="token punctuation">.</span>postNode<span class="token punctuation">;</span>            headNode<span class="token punctuation">.</span>postNode<span class="token punctuation">.</span>preNode <span class="token operator">=</span> node<span class="token punctuation">;</span>            headNode<span class="token punctuation">.</span>postNode <span class="token operator">=</span> node<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>preNode <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LFUCache2</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Node<span class="token operator">></span> cacheMap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储缓存内容</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>SelfLinkedList<span class="token operator">></span> freMap<span class="token punctuation">;</span>        <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">int</span> min<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储当前最小频次</span>        <span class="token keyword">public</span> <span class="token function">LFUCache2</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            freMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node node <span class="token operator">=</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">freqInc</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>capacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Node node <span class="token operator">=</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">freqInc</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    SelfLinkedList minFreqLinkedList <span class="token operator">=</span> freMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cacheMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>minFreqLinkedList<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    minFreqLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>minFreqLinkedList<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>                    size<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                SelfLinkedList linkedList <span class="token operator">=</span> freMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>linkedList <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelfLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    freMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                linkedList<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                size<span class="token operator">++</span><span class="token punctuation">;</span>                min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">freqInc</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//先从原链表删除，然后加入频次更高的链表里面</span>            <span class="token keyword">int</span> freq <span class="token operator">=</span> node<span class="token punctuation">.</span>freq<span class="token punctuation">;</span>            SelfLinkedList linkedList <span class="token operator">=</span> freMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span><span class="token punctuation">;</span>            linkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>freq <span class="token operator">==</span> min <span class="token operator">&amp;&amp;</span> linkedList<span class="token punctuation">.</span>headNode<span class="token punctuation">.</span>postNode <span class="token operator">==</span> linkedList<span class="token punctuation">.</span>tailNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> freq <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node<span class="token punctuation">.</span>freq<span class="token operator">++</span><span class="token punctuation">;</span>            linkedList <span class="token operator">=</span> freMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>freq<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>linkedList <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelfLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                freMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>freq<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            linkedList<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="版本3"><a href="#版本3" class="headerlink" title="版本3"></a>版本3</h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LFU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天来记录一次使用Sqoop定时增量导入数据到HDFS</title>
      <link href="/2020/04/13/%E4%BB%8A%E5%A4%A9%E6%9D%A5%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Sqoop%E5%AE%9A%E6%97%B6%E5%A2%9E%E9%87%8F%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0HDFS/"/>
      <url>/2020/04/13/%E4%BB%8A%E5%A4%A9%E6%9D%A5%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Sqoop%E5%AE%9A%E6%97%B6%E5%A2%9E%E9%87%8F%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0HDFS/</url>
      
        <content type="html"><![CDATA[<h1 id="LInux自带定时器"><a href="#LInux自带定时器" class="headerlink" title="LInux自带定时器"></a>LInux自带定时器</h1><h3 id="Crontab定时器"><a href="#Crontab定时器" class="headerlink" title="Crontab定时器"></a>Crontab定时器</h3><blockquote><p><strong>crontab参数：<br>　　-u：帮助其他用户建立或移除工作排程<br>　　-l：查阅crontab的工作内容<br>　　-r：移除所有的crontab的工作内容<br>　　-e：编辑crontab文件</strong></p></blockquote><pre class=" language-javascript"><code class="language-javascript">每项工作有六个字段：　　<span class="token operator">*</span>　　<span class="token operator">*</span>　　<span class="token operator">*</span>　　<span class="token operator">*</span>　　<span class="token operator">*</span>　　<span class="token operator">*</span>　　分钟　　小时　　日期　　月份　　周　　指令　　<span class="token number">0</span><span class="token operator">-</span><span class="token number">59</span>　　<span class="token number">0</span><span class="token operator">-</span><span class="token number">23</span>　　<span class="token number">1</span><span class="token operator">-</span><span class="token number">31</span>　　<span class="token number">1</span><span class="token operator">-</span><span class="token number">12</span>　　<span class="token number">0</span><span class="token operator">-</span><span class="token number">7</span>　指令       #<span class="token number">0</span>和<span class="token number">7</span>都代表星期日辅助特殊字符：　　<span class="token operator">*</span>　　代表任何时刻　　，　　代表分割时间。如<span class="token number">2</span>点和<span class="token number">5</span>点 就是<span class="token number">2</span>，<span class="token number">5</span>　　<span class="token operator">-</span>　　代表一段时间范围。 如<span class="token number">2</span>点到<span class="token number">5</span>点 就是<span class="token number">2</span><span class="token operator">-</span><span class="token number">5</span>　　<span class="token operator">/</span>n　　n代表数字，即每隔n单位。 如每隔<span class="token number">5</span>分钟，<span class="token operator">/</span><span class="token number">5</span></code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class=" language-powershell"><code class="language-powershell">基本格式：一般在shell里面配合其他应用程序使用<span class="token operator">*</span>　　<span class="token operator">*</span>　　<span class="token operator">*</span>　　<span class="token operator">*</span>　　<span class="token operator">*</span>　　command前面5个<span class="token operator">*</span>代表时间的定义，command就是你要执行的命令，可想而知，待会儿我们就可以这样来定时执行sqoop的命令第1列表示分钟1～59 每分钟用<span class="token operator">*</span>或者 <span class="token operator">*</span><span class="token operator">/</span>1表示第2列表示小时1～23（0表示0点）第3列表示日期1～31第4列表示月份1～12第5列标识号星期0～6（0表示星期天）</code></pre><pre class=" language-powershell"><code class="language-powershell">30 21 <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>etc<span class="token operator">/</span>rc<span class="token punctuation">.</span>d<span class="token operator">/</span>lighttpd restart上面的例子表示每晚的21:30重启。45 4 1<span class="token punctuation">,</span>10<span class="token punctuation">,</span>22 <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>etc<span class="token operator">/</span>rc<span class="token punctuation">.</span>d<span class="token operator">/</span>lighttpd restart上面的例子表示每月1、10、22日的4 : 45重启apache。</code></pre><h1 id="Sqoop定时mysql-import-HDFS"><a href="#Sqoop定时mysql-import-HDFS" class="headerlink" title="Sqoop定时mysql import HDFS"></a>Sqoop定时mysql import HDFS</h1>]]></content>
      
      
      <categories>
          
          <category> Sqoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Sqoop </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件Kafka：基本概念和基本使用(经典)</title>
      <link href="/2020/04/12/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6Kafka%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8(%E7%BB%8F%E5%85%B8)/"/>
      <url>/2020/04/12/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6Kafka%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8(%E7%BB%8F%E5%85%B8)/</url>
      
        <content type="html"><![CDATA[<h6 id="最近做项目时使用到了Kafka，翻自己博客居然没有相关文章，这时写点文章复习复习，顺便深入理解一下基本操作。"><a href="#最近做项目时使用到了Kafka，翻自己博客居然没有相关文章，这时写点文章复习复习，顺便深入理解一下基本操作。" class="headerlink" title="最近做项目时使用到了Kafka，翻自己博客居然没有相关文章，这时写点文章复习复习，顺便深入理解一下基本操作。"></a>最近做项目时使用到了Kafka，翻自己博客居然没有相关文章，这时写点文章复习复习，顺便深入理解一下基本操作。</h6><h1 id="基本模型"><a href="#基本模型" class="headerlink" title="基本模型"></a>基本模型</h1><h6 id="Kafka是大数据常用的消息中间件，是由Apache开发的一种发布订阅消息系统，它是一个分布式的、分区的和重复的日志服务。它的模型大概就是这个样子"><a href="#Kafka是大数据常用的消息中间件，是由Apache开发的一种发布订阅消息系统，它是一个分布式的、分区的和重复的日志服务。它的模型大概就是这个样子" class="headerlink" title="Kafka是大数据常用的消息中间件，是由Apache开发的一种发布订阅消息系统，它是一个分布式的、分区的和重复的日志服务。它的模型大概就是这个样子"></a>Kafka是大数据常用的消息中间件，是由Apache开发的一种发布订阅消息系统，它是一个分布式的、分区的和重复的日志服务。它的模型大概就是这个样子</h6><p><img src="https://img-blog.csdnimg.cn/20200216194738415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们可以看到两个熟悉的角色<br>Producer生产者<br>Consumer消费者<br>这两个是消息中间件里面常见的两个名词<br>另外还有broker，它代表一台kafka服务器，多个broker组成集群。<br>从图中可以看到Producer负责向broker发送消息，而Consumer负责从broker拉取消息，从而完成整个消息的生产消费。另外还有一个Zookeeper，它是一个分布式的协调服务，主要保存了broker的一些元数据，还有负责broker服务协调，比如leader副本的选举等等。</p><h1 id="分区和主题"><a href="#分区和主题" class="headerlink" title="分区和主题"></a>分区和主题</h1><p>主题Topic，一般不同业务就为kafka创建了不同Topic供生产者和消费者使用。<br>而一般情况下，一个主题为了能够均衡broker负载，一个Topic通常有不同的分区，每个分区有着自己的偏移量，但是这个分区和副本备份没有关系，最近很多人都迷惑这点，将分区和副本联系在一起，其实不是的。<br>当Producer生产消息时，会根据某些算法将消息划分到不同的分区，比如我来了一个A消息，它被分到了0分区，而B消息可能被分到了2分区，不同分区的消息是不冲突的，就像这样：<br><img src="https://img-blog.csdnimg.cn/20200216195701700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>它是以日志追加的方式进行的，上面图中分区0正在写入偏移量为8的消息，分区1正在写入偏移量为6的消息…….</p><h6 id="你可能疑惑了，作为分布式的消息中间件，为什么连容灾的措施都没有。这不废话吗，当然有。看图说话"><a href="#你可能疑惑了，作为分布式的消息中间件，为什么连容灾的措施都没有。这不废话吗，当然有。看图说话" class="headerlink" title="你可能疑惑了，作为分布式的消息中间件，为什么连容灾的措施都没有。这不废话吗，当然有。看图说话"></a>你可能疑惑了，作为分布式的消息中间件，为什么连容灾的措施都没有。这不废话吗，当然有。看图说话</h6><p><img src="https://img-blog.csdnimg.cn/20200216200010790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>每个分区都会根据当初创建Topic的副本参数来复制分区。假如现在分区1，它有两个follower分别在Broker1和Broker2上。主要的是leader那个，在Broker1上，它负责读写，而副本只是负责从leader拉取消息，只负责同步消息，为了以后leader宕机能够及时切换减少消息的丢失。<br>但是呢，人写的程序不是万能的，follower多多少少都会有写滞后，”一定程度的滞后“将follower划分成了两种，一种是ISR，另一种是OSR</p><h3 id="AS-ISR-OSR"><a href="#AS-ISR-OSR" class="headerlink" title="AS   ISR  OSR"></a>AS   ISR  OSR</h3><p>AS：Assigned Replicas，即某一个分区的全部副本，包括了leader。<br>ISR：In-Sync Replicas，即与leader保持一定程度同步的follower。<br>OSR：Out-of-Sync Replicas，即对leader来说滞后了过多的follower。<br>所以AS=ISR+OSR<br>一个消息是首先发送到leader的，然后follower再去复制过来。而leader在负责读写时，还要注意维护follower的状态，如果一旦发现follower过多的之后，就会将它放到OSR中，而如果OSR中的进度慢慢跟上来了，就会将它放到ISR中。为什么要维护这样的follower集合，因为在leader出事了后，要重新选举leader的话，就会根据ISR中的follower来选举一个leader，这样能够尽量减少消息的丢失。</p><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><h5 id="先来个初级版的例子吧"><a href="#先来个初级版的例子吧" class="headerlink" title="先来个初级版的例子吧"></a>先来个初级版的例子吧</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">kafkaProducer</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//几台kafka服务器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String brokerList <span class="token operator">=</span> <span class="token string">"114.116.219.197:5008,114.116.220.98:5008,114.116.199.154:5008"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//topic主题名字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String topic <span class="token operator">=</span> <span class="token string">"topic-demo"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Properties <span class="token function">initConfig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加服务器列表配置</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span>brokerList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//键的序列化方式</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//值的序列话方式</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端名字</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"client.id"</span><span class="token punctuation">,</span><span class="token string">"producer.client.id.demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> props<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">kafkatest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties properties <span class="token operator">=</span> <span class="token function">initConfig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建生产者</span>        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建消息</span>        ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span><span class="token string">"hello,Kafka!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fire-and-forget，同步sync，异步async</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="生产者是线程安全的，我们不用担心多线程情况下生产者发送消息会有影响。"><a href="#生产者是线程安全的，我们不用担心多线程情况下生产者发送消息会有影响。" class="headerlink" title="生产者是线程安全的，我们不用担心多线程情况下生产者发送消息会有影响。"></a>生产者是线程安全的，我们不用担心多线程情况下生产者发送消息会有影响。</h5><h5 id="有时候，如果你如果按照上面来敲代码，多多少少可能会敲错，所以我们最后尽量将其标准一点。像这样"><a href="#有时候，如果你如果按照上面来敲代码，多多少少可能会敲错，所以我们最后尽量将其标准一点。像这样" class="headerlink" title="有时候，如果你如果按照上面来敲代码，多多少少可能会敲错，所以我们最后尽量将其标准一点。像这样"></a>有时候，如果你如果按照上面来敲代码，多多少少可能会敲错，所以我们最后尽量将其标准一点。像这样</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">kafkaProducer</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//几台kafka服务器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String brokerList <span class="token operator">=</span> <span class="token string">"114.116.219.197:5008,114.116.220.98:5008,114.116.199.154:5008"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//topic主题名字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String topic <span class="token operator">=</span> <span class="token string">"topic-demo"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Properties <span class="token function">initConfig2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span>brokerList<span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>CLIENT_ID_CONFIG<span class="token punctuation">,</span><span class="token string">"producer.client.id.demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> props<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">kafkatest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties properties <span class="token operator">=</span> <span class="token function">initConfig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建生产者</span>        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建消息</span>        ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span><span class="token string">"hello,Kafka!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fire-and-forget，同步sync，异步async</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="像上面的样子，我们就将这些”“里面的内容都用Kafka自己本来就有的常量了，所以不用担心搞错。"><a href="#像上面的样子，我们就将这些”“里面的内容都用Kafka自己本来就有的常量了，所以不用担心搞错。" class="headerlink" title="像上面的样子，我们就将这些”“里面的内容都用Kafka自己本来就有的常量了，所以不用担心搞错。"></a>像上面的样子，我们就将这些”“里面的内容都用Kafka自己本来就有的常量了，所以不用担心搞错。</h5><h4 id="ProducerRecord"><a href="#ProducerRecord" class="headerlink" title="ProducerRecord"></a>ProducerRecord</h4><p>注意这个ProducerRecord，我们进去看看源码<br><img src="https://img-blog.csdnimg.cn/20200216202425167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注释写的很明显，ProducerRecord包括了主题，分区号，消息头部，键，值，消息时间戳。<br>键可以用来计算分区，值就是存储消息的。看到分区好partition其实我们也可以自己指定分区号，不过按默认的应该没事。</p><h2 id="消息的发送"><a href="#消息的发送" class="headerlink" title="消息的发送"></a>消息的发送</h2><p>上面的图片就是消息的结构，以前的版本可能还要和Zookeeper联系起来，现在直接和Kafka集群通信即可。<br>对于ProducerRecord构造方法有很多种<br><img src="https://img-blog.csdnimg.cn/20200216202915678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="看，明显可以自己指定分区，时间戳，键，值，还有消息头，都是可以自己弄得。而我们刚才看到的代码就只有topic和value-消息-。"><a href="#看，明显可以自己指定分区，时间戳，键，值，还有消息头，都是可以自己弄得。而我们刚才看到的代码就只有topic和value-消息-。" class="headerlink" title="看，明显可以自己指定分区，时间戳，键，值，还有消息头，都是可以自己弄得。而我们刚才看到的代码就只有topic和value(消息)。"></a>看，明显可以自己指定分区，时间戳，键，值，还有消息头，都是可以自己弄得。而我们刚才看到的代码就只有topic和value(消息)。</h5><h5 id="发送消息的模式主要有三种，上面看过了，即fire-and-forget-发完马上忘掉-，同步，异步"><a href="#发送消息的模式主要有三种，上面看过了，即fire-and-forget-发完马上忘掉-，同步，异步" class="headerlink" title="发送消息的模式主要有三种，上面看过了，即fire-and-forget(发完马上忘掉)，同步，异步"></a>发送消息的模式主要有三种，上面看过了，即fire-and-forget(发完马上忘掉)，同步，异步</h5><h3 id="fire-and-forget："><a href="#fire-and-forget：" class="headerlink" title="fire-and-forget："></a>fire-and-forget：</h3><p>这种方式可靠性最低，它从来不管消息有没有到达Kafka，只顾自己，是一种非常自私的方式，所以很容易发生消息丢失，因而可靠性最差，但是性能又是最好的。</p><h3 id="同步："><a href="#同步：" class="headerlink" title="同步："></a>同步：</h3><p>这种方式就是阻塞等待Kafka服务器返回信息给自己。到send里面去看。<br><img src="https://img-blog.csdnimg.cn/20200216203434750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>它返回了一个Future&lt; RecordMetadata &gt;对象，里面包括了各种元数据信息。我们实现同步的方式就是<br><img src="https://img-blog.csdnimg.cn/20200216203558563.png" alt="在这里插入图片描述"><br>这个get()方法可以阻塞，是Future&lt; RecordMetadata &gt;里的一个方法，所以如果你除了阻塞之外，你还可以利用这个对象获取到其他元数据信息。</p><h3 id="异步发送"><a href="#异步发送" class="headerlink" title="异步发送"></a>异步发送</h3><p>而异步方式就是常见的在send里面加一个回调函数<br><img src="https://img-blog.csdnimg.cn/20200216203923470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样，一但返回了正确的信息就会用到回调函数，而且回调函数u能够保证分区有序。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>生产者拦截器既可以用来在消息发送前 做一些准备工作 比如按照 一个规则过 虑不符合要求<br>的消息、修改 息的内容等， 也可以用来在发送 调逻辑前做一 些定制化的需 求，比如统计<br>类工作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">producerinterce</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerInterceptor</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    在序列化和分区之前会调用onSend方法来对消息进行相关定制化操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">onSend</span><span class="token punctuation">(</span>ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为每个消息添加一个前缀</span>        String modifiedValue <span class="token operator">=</span> <span class="token string">"pre"</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">,</span>modifiedValue<span class="token punctuation">,</span>record<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// kafkaProducer在被应答之前或者消息发送失败时调用这个方法，比用户设置的CallBack先执行</span><span class="token comment" spellcheck="true">//    这个方法运行在producer的IO线程中，所以这个方法实现的代码逻辑越简单越好。否则会影响消息发送速度。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAcknowledgement</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exception<span class="token operator">==</span>null<span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭拦截器时执行一些资源清理工作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>在producer中添加以下代码，这里还可以添加多个拦截器，当然一一按顺序执行。props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>INTERCEPTOR_CLASSES_CONFIG<span class="token punctuation">,</span>producerInterceptor1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>producerinterceptor2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>我们在客户端Producer都会经过序列化器将我们发出去的消息序列化。最上面的入门例子，就用了StringSerializer去将对象转成字节数组。相反，在消费者那边就需要将消息反序列化了。</p><h3 id="分区器"><a href="#分区器" class="headerlink" title="分区器"></a>分区器</h3><p>经过了序列化器后，就要经过分区器了。<br>刚才我们介绍过了，在ProducerRecord的构造方法种，可以自定义partition字段，也就是i自己分区，这样就不会经过默认的分区器了。但是我也不知道指定好还是不指定好，那么看看默认的分区器DefaultPartitioner的实现。<br>partition()方法中定义了主要的分区分配逻辑。如果我们ProducerRecord里面指定了key的话，那么就会根据key进行hash（MurMurHash2，它具有高性能计算和低碰撞率）算法，最终根据得到的哈希值计算分区号，拥有相同的key会发送到同一个分区，但是如果key没有设置，就会轮询进入每个分区。<br>当然也可以自定义分区器<br><img src="https://img-blog.csdnimg.cn/20200216211703247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这就是自定义分区器。当然默认的应该已经可以了。</p><h3 id="Producer整体原理"><a href="#Producer整体原理" class="headerlink" title="Producer整体原理"></a>Producer整体原理</h3><p><img src="https://img-blog.csdnimg.cn/20200216213106904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看清楚了，kafka的producer有两个线程，主线程负责执行用户代码还有经过拦截器，序列化器，最后经过分区器，从而将ProducerRecord添加到缓存区，一个消息累加器里面，这个消息累加器并不是以ProducerRedcord为单位的，而是以ProducerBatch为单位，可以说一般情况下，一个ProducerBatch包括了几个ProducerRecord，并且也是按分区来放入ProducerRecord。<br>然后由Sender线程去发送。<br>从上图可以看到Sender线程和KafkaCluster之间是有通信的。那么肯定就会有消息的应答回复。</p><h5 id="这个应答就叫做acks，它有好几种值，分别对应不同的情况"><a href="#这个应答就叫做acks，它有好几种值，分别对应不同的情况" class="headerlink" title="这个应答就叫做acks，它有好几种值，分别对应不同的情况"></a>这个应答就叫做acks，它有好几种值，分别对应不同的情况</h5><ul><li>等于1：这种情况是一种吞吐量和可靠性均衡的方案，只要消息被leader正确接收，不用等follower复制消息，可以直接返回给Producer正确响应，但是如果出错了，就会返回错误消息，比如leader坏了，或者正在重新选举leader都有可能。看起来这个挺不错的，但是呢还是会有消息丢失，因为它只管leader接收，假如leader正确接受了，返回正确信息给Producer，但是还没等follower复制完，就突然没了，那么follower就会确实消息，但是Producer不知道。</li><li>等于0：这种情况是可靠性相当不好的，但是吞吐量很好，就是Producer不管KafkaCluster有没有正确接收到消息，反正Producer就是一直传，是非常自私的一种。</li><li>等于-1或者ALL：这种情况就是可靠性最好的，就是当leader接收到消息后，会等所有的ISR中间的follower都复制完再给应答，可见可靠性非常好。很少有数据丢失，除非只有leader，而没有其他follower，那就和acks=1是一样的了，等于只有leader接收到了，如果leader挂了一样的没有消息。<br>代码中这样配置<br><img src="https://img-blog.csdnimg.cn/20200217202419386.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200217202425111.png" alt="在这里插入图片描述"></li></ul><h1 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h1><p>消费者很有意思，消费者有两种，一种是主动消费，一种是被动消费，被动消费就好比我们被搞传销的搞上了，那还能怎么办，强制消费呗，在生产者消费者领域是中间服务器强制发给消费者，是一种push的概念。而主动消费是自己资源消费，是一种pull模式，kafka就是这一种模式，当消费者要消费消息时，会主动从Broker拉取消息。<br>要了解kafka的消费者，首先要知道消费者和消费者组的概念</p><h3 id="消费者和消费者组"><a href="#消费者和消费者组" class="headerlink" title="消费者和消费者组"></a>消费者和消费者组</h3><h6 id="很显然，消费者组包含了很多消费者。kafka在这种形式上抽象的也是蛮有意思的，我们知道消费方式可以是P2P，也可以是发布-订阅，即PUB-SUB，而kafka通过消费者和消费者组的概念就可以都实现。"><a href="#很显然，消费者组包含了很多消费者。kafka在这种形式上抽象的也是蛮有意思的，我们知道消费方式可以是P2P，也可以是发布-订阅，即PUB-SUB，而kafka通过消费者和消费者组的概念就可以都实现。" class="headerlink" title="很显然，消费者组包含了很多消费者。kafka在这种形式上抽象的也是蛮有意思的，我们知道消费方式可以是P2P，也可以是发布/订阅，即PUB/SUB，而kafka通过消费者和消费者组的概念就可以都实现。"></a>很显然，消费者组包含了很多消费者。kafka在这种形式上抽象的也是蛮有意思的，我们知道消费方式可以是P2P，也可以是发布/订阅，即PUB/SUB，而kafka通过消费者和消费者组的概念就可以都实现。</h6><h6 id="对于消费者组，一个分区只能被一个消费者组中的一个消费者消费，反过来说，同一个消费者组的消费者不能重叠消费同一个分区。当只有一个消费者组时，一个分区就对应一个消费者，这样就是一种P2P的方式，而多个消费者组都只有一个消费者的话，那么所有消费者都可以收到消息，就是发布-订阅了。"><a href="#对于消费者组，一个分区只能被一个消费者组中的一个消费者消费，反过来说，同一个消费者组的消费者不能重叠消费同一个分区。当只有一个消费者组时，一个分区就对应一个消费者，这样就是一种P2P的方式，而多个消费者组都只有一个消费者的话，那么所有消费者都可以收到消息，就是发布-订阅了。" class="headerlink" title="对于消费者组，一个分区只能被一个消费者组中的一个消费者消费，反过来说，同一个消费者组的消费者不能重叠消费同一个分区。当只有一个消费者组时，一个分区就对应一个消费者，这样就是一种P2P的方式，而多个消费者组都只有一个消费者的话，那么所有消费者都可以收到消息，就是发布/订阅了。"></a>对于消费者组，一个分区只能被一个消费者组中的一个消费者消费，反过来说，同一个消费者组的消费者不能重叠消费同一个分区。当只有一个消费者组时，一个分区就对应一个消费者，这样就是一种P2P的方式，而多个消费者组都只有一个消费者的话，那么所有消费者都可以收到消息，就是发布/订阅了。</h6><p><img src="https://img-blog.csdnimg.cn/20200217203547423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="看上面这个图，对于Group-A，每个分区可以被对应的消费者消费，而Group-B不得不一个消费者消费两个分区，挺可怜的。但是如果这样横向的不断增加同一消费者组的消费者，看似可以均衡消费，减少某一消费者的负载，但是并不是越多越好，每次新加一个消费者，分区就会重新分配，但是一旦同一消费者组的消费者数量多于分区数量，就会导致多余的消费者没有分区消费，就只能空在那里很尴尬，所以并不是消费者越多越好。"><a href="#看上面这个图，对于Group-A，每个分区可以被对应的消费者消费，而Group-B不得不一个消费者消费两个分区，挺可怜的。但是如果这样横向的不断增加同一消费者组的消费者，看似可以均衡消费，减少某一消费者的负载，但是并不是越多越好，每次新加一个消费者，分区就会重新分配，但是一旦同一消费者组的消费者数量多于分区数量，就会导致多余的消费者没有分区消费，就只能空在那里很尴尬，所以并不是消费者越多越好。" class="headerlink" title="看上面这个图，对于Group A，每个分区可以被对应的消费者消费，而Group B不得不一个消费者消费两个分区，挺可怜的。但是如果这样横向的不断增加同一消费者组的消费者，看似可以均衡消费，减少某一消费者的负载，但是并不是越多越好，每次新加一个消费者，分区就会重新分配，但是一旦同一消费者组的消费者数量多于分区数量，就会导致多余的消费者没有分区消费，就只能空在那里很尴尬，所以并不是消费者越多越好。"></a>看上面这个图，对于Group A，每个分区可以被对应的消费者消费，而Group B不得不一个消费者消费两个分区，挺可怜的。但是如果这样横向的不断增加同一消费者组的消费者，看似可以均衡消费，减少某一消费者的负载，但是并不是越多越好，每次新加一个消费者，分区就会重新分配，但是一旦同一消费者组的消费者数量多于分区数量，就会导致多余的消费者没有分区消费，就只能空在那里很尴尬，所以并不是消费者越多越好。</h6><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><p>代码的常用步骤</p><pre><code>//配置消费者客户端参数及创建相应的消费者实例//订阅主题//拉取消息并且消费//提交消费位移//关闭消费者实例</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumer</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//配置消费者客户端参数及创建相应的消费者实例</span>    <span class="token comment" spellcheck="true">//订阅主题</span>    <span class="token comment" spellcheck="true">//拉取消息并且消费</span>    <span class="token comment" spellcheck="true">//提交消费位移</span>    <span class="token comment" spellcheck="true">//关闭消费者实例</span>    <span class="token comment" spellcheck="true">//Kafka服务器的集群消息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String brokerList <span class="token operator">=</span> <span class="token string">"114.116.219.197:5008,114.116.220.98:5008,114.116.199.154:5008"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//主题消息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String topic <span class="token operator">=</span> <span class="token string">"topic-demo"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//组名</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String groupID <span class="token operator">=</span> <span class="token string">"group.demo"</span>    <span class="token comment" spellcheck="true">//这个待会儿就知道了    </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicBoolean isRunning <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Properties <span class="token function">initConfig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//键值序列化        props.put("key.deserializer","org.apache.kafka.common.serialization.StringDeserializer");</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span>brokerList<span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span>groupID<span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"client.id"</span><span class="token punctuation">,</span><span class="token string">"consumer.client.id.demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> props<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Properties <span class="token function">initConfig2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>                StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>                StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span>brokerList<span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span>groupID<span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>CLIENT_ID_CONFIG<span class="token punctuation">,</span><span class="token string">"client.id.demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> props<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties properties <span class="token operator">=</span> <span class="token function">initConfig2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建消费者对象</span>        org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> consumer <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>KafkaConsumer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>isRunning<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过poll方法来获取消息，这里我写了一篇文章poll里面发生了什么，还没写完，可以一看。[点开看看吧](https://blog.csdn.net/weixin_43272605/article/details/104168379)</span>            ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> records <span class="token operator">=</span>                    consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> record<span class="token operator">:</span> records<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"topic = "</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">+</span><span class="token string">", partition = "</span><span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">+</span><span class="token string">", offset = "</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span><span class="token operator">+</span>record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">", value = "</span><span class="token operator">+</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">class</span> <span class="token class-name">TopicPartion</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="订阅主题，分区"><a href="#订阅主题，分区" class="headerlink" title="订阅主题，分区"></a>订阅主题，分区</h3><p>前面的代码可以看到，我们通过<code>consumer.subscribe(Arrays.asList(topic));</code>来订阅了主题<br>这个方法有好几个</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> topics<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//这个listener以后会知道的。是一种再均衡监听器。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> topics<span class="token punctuation">,</span> ConsumerRebalanceListener listener<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//下面这两种可以采用正则表达式匹配多个主题</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Pattern pattern<span class="token punctuation">,</span> ConsumerRebalanceListener listener<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Pattern pattern<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//此外，还有另外一种，是订阅分区</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span>这个TopicPartition里面有两个变量，分别是topic和partition。比如这样用：<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//取消订阅</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>前面说了Producer在写入消息的时候会进行序列化，那么反之，消费者消费肯定要反序列化<br>任何反序列化器都要实现一个Deserializer接口，比如StringDeserializer就实现了这个接口<br><img src="https://img-blog.csdnimg.cn/20200217211536200.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java">配置当前类<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> co 口 gs <span class="token keyword">boolean</span> i sKey<span class="token punctuation">)</span>用来执行反序列化，这里将<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>类型转成了String<span class="token keyword">public</span> String <span class="token function">deserialize</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>用来关闭当前序列化器。<span class="token keyword">public</span> <span class="token keyword">void</span> close （） </code></pre><p>同时我们可以自定义反序列化器，来使用自己的。</p><h3 id="消息的消费"><a href="#消息的消费" class="headerlink" title="消息的消费"></a>消息的消费</h3><p>实例的那份代码看到了，是通过poll方法实现消费，里面的东西我们可以看到的<br>我写了那篇文章<br><a href="https://blog.csdn.net/weixin_43272605/article/details/104168379" target="_blank" rel="noopener">可以一看</a><br><code>public ConsumerRecords&lt;K, V&gt; poll(final Duration timeout)</code><br><img src="https://img-blog.csdnimg.cn/20200217213549634.png" alt="在这里插入图片描述"><br>像这样，就是每隔1000毫秒消费一次消息，期间可以等待应答。<br>返回的是ConsumerRecords里面的迭代是ConsumerRecord</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> String topic<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主题</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> partition<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分区</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位移</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestamp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间戳，包括了创建时间或者修改时间</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> TimestampType timestampType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建或者修改时间</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> serializedKeySize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> serializedValueSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Headers headers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> K key<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> V value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> leaderEpoch<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Long checksum<span class="token punctuation">;</span></code></pre><p>要知道，我们当初创建消费者时topic时可以指定多个的，同样，我们poll时是可以按照主题甚至是分区进行消费<br>按主题消费，就调用ConsumerRecords的records(topic)<br><img src="https://img-blog.csdnimg.cn/20200217214319256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按照partition消费就传个分区进去就行<br><img src="https://img-blog.csdnimg.cn/2020021721430489.png" alt="在这里插入图片描述"></p><h3 id="位移的提交"><a href="#位移的提交" class="headerlink" title="位移的提交"></a>位移的提交</h3><p>这里首先我们要清楚，消费者总是要消费到一定的位移，不能重复消费吧。这个位移是kafka在维护着，我们客户端也需要自己提交更新位移。<br>而且我每次poll时，返回的一定是没有消费过的，那么这个位移更要去维护了，注意：这里的位移和消息在分区的位置数值一样，但是意义不一样，是指当前客户端消费当前分区的位置。<br>在以前的版本的话，消费位移是由zookeeper保存，但是现在是kafka集群专门在zookeeper有一个__consumer_offsets 来存储。而这个存储的过程就是提交位移。</p><p>假设对于某个分区消息0，1，2，3，4，5，6，7，8，9<br>假设我这次poll已经消费到了当前位置5，那么我提交的位移应该是6，即我下一次想要拉取的消息。</p><h4 id="重复消费和消息丢失"><a href="#重复消费和消息丢失" class="headerlink" title="重复消费和消息丢失"></a>重复消费和消息丢失</h4><p>我们提交位移的时候如果控制得不好，就会发生重复消费或者消息丢失。<br>对于消息0，1，2，3，4，5，6，7，8，9，·10，11<br>假设当前消费到了2，而拉取了3，4，5，6，7消息，然后提交位移8，但是在处理3，4，5，6，7消息时突然故障，那么等恢复时poll就会从8消费，这样3，4，5，6，7的消息处理就丢失了。<br>而如果在消费后再去提交，比如我先消费3，4，5，6，7，再去提交8，这时候如果消费时除了故障，就执行不到提交位移，这样恢复时下次poll又是拉取3，4，5，6，7就重复消费了。<br>一般情况下，我们都是按照默认的自动提交，默认是每隔5秒吧，不是很记得了。但是这样同样有问题，如果在下次提交前消费者发生故障，那么如果恢复了就会造成重复消费。但是如果卡在了提交的时间点，比如我已经拉取了消息，并且刚好在时间点提交，而消费的线程出了状况，导致某些消息没有处理，就出现消息丢失。其实总而言之就是最上面两种情况，提交位移先后的问题。<br>如果你不满意自动消费，可以自己手动提交，以前的手动提交是要连接zookeeper，但是我现在不是那个版本，所以不需要操作zookeeper</p><h5 id="第一步：要开启手动提交功能，即关闭自动提交"><a href="#第一步：要开启手动提交功能，即关闭自动提交" class="headerlink" title="第一步：要开启手动提交功能，即关闭自动提交"></a>第一步：要开启手动提交功能，即关闭自动提交</h5><p><code>props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,false);</code></p><h5 id="第二步：代码手动提交"><a href="#第二步：代码手动提交" class="headerlink" title="第二步：代码手动提交"></a>第二步：代码手动提交</h5><p><strong>同步提交：</strong><br>先通过poll获取消息<br>处理消息<br>通过consumer提交位移<br><code>consumer.commitSync();</code></p><p><strong>异步提交</strong><br>异步提交就是消费线程不会等提交返回结果就开始下一次拉取了。<br><img src="https://img-blog.csdnimg.cn/20200217222737826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有三个重载方法，第二个callback是一个传进去的回调方法，当返回结果时，可以进行相关处理。异步提交的方式引起重复消费就要注意了，不过第一次提交5，然后提交失败，但是呢紧接着要提交5+3，提交成功了，但是提交5那次还没有成功，又提交5成功就更新了offset，下次拉取又从5开始了。所以每次提交时最好在本地维护一个序号，这个序号一定是正确的消费位移，然后如果提交的时候位移小于这个序号，说明已经有更大的位移已经提交，就不需要提交了。</p><h3 id="消费者再均衡"><a href="#消费者再均衡" class="headerlink" title="消费者再均衡"></a>消费者再均衡</h3><p>所谓消费者再均衡，就是防止某一个消费者负载过多，效率减低，像之前那样，一个主题的分区尽量能够均匀分到同一消费组的每一个消费者，这样可以提高效率，而现实往往不是理想的，所以kafka让消费者自己均衡，这个均衡的过程就叫做再均衡。这个过程中，消费者会停止读取消息和操作，所以这里就引发了一种重复消费的情况。就是如果消息处理完了，但是位移还没有提交，就发生了再均衡这样就均衡之后新的消费者还是从之前的偏移量开始读。所以就会引发重复消费，但是不要着急，我们有相当好的方法去解决这个问题，那就是订阅主题的时候开启再均衡回调。看实例代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可以再均衡回调</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties properties <span class="token operator">=</span> <span class="token function">initConfig3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        <span class="token comment" spellcheck="true">//这个变量保存某个分区消费到的位移</span>        Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> OffsetAndMetadata<span class="token operator">></span> currentOffsets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> consumer <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>KafkaConsumer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        <span class="token comment" spellcheck="true">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConsumerRebalanceListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这个方法可以在停止读取消息后，再均衡之前调用，可以在这里提交位移这样就可以避免重复消费</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPartitionsRevoked</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span>currentOffsets<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//回调时同步提交</span>                currentOffsets<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//这个方法是重新分区之后，新消费者开始读取消息之前调用</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPartitionsAssigned</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>isRunning<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> records <span class="token operator">=</span>                    consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> record<span class="token operator">:</span> records<span class="token punctuation">)</span><span class="token punctuation">{</span>                currentOffsets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            异步提交位移</span>            consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span>currentOffsets<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用这样，就可以保证再那个回调里面，使位移的提交能够改在再均衡之前，就可以避免重复消费了。</p><h3 id="消费者也有拦截器"><a href="#消费者也有拦截器" class="headerlink" title="消费者也有拦截器"></a>消费者也有拦截器</h3><h6 id="下面这个例子做了一个过期的拦截器，不过实用性好像不大。"><a href="#下面这个例子做了一个过期的拦截器，不过实用性好像不大。" class="headerlink" title="下面这个例子做了一个过期的拦截器，不过实用性好像不大。"></a>下面这个例子做了一个过期的拦截器，不过实用性好像不大。</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">consumerinterce</span> <span class="token keyword">implements</span> <span class="token class-name">ConsumerInterceptor</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_INTERVAl <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在poll方法返回之前会调用这个方法，可以有相关消息的定制化操作</span>    <span class="token comment" spellcheck="true">//即对ConsumerRecords进行操作。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">onConsume</span><span class="token punctuation">(</span>ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新的消费者记录</span>        Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>>></span> newRecords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于每一个分区</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>TopicPartition tp <span class="token operator">:</span> <span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每一个主题分区</span>            List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> tpRecords <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">records</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//新的主题分区</span>            List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> newTpRecords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> record <span class="token operator">:</span> tpRecords<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> record<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> EXPIRE_INTERVAl<span class="token punctuation">)</span><span class="token punctuation">{</span>                    newTpRecords<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newTpRecords<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                newRecords<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span>newTpRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConsumerRecords</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>newRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提交完位移后调用这个方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCommit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> OffsetAndMetadata<span class="token operator">></span> offsets<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> 生产者与消费者 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink容错与状态一致性保证</title>
      <link href="/2020/04/12/Flink%E5%AE%B9%E9%94%99%E4%B8%8E%E7%8A%B6%E6%80%81%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81/"/>
      <url>/2020/04/12/Flink%E5%AE%B9%E9%94%99%E4%B8%8E%E7%8A%B6%E6%80%81%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="CheckPoint机制"><a href="#CheckPoint机制" class="headerlink" title="CheckPoint机制"></a>CheckPoint机制</h1><hr><p><strong>为了进行容错，我们在进行Flink的处理的时候，需要进行容错管理，难免我们的应用会发生故障的。而Flink提供了这样的一种容错机制CheckPoint，它能够保证Flink内部的一致性，实现内部Exact Once语义。首先看看什么是CheckPoint机制</strong><br><strong>它是受Chandy-Lamport算法的启发，形成的一种轻量级的分布式快照，它的意思是每个操作(具体到是每一个并行操作)的状态进行持久化或者保存在内存中，或者说进行一次快照，这样子就能够保存了这一瞬间的状态和数据，”这一瞬间“并不是指时间的一瞬间，使我们要进行CheckPoint的那个关键点的一瞬间，等会儿就明白了。</strong></p><h2 id="Flink中的checkpoint模式"><a href="#Flink中的checkpoint模式" class="headerlink" title="Flink中的checkpoint模式"></a>Flink中的checkpoint模式</h2><hr><p><strong>在Flink中，是有JobManager按照一定的周期提供CheckPoint，它有点儿类似于watermark，也是丢一个barrier放在数据流里面，它也在数据流里面流动，但是丝毫不影响算子对真实数据的操作，task的执行者遇到这个barrier不会当做数据处理，反之停止处理barrier后面的数据流，将后面的数据流缓存。</strong></p><h5 id="串行的barrier"><a href="#串行的barrier" class="headerlink" title="串行的barrier"></a>串行的barrier</h5><p><img src="https://img-blog.csdnimg.cn/20200305223105734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>可以看到，==黄色的方块==是数据流，而==绿色的条形==是barrier，一个barrier携带的就是一个checkpoint的ID，这是一个数据通道的barrier。</strong></p><h5 id="并行的barrier"><a href="#并行的barrier" class="headerlink" title="并行的barrier"></a>并行的barrier</h5><p><img src="https://img-blog.csdnimg.cn/20200305223342458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>并行的很奇妙，当我们的一个operator接受了多个并行的输入流时，每个并行的输入流都会有barrier。假设当前有输入流A和输入流B，就像上面的图，那么A的barrier来了的时候，就会停止处理barrier之后的数据，而只接受他们缓存在本地，转而等待其他数据流的barrier到来，这时候B的barrier如果没有到来，他还是会处理来自B的数据，也就是说B这条输入流并不受A的影响，因为属于B的barrier还没有来。当B的barrier来的时候，也和A一样，将后面的数据先缓存好，而不去处理它。这时候所有的并行的输入流的barrier都来了，那么就可以当前这个operator的状态和一些数据进行快照checkpoint了，这样这个operator的状态就被存储了。</strong><br><strong>Flink的checkpoint要控制合理的间隔，保证多个输入流的checkpointID是一样的，不然会混乱。保证了checkpointID是一致的话，当我们checkpoint后，就将这个operator的barrier广播到operator的所有输出流，因为所有与这个operator相连的其他operator都在等待这个通道的barrier，这样后面的operator才可以进行checkpoint</strong></p><blockquote><p><strong>下面就要回到上面的”一瞬间“的问题了，这里为什么说不是真正意义上的一瞬间，因为我们不同operator实际上进行checkpoint的时间是不同的，所以保存的不是checkpoint的一瞬间，而是这个barrier相对于这些数据流的位置语义的一瞬间，这样就能够保证在一个barrier：checkpointID的时候，所有属于这个checkpointID之前的数据都能够存储起来。</strong></p></blockquote><h2 id="Flink的CheckPoint具体流程"><a href="#Flink的CheckPoint具体流程" class="headerlink" title="Flink的CheckPoint具体流程"></a>Flink的CheckPoint具体流程</h2><ul><li>①<br>  上面已经说过了，checkpoint是在JobManager发起的，其实是在JobManager的Checkpoint Coordinator（Checkpoint协调者）发起了CheckPoint，而且是向所有的source发起。这个sink你可以暂时想象成真正的Flink外部的Sink，也可以想象成某一个算子，比如map<br><img src="https://img-blog.csdnimg.cn/20200305225653296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>②<br>  当source接受到了checkpoint的触发，也就是barrier，将自己的状态异步写入到持久化存储中，这样source的就能够保证持久化了，然后将barrier广播到任何下游输出流通道去。<br><img src="https://img-blog.csdnimg.cn/20200305230037152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>③<br>  当task的状态备份完成后，就可以对CheckPoint Coordinator返回一个消息，告诉他已经备份完成了。即state handle：备份数据的地址告诉了JM<br>  <img src="https://img-blog.csdnimg.cn/20200305230625416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ul><li>④<br>  当下游的节点受到了上游的所有通道输入流的barrier后，就会执行它的checkpoint，将数据持久化。但是特别情况就是最后的Sink， sink 节点收集齐上游两个 input 的 barrier 之后，会执行本地快照，这里特地展示了 RocksDB incremental Checkpoint 的流程，首先 RocksDB 会全量刷数据到磁盘上（红色大三角表示），然后 Flink 框架会从中选择没有上传的文件进行持久化备份（紫色小三角）。<br><img src="https://img-blog.csdnimg.cn/20200305230718897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>⑤<br>  同样，sink的checkpoint完成之后，也会返回一个消息给Checkpoint Coordinator，告诉它随后一个已经完成了。<br><img src="https://img-blog.csdnimg.cn/20200305230958294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>⑥<br>  最后，JobManager的CheckPoint Coordinator接受到了最后一个state handle，就认为这一个CheckPointID已经全局完成了。向持久化存储中再备份一个 Checkpoint meta 文件。<br><img src="https://img-blog.csdnimg.cn/20200305231116810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul><h1 id="状态后端"><a href="#状态后端" class="headerlink" title="状态后端"></a>状态后端</h1><hr><p>前面讲了那么多的checkpoint，到底checkpoint文件存到哪里去了，这就是所谓的状态后端要做的了。这里只是稍微看看，以后再深入看看。</p><h3 id="MemoryStateBackend"><a href="#MemoryStateBackend" class="headerlink" title="MemoryStateBackend"></a>MemoryStateBackend</h3><p>这个是存储在内存中的，即在MemoryStateBackend内部，数据以java对象的方式存储在堆内存中，在 CheckPoint 时，State Backend 对状态进行快照，并将快照信息作为 CheckPoint 应答消息的一部分发送给 JobManager(master)，同时 JobManager 也将快照信息存储在堆内存中。</p><pre class=" language-java"><code class="language-java">设置为<span class="token boolean">false</span>就可以关闭异步快照   <span class="token keyword">new</span> <span class="token class-name">MemoryStateBackend</span><span class="token punctuation">(</span>MAX_MEM_STATE_SIZE<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>这种方法很明显，只适合本地测试，生产环境明显不实用</strong></p><h3 id="FsStateBackend"><a href="#FsStateBackend" class="headerlink" title="FsStateBackend"></a>FsStateBackend</h3><p>FsStateBackend 需要配置一个文件系统的 URL（类型、地址、路径），例如：”hdfs://namenode:40010/flink/checkpoints” 或 “file:///data/flink/checkpoints”。<br>FsStateBackend 将正在运行中的状态数据保存在 TaskManager 的内存中。CheckPoint 时，将状态快照写入到配置的文件系统目录中。 少量的元数据信息存储到 JobManager 的内存中（高可用模式下，将其写入到 CheckPoint 的元数据文件中）。其实就和上面的图差不多，只不过在高可用模式下元数据文件存在了也持久化了。</p><pre class=" language-java"><code class="language-java"><span class="token boolean">false</span>也可以关闭异步快照    <span class="token keyword">new</span> <span class="token class-name">FsStateBackend</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用场景L：</p><ul><li>状态比较大、窗口比较长、key/value 状态比较大的 Job。</li><li>所有高可用的场景。<h3 id="RocksDBStateBackend"><a href="#RocksDBStateBackend" class="headerlink" title="RocksDBStateBackend"></a>RocksDBStateBackend</h3></li></ul><p>RocksDBStateBackend 需要配置一个文件系统的 URL（类型、地址、路径），例如：”hdfs://namenode:40010/flink/checkpoints” 或<br>“file:///data/flink/checkpoints”。<br>感觉有点儿像上面的方式<br>但是RocksDBStateBackend 将正在运行中的状态数据保存在 RocksDB 数据库中，RocksDB 数据库默认将数据存储在 TaskManager 的数据目录。 CheckPoint 时，整个 RocksDB 数据库被 checkpoint 到配置的文件系统目录中。 少量的元数据信息存储到 JobManager 的内存中（高可用模式下，将其存储到 CheckPoint 的元数据文件中）。<br>使用场景：</p><ul><li>状态非常大、窗口非常长、key/value 状态非常大的 Job。</li><li>所有高可用的场景。</li></ul><hr><h1 id="一致性保证"><a href="#一致性保证" class="headerlink" title="一致性保证"></a>一致性保证</h1><hr><h2 id="数据处理语义"><a href="#数据处理语义" class="headerlink" title="数据处理语义"></a>数据处理语义</h2><h4 id="最多一次（At-most-once）："><a href="#最多一次（At-most-once）：" class="headerlink" title="最多一次（At-most-once）："></a>最多一次（At-most-once）：</h4><p>**它表现的是一种【尽力而为】的感觉，就是不管我的operator执行的怎么样，有没有失败，我都不会让我的上游去重新发数据过来，就让数据最多被处理一次，从而导致下游的operator可能根本处理不到这个数据。可见可靠性非常不好，但是性能又非常好对吧。<br><img src="https://img-blog.csdnimg.cn/20200306105400979.png" alt="在这里插入图片描述"></p><h4 id="至少一次（At-least-once）"><a href="#至少一次（At-least-once）" class="headerlink" title="至少一次（At-least-once）"></a>至少一次（At-least-once）</h4><p><strong>这个和上面的情况就是相反的，它特别犟，它一定让这个数据处理，如果处理过程中出现了差错，那么就会让这个operator的上游重新传过来，一直到成功为止。但是你可以看到，下面这种情况，有可能operator2在失败后，让operator重传，有可能第一次重传出现了延迟，而operator2这边可能有什么超时机制，导致再让operator1去重传，就有了第二次重传，结果第一次重传的数据过来了，进行处理，然后第二次数据也过来，又进行了处理，导致了处理了多次。</strong><br><img src="https://img-blog.csdnimg.cn/20200306105611733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="精确一次（Exactly-once）"><a href="#精确一次（Exactly-once）" class="headerlink" title="精确一次（Exactly-once）"></a>精确一次（Exactly-once）</h4><p><strong>这个就是最理想的状态，它能保证所有的数据恰好只处理一次。实现这种Exactly-once有两种方式：</strong></p><ul><li><strong>分布式快照+状态检查点checkpoint</strong></li><li><strong>上面的At-least-once+对重复数据去重</strong></li></ul><h5 id="分布式快照-状态检查点checkpoint"><a href="#分布式快照-状态检查点checkpoint" class="headerlink" title="分布式快照+状态检查点checkpoint"></a>分布式快照+状态检查点checkpoint</h5><p><strong>这个想必已经不用说了，很明显前面已经说的非常的清楚了。</strong><br><img src="https://img-blog.csdnimg.cn/20200306110252103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>**我们已经将s=4的情况持久化了，然后在s=12的时候出现了差错，这时候就将持久化存储的状态s=4恢复过来，然后恢复。即回滚到上一次完整的checkpoint</p><h5 id="对At-least-once数据进行去重"><a href="#对At-least-once数据进行去重" class="headerlink" title="对At-least-once数据进行去重"></a>对At-least-once数据进行去重</h5><p><strong>这个方式，就是和At-least-once是一样的，就是对重复发过来的数据进行去重。</strong><br><img src="https://img-blog.csdnimg.cn/20200306110624101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="精确一次真的是-精确一次-吗？？？？？？？"><a href="#精确一次真的是-精确一次-吗？？？？？？？" class="headerlink" title="精确一次真的是==精确一次==吗？？？？？？？"></a>精确一次真的是==精确一次==吗？？？？？？？</h5><p><strong>我们先来看个场景：分别对source来的数据进行偶数相加和奇数相加</strong></p><ul><li><strong>1⃣️：这个图表现的是一个正常的数据流，偶数流入到偶数的分区，奇数流入到奇数的分区。</strong><br><img src="https://img-blog.csdnimg.cn/2020030611110020.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><strong>2⃣️：这个JobManager发起了一个CheckPoint，发入所有的source。</strong><br><img src="https://img-blog.csdnimg.cn/20200306111109304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><strong>3⃣️：这时候也就正常的对source的3和4进行了持久化。然后每个checkpoint[2]就广播出去了，假如现在Sum odd完成了3+5=8，然后收入到两个checkpoint(分别来自两个上游)，这时候进行checkpoint，但是呢我们的另一个分区Sum even突然崩了，可是还没有进行checkpoint。这时候恢复到之前最完整的一次checkpoint，不是本次checkpoint，这里应该是回到了最初。然后又要从2开始传给下游。</strong></li><li><em>有人就有疑问了，这里明明数据重新传了，然后数据也重新处理了，这还是精确一次吗*</em><br><img src="https://img-blog.csdnimg.cn/20200306111125324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><em>其实这里不是用户逻辑上的处理一次，也就是说，我们这种流处理系统，尤其是真正的生产环境，不可能做到所有的机器都完好，总会要出现失败的情况，所以所谓的用户逻辑处理不可能只处理一次。*</em></li><li><em>这里的精确一次，是指有效一次，也可以是时间上的一次，有点儿像时间倒流的感觉，就好像什么都没有发生一样，比如我们的At-least-once，就没有“时光倒流”的感觉，它整个时间驱动是往前的，而Exactly-once通过分布式快照checkpoint，将整个流处理系统的状态恢复到最完整的一次，这样就像是时间倒流，时间重写，感觉这段时间什么都没有发生，然后从最完整的哪个状态数据继续发，继续处理，这样就当作的数据只处理一次。*</em></li><li><em>另一种理解方式就是有效一次，而且是持久化到状态后端的有效一次，这样就容易理解了。事件的处理可以发生多次，但是该处理的效果只在持久后端状态存储中反映一次。*</em></li></ul><h2 id="Flink实现Exactly-once"><a href="#Flink实现Exactly-once" class="headerlink" title="Flink实现Exactly-once"></a>Flink实现Exactly-once</h2><hr><h4 id="Flink只支持内部Exactly-once"><a href="#Flink只支持内部Exactly-once" class="headerlink" title="Flink只支持内部Exactly-once"></a>Flink只支持内部Exactly-once</h4><p>Flink有两种Exactly-once，一种是内部Exactly-once，另一种是source和sink的Exactly-once。为什么要这样分，因为前面所说的Checkpoint和分布式快照都只能实现内部的Exactly-once，并不能对外部的source和sink提供Exactly-once。比如，我们的数据写出到sink了，然后还没有做持久化，就突然出错，恢复时从上一次完整的checkpoint来恢复，这时候可见某些数据肯定又会要第二次写出到sink，而第一次写出到sink的数据可能被其他用户或者应用消费了，第二次又来重复数据，导致sink又重复消费这些数据，可见Flink只支持内部Exactly-once，外部的Exactly-once还是需要外部source和sink的支持。</p><h4 id="内部Exactly-once"><a href="#内部Exactly-once" class="headerlink" title="内部Exactly-once"></a>内部Exactly-once</h4><h4 id="外部Exactly-once"><a href="#外部Exactly-once" class="headerlink" title="外部Exactly-once"></a>外部Exactly-once</h4><h4 id="Flink实现End-To-End-Exactly-once"><a href="#Flink实现End-To-End-Exactly-once" class="headerlink" title="Flink实现End-To-End Exactly-once"></a>Flink实现End-To-End Exactly-once</h4>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 容错 </tag>
            
            <tag> 一致性原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker本地搭建Hadoop高可用,Hbase,Spark,Flink,Zookeeper集群</title>
      <link href="/2020/04/11/Docker%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAHadoop%E9%AB%98%E5%8F%AF%E7%94%A8,Hbase,Spark,Flink,Zookeeper%E9%9B%86%E7%BE%A4/"/>
      <url>/2020/04/11/Docker%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAHadoop%E9%AB%98%E5%8F%AF%E7%94%A8,Hbase,Spark,Flink,Zookeeper%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><hr><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h5 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装 Docker</span>$ yum -y <span class="token function">install</span> docker<span class="token comment" spellcheck="true">#启动 Docker 后台服务</span>$ <span class="token function">service</span> docker start</code></pre><h5 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum update$ curl -fsSL https://get.docker.com -o get-docker.sh<span class="token comment" spellcheck="true"># 执行这个脚本会添加 docker.repo 源并安装 Docker。</span>$ <span class="token function">sudo</span> sh get-docker.sh</code></pre><hr><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取脚本</span>$ curl -L https://github.com/docker/compose/releases/download/1.25.0-rc2/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> -o /usr/local/bin/docker-compose<span class="token comment" spellcheck="true"># 赋予执行权限</span><span class="token variable">$chmod</span> +x /usr/local/bin/docker-compose</code></pre><hr><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>打开/创建 /etc/docker/daemon.json 文件，添加以下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><hr><h3 id="搭建基本容器镜像"><a href="#搭建基本容器镜像" class="headerlink" title="搭建基本容器镜像"></a>搭建基本容器镜像</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#镜像拉取</span>docker pull centos7<span class="token comment" spellcheck="true">#创建一个容器，作为基础容器，后期制作为镜像</span>docker run -it --name hadoopimages centos /bin/bash<span class="token comment" spellcheck="true">#将scala和jdk的包拷贝到容器里</span>docker <span class="token function">cp</span> scala-2.11.12.tgz hadoopimages:/docker <span class="token function">cp</span> jdk-8u201-linux-x64.tar.gz hadoopimages:/<span class="token comment" spellcheck="true">#进入容器</span>docker <span class="token function">exec</span> -it hadoopimages /bin/bash</code></pre><p><strong>然后将jdk和scala上传到docker</strong><br><img src="https://img-blog.csdnimg.cn/20200401222511141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="配置JAVA环境变量"><a href="#配置JAVA环境变量" class="headerlink" title="配置JAVA环境变量"></a>配置JAVA环境变量</h5><p><img src="https://img-blog.csdnimg.cn/20200401223452920.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200401224740669.png" alt="在这里插入图片描述"><br><strong>小问题：这里可能会有退出容器后环境变量失效的问题，可以将环境变量配置在～/.bashrc文件或者使用DockerFile方式</strong></p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> net-toolsyum <span class="token function">install</span> openssh-serveryum -y <span class="token function">install</span> openssh-clients</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#提交容器为镜像</span><span class="token comment" spellcheck="true">#docker commit 容器名字或者id 自己要定义的镜像名</span>docker commit hadoopimages hadoop<span class="token comment" spellcheck="true">#查看一下镜像</span>docker images</code></pre><p><img src="https://img-blog.csdnimg.cn/20200402094845665.png" alt="在这里插入图片描述"></p><h3 id="创建网络bigdata，供各种大数据应用共同一个网络"><a href="#创建网络bigdata，供各种大数据应用共同一个网络" class="headerlink" title="创建网络bigdata，供各种大数据应用共同一个网络"></a>创建网络bigdata，供各种大数据应用共同一个网络</h3><p><strong>这里指定的是172.25.0.0/16子网，注意不要和自己的其他子网相冲突，以免一些不必要的麻烦</strong></p><pre class=" language-bash"><code class="language-bash">docker network create --driver bridge --subnet 172.25.0.0/16 --gateway 172.25.0.1 bigdata</code></pre><hr><h1 id="Zookeeper搭建"><a href="#Zookeeper搭建" class="headerlink" title="Zookeeper搭建"></a>Zookeeper搭建</h1><hr><h5 id="拉取zookeeper镜像"><a href="#拉取zookeeper镜像" class="headerlink" title="拉取zookeeper镜像"></a>拉取zookeeper镜像</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#选取自己合适的镜像即可</span>docker pull zookeeper:3.4.13</code></pre><h4 id="使用docker-compose创建三个zookeeper容器"><a href="#使用docker-compose创建三个zookeeper容器" class="headerlink" title="使用docker-compose创建三个zookeeper容器"></a>使用docker-compose创建三个zookeeper容器</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">zoo1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>3.4.13 <span class="token comment" spellcheck="true"># 镜像名称</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment" spellcheck="true"># 当发生错误时自动重启</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo1    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 端口</span>      <span class="token punctuation">-</span> 2181<span class="token punctuation">:</span><span class="token number">2181</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 挂载数据卷</span>      <span class="token punctuation">-</span> ./zoo1/data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./zoo1/datalog<span class="token punctuation">:</span>/datalog    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true"># 节点ID</span>      <span class="token key atrule">ZOO_PORT</span><span class="token punctuation">:</span> <span class="token number">2181 </span><span class="token comment" spellcheck="true"># zookeeper端口号</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span><span class="token number">3888 </span><span class="token comment" spellcheck="true"># zookeeper节点列表</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.11  <span class="token key atrule">zoo2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>3.4.13    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo2    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo2    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 2182<span class="token punctuation">:</span><span class="token number">2181</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./zoo2/data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./zoo2/datalog<span class="token punctuation">:</span>/datalog    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">ZOO_PORT</span><span class="token punctuation">:</span> <span class="token number">2181</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span><span class="token number">3888</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.12  <span class="token key atrule">zoo3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>3.4.13    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo3    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo3    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> 2183<span class="token punctuation">:</span><span class="token number">2181</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./zoo3/data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./zoo3/datalog<span class="token punctuation">:</span>/datalog    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">ZOO_PORT</span><span class="token punctuation">:</span> <span class="token number">2181</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span><span class="token number">3888</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.13<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> bigdata</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#运行命令</span>docker-compose up -d➜  zookeeper docker-compose up -dRecreating 44dad6cddccd_zoo1 <span class="token punctuation">..</span>. <span class="token keyword">done</span>Recreating 9b0f2cfe666f_zoo3 <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating zoo2                <span class="token punctuation">..</span>. <span class="token keyword">done</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200401232922755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200401231813368.png" alt="在这里插入图片描述"></p><hr><h1 id="Kafka集群搭建"><a href="#Kafka集群搭建" class="headerlink" title="Kafka集群搭建"></a>Kafka集群搭建</h1><hr><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#拉取Kafka镜像和kafka-manager镜像</span>docker pull wurstmeister/kafka:2.12-2.3.1docker pull sheepkiller/kafka-manager</code></pre><h5 id="编辑docker-compose-yml文件"><a href="#编辑docker-compose-yml文件" class="headerlink" title="编辑docker-compose.yml文件"></a>编辑docker-compose.yml文件</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">broker1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka<span class="token punctuation">:</span>2.12<span class="token punctuation">-</span>2.3.1    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token comment" spellcheck="true"># 出现错误时自动重启</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> broker1<span class="token comment" spellcheck="true"># 节点主机</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> broker1 <span class="token comment" spellcheck="true"># 节点名称</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 可以在容器里面使用一些权限</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9091:9092"</span>   <span class="token comment" spellcheck="true"># 将容器的9092端口映射到宿主机的9091端口上</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//broker1<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//broker1<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> broker1      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9092</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> zoo1<span class="token punctuation">:</span>2181/kafka1<span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span>2181/kafka1<span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span>2181/kafka1      <span class="token key atrule">JMX_PORT</span><span class="token punctuation">:</span> <span class="token number">9988   </span><span class="token comment" spellcheck="true"># 负责kafkaManager的端口JMX通信</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock      <span class="token punctuation">-</span> ./broker1<span class="token punctuation">:</span>/kafka/kafka\<span class="token punctuation">-</span>logs\<span class="token punctuation">-</span>broker1    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> zoo1    <span class="token punctuation">-</span> zoo2    <span class="token punctuation">-</span> zoo3    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.14  <span class="token key atrule">broker2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka<span class="token punctuation">:</span>2.12<span class="token punctuation">-</span>2.3.1    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> broker2    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> broker2    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9092:9092"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">KAFKA_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//broker2<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//broker2<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> broker2      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9092</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> zoo1<span class="token punctuation">:</span>2181/kafka1<span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span>2181/kafka1<span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span>2181/kafka1      <span class="token key atrule">JMX_PORT</span><span class="token punctuation">:</span> <span class="token number">9988</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock      <span class="token punctuation">-</span> ./broker2<span class="token punctuation">:</span>/kafka/kafka\<span class="token punctuation">-</span>logs\<span class="token punctuation">-</span>broker2    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 连接本compose文件以外的container</span>    <span class="token punctuation">-</span> zoo1    <span class="token punctuation">-</span> zoo2    <span class="token punctuation">-</span> zoo3    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.15<span class="token key atrule">broker3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka<span class="token punctuation">:</span>2.12<span class="token punctuation">-</span>2.3.1    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> broker3    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> broker3    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9093:9092"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">KAFKA_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//broker3<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//broker3<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> broker3      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9092</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> zoo1<span class="token punctuation">:</span>2181/kafka1<span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span>2181/kafka1<span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span>2181/kafka1      <span class="token key atrule">JMX_PORT</span><span class="token punctuation">:</span> <span class="token number">9988</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock      <span class="token punctuation">-</span> ./broker3<span class="token punctuation">:</span>/kafka/kafka\<span class="token punctuation">-</span>logs\<span class="token punctuation">-</span>broker3    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 连接本compose文件以外的container</span>    <span class="token punctuation">-</span> zoo1    <span class="token punctuation">-</span> zoo2    <span class="token punctuation">-</span> zoo3    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.16<span class="token key atrule">kafka-manager</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> sheepkiller/kafka<span class="token punctuation">-</span>manager<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>manager    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>manager    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9000:9000"</span>    <span class="token key atrule">links</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 连接本compose文件创建的container</span>      <span class="token punctuation">-</span> broker1      <span class="token punctuation">-</span> broker2      <span class="token punctuation">-</span> broker3    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 连接本compose文件以外的container</span>      <span class="token punctuation">-</span> zoo1      <span class="token punctuation">-</span> zoo2      <span class="token punctuation">-</span> zoo3    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZK_HOSTS</span><span class="token punctuation">:</span> zoo1<span class="token punctuation">:</span>2181/kafka1<span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span>2181/kafka1<span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span>2181/kafka1      <span class="token key atrule">KAFKA_BROKERS</span><span class="token punctuation">:</span> broker1<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>broker2<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>broker3<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">APPLICATION_SECRET</span><span class="token punctuation">:</span> letmein      <span class="token key atrule">KM_ARGS</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>Djava.net.preferIPv4Stack=true    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.10<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 使用已创建的网络</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> bigdata</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#运行命令</span>docker-compose up -d</code></pre><p><img src="https://img-blog.csdnimg.cn/20200401235440792.png" alt="在这里插入图片描述"><br>**看看本地端口9000也确实起来了<br><img src="https://img-blog.csdnimg.cn/20200401235459198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401235732298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="Hadoop高可用集群搭建"><a href="#Hadoop高可用集群搭建" class="headerlink" title="Hadoop高可用集群搭建"></a>Hadoop高可用集群搭建</h1><hr><h3 id="docker-compose创建集群"><a href="#docker-compose创建集群" class="headerlink" title="docker-compose创建集群"></a>docker-compose创建集群</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> hadoop<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token comment" spellcheck="true"># 出现错误时自动重启</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> master<span class="token comment" spellcheck="true"># 节点主机</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true"># 节点名称</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 可以在容器里面使用一些权限</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.3  <span class="token key atrule">master_standby</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> hadoop<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> master_standby    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> master_standby    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.4  <span class="token key atrule">slave01</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> hadoop<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> slave01    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> slave01    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.5  <span class="token key atrule">slave02</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> hadoop<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> slave02    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> slave02    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.6  <span class="token key atrule">slave03</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> hadoop<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> slave03    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> slave03    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.25.0.7</code></pre><h3 id="命令行方式创建"><a href="#命令行方式创建" class="headerlink" title="命令行方式创建"></a>命令行方式创建</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建一个master节点</span>docker run -tid --name master --privileged<span class="token operator">=</span>true hadoop:latest /usr/sbin/init<span class="token comment" spellcheck="true">#创建热备master_standby节点</span>docker run -tid --name master_standby --privileged<span class="token operator">=</span>true hadoop:latest /usr/sbin/init<span class="token comment" spellcheck="true">#创建三个slave</span>docker run -tid --name slave01 --privileged<span class="token operator">=</span>true hadoop:latest /usr/sbin/initdocker run -tid --name slave02 --privileged<span class="token operator">=</span>true hadoop:latest /usr/sbin/initdocker run -tid --name slave03 --privileged<span class="token operator">=</span>true hadoop:latest /usr/sbin/init</code></pre><h3 id="给每台节点配置免密码登陆"><a href="#给每台节点配置免密码登陆" class="headerlink" title="给每台节点配置免密码登陆"></a>给每台节点配置免密码登陆</h3><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa<span class="token comment" spellcheck="true">#然后不断会车，最终如下图所示</span><span class="token comment" spellcheck="true">#每台机器都是如此</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402095727572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="将各自的公钥传到每台机器authorized-keys里面"><a href="#将各自的公钥传到每台机器authorized-keys里面" class="headerlink" title="将各自的公钥传到每台机器authorized_keys里面"></a>将各自的公钥传到每台机器authorized_keys里面</h5><p><strong>这里有个小问题：先检查安装了passwd没有，如果没有执行以下命令：</strong></p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">passwd</span><span class="token comment" spellcheck="true">#然后设置密码</span><span class="token function">passwd</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402103504856.png" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#一台机器的公钥都要弄到自己和其他机器的authorized_keys</span><span class="token comment" spellcheck="true">#以免以后安装其他东西减少不必要的麻烦</span><span class="token function">cat</span> id_rsa.pub <span class="token operator">>></span> .ssh/authorized_keys</code></pre><h5 id="编辑-etc-hosts"><a href="#编辑-etc-hosts" class="headerlink" title="编辑/etc/hosts"></a>编辑/etc/hosts</h5><p><strong>注意：这里的master_standby可能不允许带下划线，有的机器在hdfs格式化的时候会不合法，所以你配置最后不要带特殊字符</strong><br><img src="https://img-blog.csdnimg.cn/20200402104555308.png" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#将/etc/hosts复制到每台节点</span><span class="token function">scp</span> /etc/hosts master_standby:/etc/<span class="token function">scp</span> /etc/hosts slave01:/etc/<span class="token function">scp</span> /etc/hosts slave02:/etc/<span class="token function">scp</span> /etc/hosts slave03:/etc/</code></pre><h3 id="配置Hadoop"><a href="#配置Hadoop" class="headerlink" title="配置Hadoop"></a>配置Hadoop</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#解压hadoop包</span><span class="token function">tar</span> -zxvf hadoop-2.8.5.tar.gz</code></pre><h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#配置环境变量</span>vim ~/.bashrc<span class="token comment" spellcheck="true">#添加以下内容</span><span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/usr/local/hadoop-2.8.5<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$HADOOP_HOME</span>/lib:<span class="token variable">$CLASSPATH</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HADOOP_HOME</span>/bin<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HADOOP_HOME</span>/sbin<span class="token function">export</span> HADOOP_MAPRED_HOME<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token function">export</span> HADOOP_COMMON_HOME<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token function">export</span> HADOOP_HDFS_HOME<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token function">export</span> YARN_HOME<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token function">export</span> HADOOP_ROOT_LOGGER<span class="token operator">=</span>INFO,console<span class="token function">export</span> HADOOP_COMMON_LIB_NATIVE_DIR<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/lib/native<span class="token function">export</span> HADOOP_OPTS<span class="token operator">=</span><span class="token string">"-Djava.library.path=<span class="token variable">$HADOOP_HOME</span>/lib"</span><span class="token comment" spellcheck="true">#将这个文件拷到其他机器的下面</span><span class="token function">scp</span> ~/.bashrc 机器名字:~/<span class="token comment" spellcheck="true">#hadoop命令验证一下</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402105641627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p><strong>hdfs-site.xml</strong></p><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> same with core<span class="token punctuation">-</span>site.xml<span class="token punctuation">:</span>defaultFS<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>dfs.nameservices&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>mycluster&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> two NameNode<span class="token punctuation">,</span>nn1 and nn2<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>dfs.ha.namenodes.mycluster&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>nn1<span class="token punctuation">,</span>nn2&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> mycluster.nn1 Namenode's RPC Address<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.namenode.rpc<span class="token punctuation">-</span>address.mycluster.nn1&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>master<span class="token punctuation">:</span>9000&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> mycluster.nn1 Namenode's Http Address<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.namenode.http<span class="token punctuation">-</span>address.mycluster.nn1&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>master<span class="token punctuation">:</span>50070&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> mycluster.nn2 Namenode's RPC Address<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.namenode.rpc<span class="token punctuation">-</span>address.mycluster.nn2&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>master_standby<span class="token punctuation">:</span>9000&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> mycluster.nn2 Namenode's Http Address<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.namenode.http<span class="token punctuation">-</span>address.mycluster.nn2&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>master_standby<span class="token punctuation">:</span>50070&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> where the NameNode's metadata store in JournalNodes <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.namenode.shared.edits.dir&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>qjournal<span class="token punctuation">:</span>//slave01<span class="token punctuation">:</span>8485;slave02<span class="token punctuation">:</span>8485;slave03<span class="token punctuation">:</span>8485/mycluster&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> where Journaldata store in its disk<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.journalnode.edits.dir&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>/usr/local/hadoop<span class="token punctuation">-</span>2.8.5/journaldata&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> open automatic<span class="token punctuation">-</span>failover when fail<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.ha.automatic<span class="token punctuation">-</span>failover.enabled&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>true&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> the way when fail  <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.client.failover.proxy.provider.mycluster&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> set the methods which disdancy<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.ha.fencing.methods&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>sshfence&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.ha.fencing.ssh.private<span class="token punctuation">-</span>key<span class="token punctuation">-</span>files&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>/root/.ssh/id_rsa&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>dfs.ha.fencing.ssh.connect<span class="token punctuation">-</span>timeout&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>30000&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;/configuration<span class="token punctuation">></span></code></pre><p><strong>core-site.xml</strong></p><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>fs.defaultFS&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>hdfs<span class="token punctuation">:</span>//mycluster&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>hadoop.tmp.dir&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>/usr/local/hadoop<span class="token punctuation">-</span>2.8.5/tmp&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;property<span class="token punctuation">></span>&lt;name<span class="token punctuation">></span>ha.zookeeper.quorum&lt;/name<span class="token punctuation">></span>&lt;value<span class="token punctuation">></span>zoo1<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span>2181&lt;/value<span class="token punctuation">></span>&lt;/property<span class="token punctuation">></span>&lt;/configuration<span class="token punctuation">></span></code></pre><p><strong>yarn-site.xml</strong></p><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> Site specific YARN configuration properties <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">   &lt;!--  open the yarn HA-->    &lt;property>        &lt;name>yarn.resourcemanager.ha.enabled&lt;/name>        &lt;value>true&lt;/value>    &lt;/property></span>&lt;<span class="token tag">!--</span> RM's cluster id<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">    &lt;property>        &lt;name>yarn.resourcemanager.cluster-id&lt;/name>        &lt;value>mycluster&lt;/value>    &lt;/property></span>    &lt;<span class="token tag">!--</span> Rm's name<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">    &lt;property>        &lt;name>yarn.resourcemanager.ha.rm-ids&lt;/name>        &lt;value>rm1,rm2&lt;/value>    &lt;/property></span>    &lt;<span class="token tag">!--</span> RM1's address<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">    &lt;property>        &lt;name>yarn.resourcemanager.hostname.rm1&lt;/name>        &lt;value>master&lt;/value>    &lt;/property>    &lt;!-- RM2's address-->    &lt;property>        &lt;name>yarn.resourcemanager.hostname.rm2&lt;/name>        &lt;value>master_standby&lt;/value>    &lt;/property></span>    &lt;<span class="token tag">!--</span> zookeeper cluster address<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">    &lt;property>        &lt;name>yarn.resourcemanager.zk-address&lt;/name>        &lt;value>zoo1:2181,zoo2:2181,zoo3:2181&lt;/value>    &lt;/property></span>    &lt;<span class="token tag">!--</span> mapreduce<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">    &lt;property>        &lt;name>yarn.nodemanager.aux-services&lt;/name>        &lt;value>mapreduce_shuffle&lt;/value>    &lt;/property></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>yarn.log<span class="token punctuation">-</span>aggregation<span class="token punctuation">-</span>enable&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>true&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>&lt;<span class="token tag">!--</span> open RM restart<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>            &lt;name<span class="token punctuation">></span>yarn.resourcemanager.webapp.address.rm1&lt;/name<span class="token punctuation">></span>            &lt;value<span class="token punctuation">></span>master<span class="token punctuation">:</span>8001&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>            &lt;name<span class="token punctuation">></span>yarn.resourcemanager.webapp.address.rm2&lt;/name<span class="token punctuation">></span>            &lt;value<span class="token punctuation">></span>master_standby<span class="token punctuation">:</span>8001&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>    &lt;<span class="token tag">!--</span> RM1 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">    &lt;property>            &lt;name>yarn.resourcemanager.scheduler.address.rm1&lt;/name>            &lt;value>master:8030&lt;/value>    &lt;/property>    &lt;property>            &lt;name>yarn.resourcemanager.resource-tracker.address.rm1&lt;/name>            &lt;value>master:8031&lt;/value>    &lt;/property>    &lt;property>            &lt;name>yarn.resourcemanager.address.rm1&lt;/name>            &lt;value>master:8032&lt;/value>    &lt;/property>    &lt;property>            &lt;name>yarn.resourcemanager.admin.address.rm1&lt;/name>            &lt;value>master:8033&lt;/value>    &lt;/property>    &lt;!-- RM2 -->    &lt;property>            &lt;name>yarn.resourcemanager.scheduler.address.rm2&lt;/name>            &lt;value>master_standby:8030&lt;/value>    &lt;/property>    &lt;property>            &lt;name>yarn.resourcemanager.resource-tracker.address.rm2&lt;/name>            &lt;value>master_standby:8031&lt;/value>    &lt;/property>    &lt;property>            &lt;name>yarn.resourcemanager.address.rm2&lt;/name>            &lt;value>master_standby:8032&lt;/value>    &lt;/property>    &lt;property>            &lt;name>yarn.resourcemanager.admin.address.rm2&lt;/name>            &lt;value>master_standby:8033&lt;/value>    &lt;/property>    &lt;!-- YARN ?~[~F群?~Z~D?~A~Z?~P~H?~W??~W?~\~@?~U??~]?~U~Y?~W??~U? -->    &lt;property>        &lt;name>yarn.log-aggregation.retain-seconds&lt;/name>        &lt;!--1天-->        &lt;value>86400&lt;/value>    &lt;/property></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>yarn.resourcemanager.recovery.enabled&lt;/name<span class="token punctuation">></span>    &lt;value<span class="token punctuation">></span>true&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>yarn.resourcemanager.store.class&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>&lt;/configuration<span class="token punctuation">></span></code></pre><p><strong>mapred-site.xml</strong></p><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>        &lt;property<span class="token punctuation">></span>                &lt;name<span class="token punctuation">></span>mapreduce.framework.name&lt;/name<span class="token punctuation">></span>                &lt;value<span class="token punctuation">></span>yarn&lt;/value<span class="token punctuation">></span>        &lt;/property<span class="token punctuation">></span>        &lt;property<span class="token punctuation">></span>                &lt;name<span class="token punctuation">></span>mapreduce.jobhistory.address&lt;/name<span class="token punctuation">></span>                &lt;value<span class="token punctuation">></span>master<span class="token punctuation">:</span>10020&lt;/value<span class="token punctuation">></span>        &lt;/property<span class="token punctuation">></span>        &lt;property<span class="token punctuation">></span>                 &lt;name<span class="token punctuation">></span>mapreduce.jobhistory.webapp.address&lt;/name<span class="token punctuation">></span>                 &lt;value<span class="token punctuation">></span>master<span class="token punctuation">:</span>19888&lt;/value<span class="token punctuation">></span>        &lt;/property<span class="token punctuation">></span>&lt;/configuration<span class="token punctuation">></span></code></pre><p><strong>slaves</strong></p><pre class=" language-bash"><code class="language-bash">slave01slave02slave03~      </code></pre><p><strong>将配置文件分发到其他的每个节点</strong></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#在三台slave上执行</span>sbin/hadoop-daemon.sh start journalnode<span class="token comment" spellcheck="true">#在master执行hdfs格式化</span>bin/hdfs namenode -format<span class="token comment" spellcheck="true">#在masterstandby上执行来同步元数据</span><span class="token comment" spellcheck="true">#或者直接拷贝过去scp -r /usr/local/hadoop-2.8.5/tmp masterstandby:/usr/local/hadoop-2.8.5</span>hdfs namenode -bootstrapStandby<span class="token comment" spellcheck="true">#格式化zk</span>bin/hdfs zkfc -formatZK<span class="token comment" spellcheck="true">#之后启动hdfs</span>sbin/start-hdfs.sh<span class="token comment" spellcheck="true">#启动yarn</span>sbin/start-yarn.sh</code></pre><p><strong>master进程</strong><br><img src="https://img-blog.csdnimg.cn/20200402133900388.png" alt="在这里插入图片描述"><br><strong>masterstandby进程</strong><br><img src="https://img-blog.csdnimg.cn/2020040213400653.png" alt="在这里插入图片描述"><br><strong>slave进程</strong><br><img src="https://img-blog.csdnimg.cn/20200402134037348.png" alt="在这里插入图片描述"></p><h2 id="Spark集群搭建"><a href="#Spark集群搭建" class="headerlink" title="Spark集群搭建"></a>Spark集群搭建</h2><h2 id="Flink集群搭建"><a href="#Flink集群搭建" class="headerlink" title="Flink集群搭建"></a>Flink集群搭建</h2><h2 id="Flink集群搭建-1"><a href="#Flink集群搭建-1" class="headerlink" title="Flink集群搭建"></a>Flink集群搭建</h2>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> Flink </tag>
            
            <tag> Spark </tag>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM:Garbage Collection GC</title>
      <link href="/2020/04/08/JVM%EF%BC%9AGarbage%20Collection%20GC/"/>
      <url>/2020/04/08/JVM%EF%BC%9AGarbage%20Collection%20GC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020030221423751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="Garbage Collection GC"></p><h6 id="不管去哪里，都要记得这个图咯。今天重点看看GC垃圾回收是怎么搞的😄😄😄"><a href="#不管去哪里，都要记得这个图咯。今天重点看看GC垃圾回收是怎么搞的😄😄😄" class="headerlink" title="不管去哪里，都要记得这个图咯。今天重点看看GC垃圾回收是怎么搞的😄😄😄"></a>不管去哪里，都要记得这个图咯。今天重点看看GC垃圾回收是怎么搞的😄😄😄</h6><h6 id="由于回收的主要区域是堆内存，我们需要重新看看堆内存到底是怎么样子的"><a href="#由于回收的主要区域是堆内存，我们需要重新看看堆内存到底是怎么样子的" class="headerlink" title="由于回收的主要区域是堆内存，我们需要重新看看堆内存到底是怎么样子的"></a>由于回收的主要区域是堆内存，我们需要重新看看堆内存到底是怎么样子的</h6><h2 id="堆内存🌲"><a href="#堆内存🌲" class="headerlink" title="堆内存🌲"></a>堆内存🌲</h2><hr><p><img src="https://img-blog.csdnimg.cn/20200303102512322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>Young Generation Survivor Space：新生代，包括了Eden Space ，S0，S1区域</strong><br>💰<strong>Eden Space：最开始的对象都分配在这里，静静等待着垃圾回收</strong><br>💰<strong>S0：即Survivor0 space，当Eden Space垃圾回收后存活的对象放到这里来</strong><br>💰<strong>S1：当S0区域的对象逃过了GC的魔掌就会移到S1区域</strong></li><li><strong>Old Generation tenured：老年代，或者旧生代，主要是Young Generation的对象还没有被回收就会移到这个老年代来了。</strong></li><li><strong>Permanent Generation：俗称永久代，JDK1.8里面已经把它从堆区域移除了，成为了方法区，用来存储常量，类信息等等</strong></li></ul><h2 id="垃圾回收流程📖"><a href="#垃圾回收流程📖" class="headerlink" title="垃圾回收流程📖"></a>垃圾回收流程📖</h2><hr><p><img src="https://img-blog.csdnimg.cn/20200303103228172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="这个就和上面介绍的差不多，总之就是Eden-gt-S0-gt-S1-gt-Tenured"><a href="#这个就和上面介绍的差不多，总之就是Eden-gt-S0-gt-S1-gt-Tenured" class="headerlink" title="这个就和上面介绍的差不多，总之就是Eden-&gt;S0-&gt;S1-&gt;Tenured"></a>这个就和上面介绍的差不多，总之就是Eden-&gt;S0-&gt;S1-&gt;Tenured</h6><h6 id="说的那么多，好像说的那么爽，结果没有一个点能够卡得上，到底什么是垃圾啊"><a href="#说的那么多，好像说的那么爽，结果没有一个点能够卡得上，到底什么是垃圾啊" class="headerlink" title="说的那么多，好像说的那么爽，结果没有一个点能够卡得上，到底什么是垃圾啊"></a>说的那么多，好像说的那么爽，结果没有一个点能够卡得上，到底什么是垃圾啊</h6><h2 id="什么是垃圾👀"><a href="#什么是垃圾👀" class="headerlink" title="什么是垃圾👀"></a>什么是垃圾👀</h2><hr><h6 id="主要有两种方式来判别是不是垃圾：引用计数法和可达性分析。java采用了可达性分析法"><a href="#主要有两种方式来判别是不是垃圾：引用计数法和可达性分析。java采用了可达性分析法" class="headerlink" title="主要有两种方式来判别是不是垃圾：引用计数法和可达性分析。java采用了可达性分析法"></a>主要有两种方式来判别是不是垃圾：引用计数法和可达性分析。java采用了可达性分析法</h6><h5 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h5><blockquote><p><strong>引用计数法：引用计数算法是垃圾回收器中的早起策略，在这种方法中，堆中的每个对象实例都有一个引用计数器，点一个对象被创建时，且该对象实例分配给一个变量，该变量计数设置为1 ，当任何其他变量赋值为这个对象的引用时，计数加1 ，（a=b ，则b引用的对象实例计数器+1）但当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的引用计数器减1，任何引用计数器为0 的对象实例可以当做垃圾收集。 当一个对象的实例被垃圾收集是，它引用的任何对象实例的引用计数器减1.</strong><br><strong>但是呢，引用计数有个致命的问题，就是不能解决循环引用的实例，比如A引用了B，B引用了A，连个计数永远不为0，那么两个对象永远不会回收</strong></p></blockquote><h5 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h5><blockquote><p><strong>可达性分析：这是java里面采用的方法。该方法的基本思想是通过一系列的“GC Roots”对象作为起点进行搜索，如果在“GC Roots”和一个对象之间没有可达路径，则称该对象是不可达的，不过要注意的是被判定为不可达的对象不一定就会成为可回收对象。被判定为不可达的对象要成为可回收对象必须至少经历两次标记过程，如果在这两次标记过程中仍然没有逃脱成为可回收对象的可能性，则基本上就真的成为可回收对象了。</strong><br><img src="https://img-blog.csdnimg.cn/20200303104326976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>呐，就从这个图的GC Root开始找，根据离散数学里面的图一样，有很多的GC Root</strong><br><strong>GC Root:</strong><br>1.虚拟机栈中引用的对象（本地变量表）<br>2.方法区中静态属性引用的对象<br>3. 方法区中常量引用的对象<br>4.本地方法栈中引用的对象（Native对象）</p></blockquote><h6 id="关于这种引用有四种，强引用，软引用，弱引用，虚引用"><a href="#关于这种引用有四种，强引用，软引用，弱引用，虚引用" class="headerlink" title="关于这种引用有四种，强引用，软引用，弱引用，虚引用"></a>关于这种引用有四种，强引用，软引用，弱引用，虚引用</h6><p><strong>强引用：</strong> 是java中最强的引用，可以直接访问指向的对象，有点儿像C里面的指针，但是它宁愿抛出OOM，也不愿意去回收，所以可能会导致内存泄露。<br><strong>软引用：</strong> 仅次于强引用，当内存资源使用紧张时才会去回收<br><strong>弱引用：</strong> 弱引用是一种比软引用较弱的引用类型。在系统GC时，只要发现弱引用，不管系统堆空间是否足够，都会将对象进行回收。在java中，可以用java.lang.ref.WeakReference实例来保存对一个Java对象的弱引用。<br><strong>虚引用：</strong> 当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，销毁这个对象，将这个虚引用加入引用队列。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><h3 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h3><hr><p><img src="https://img-blog.csdnimg.cn/20200302214349191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020030221440348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>引用了别人的图片：<a href="https://www.cnblogs.com/Smina/p/7189427.html" target="_blank" rel="noopener">看看</a></p><p><img src="https://img-blog.csdnimg.cn/20200303105931745.jpeg" alt="在这里插入图片描述"></p><h2 id="垃圾回收算法🦢"><a href="#垃圾回收算法🦢" class="headerlink" title="垃圾回收算法🦢"></a>垃圾回收算法🦢</h2><hr><h4 id="1⃣️-Mark-Sweep（标记-清除）算法"><a href="#1⃣️-Mark-Sweep（标记-清除）算法" class="headerlink" title="1⃣️.Mark-Sweep（标记-清除）算法"></a>1⃣️.Mark-Sweep（标记-清除）算法</h4><p><img src="https://img-blog.csdnimg.cn/20200303110050544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="分为了两个阶段：第一个阶段就是将要回收的对象标记。第二个阶段就是将标记的对象回收。看似很简单，但是很大的问题，就是内存碎片了。"><a href="#分为了两个阶段：第一个阶段就是将要回收的对象标记。第二个阶段就是将标记的对象回收。看似很简单，但是很大的问题，就是内存碎片了。" class="headerlink" title="分为了两个阶段：第一个阶段就是将要回收的对象标记。第二个阶段就是将标记的对象回收。看似很简单，但是很大的问题，就是内存碎片了。"></a>分为了两个阶段：第一个阶段就是将要回收的对象标记。第二个阶段就是将标记的对象回收。看似很简单，但是很大的问题，就是内存碎片了。</h6><p><img src="https://img-blog.csdnimg.cn/20200303110209118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2⃣️-Copying（复制）算法"><a href="#2⃣️-Copying（复制）算法" class="headerlink" title="　2⃣️.Copying（复制）算法"></a>　2⃣️.Copying（复制）算法</h4><h6 id="可以说，是为了解决上面的内存碎片的问题把。把堆内存分成了两部分，一部分是分配对象，另一部分留着复制。当要回收的时候，先将还存活的对象复制到另一半，然后一次性清除原来的一半。但是呢，这样我们能够使用的内存就只有一半了，另一半根本使用不了，只能留着复制，而且每次复制都移动那么多对象，效率明显会下降。"><a href="#可以说，是为了解决上面的内存碎片的问题把。把堆内存分成了两部分，一部分是分配对象，另一部分留着复制。当要回收的时候，先将还存活的对象复制到另一半，然后一次性清除原来的一半。但是呢，这样我们能够使用的内存就只有一半了，另一半根本使用不了，只能留着复制，而且每次复制都移动那么多对象，效率明显会下降。" class="headerlink" title="可以说，是为了解决上面的内存碎片的问题把。把堆内存分成了两部分，一部分是分配对象，另一部分留着复制。当要回收的时候，先将还存活的对象复制到另一半，然后一次性清除原来的一半。但是呢，这样我们能够使用的内存就只有一半了，另一半根本使用不了，只能留着复制，而且每次复制都移动那么多对象，效率明显会下降。"></a>可以说，是为了解决上面的内存碎片的问题把。把堆内存分成了两部分，一部分是分配对象，另一部分留着复制。当要回收的时候，先将还存活的对象复制到另一半，然后一次性清除原来的一半。但是呢，这样我们能够使用的内存就只有一半了，另一半根本使用不了，只能留着复制，而且每次复制都移动那么多对象，效率明显会下降。</h6><p><img src="https://img-blog.csdnimg.cn/20200303110406686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3⃣️-Mark-Compact（标记-整理）算法"><a href="#3⃣️-Mark-Compact（标记-整理）算法" class="headerlink" title="3⃣️.Mark-Compact（标记-整理）算法"></a>3⃣️.Mark-Compact（标记-整理）算法</h4><h6 id="这个方法是为了解决Copy算法内存使用问题，它是进行垃圾回收后，再把存活的对象往一边移动，这样子就可以使用整个内存了"><a href="#这个方法是为了解决Copy算法内存使用问题，它是进行垃圾回收后，再把存活的对象往一边移动，这样子就可以使用整个内存了" class="headerlink" title="这个方法是为了解决Copy算法内存使用问题，它是进行垃圾回收后，再把存活的对象往一边移动，这样子就可以使用整个内存了"></a>这个方法是为了解决Copy算法内存使用问题，它是进行垃圾回收后，再把存活的对象往一边移动，这样子就可以使用整个内存了</h6><p><img src="https://img-blog.csdnimg.cn/20200303110801517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4⃣️-Generational-Collection（分代收集）算法"><a href="#4⃣️-Generational-Collection（分代收集）算法" class="headerlink" title="4⃣️.Generational Collection（分代收集）算法"></a>4⃣️.Generational Collection（分代收集）算法</h4><h6 id="这是大部分JVM常用的一种垃圾回收算法。首先要看到上面那个堆Heap区域的图，所以需要先明白Heap区域分成了Young-Generation-Eden，S0，S1-，Old-Generation。"><a href="#这是大部分JVM常用的一种垃圾回收算法。首先要看到上面那个堆Heap区域的图，所以需要先明白Heap区域分成了Young-Generation-Eden，S0，S1-，Old-Generation。" class="headerlink" title="这是大部分JVM常用的一种垃圾回收算法。首先要看到上面那个堆Heap区域的图，所以需要先明白Heap区域分成了Young Generation(Eden，S0，S1)，Old Generation。"></a>这是大部分JVM常用的一种垃圾回收算法。首先要看到上面那个堆Heap区域的图，所以需要先明白Heap区域分成了Young Generation(Eden，S0，S1)，Old Generation。</h6><h6 id="可以看到在Young-Generation，将内存区域分成了几块，很明显就可以使用Copy算法，也就是说Generational-Collection采用了上面三种的某几种算法，结合而成的。在Young-Generation，这样子在Eden区域的存活的对象复制到S0，然后将Eden区域给清除掉。同理S0存活的对象复制到S1，然后将S0清除。S1存活的复制到老年代Old-Generation-，然后清除S1"><a href="#可以看到在Young-Generation，将内存区域分成了几块，很明显就可以使用Copy算法，也就是说Generational-Collection采用了上面三种的某几种算法，结合而成的。在Young-Generation，这样子在Eden区域的存活的对象复制到S0，然后将Eden区域给清除掉。同理S0存活的对象复制到S1，然后将S0清除。S1存活的复制到老年代Old-Generation-，然后清除S1" class="headerlink" title="可以看到在Young Generation，将内存区域分成了几块，很明显就可以使用Copy算法，也就是说Generational Collection采用了上面三种的某几种算法，结合而成的。在Young Generation，这样子在Eden区域的存活的对象复制到S0，然后将Eden区域给清除掉。同理S0存活的对象复制到S1，然后将S0清除。S1存活的复制到老年代Old Generation ，然后清除S1."></a>可以看到在Young Generation，将内存区域分成了几块，很明显就可以使用Copy算法，也就是说Generational Collection采用了上面三种的某几种算法，结合而成的。在Young Generation，这样子在Eden区域的存活的对象复制到S0，然后将Eden区域给清除掉。同理S0存活的对象复制到S1，然后将S0清除。S1存活的复制到老年代Old Generation ，然后清除S1.</h6><p><img src="https://img-blog.csdnimg.cn/20200303111756767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="Young-Generation触发的GC叫做Minor-GC，发生频率比较高，而Old-Generation叫做Major-GC即Full-GC，一般发生频率比较低，因为都是存活率很久的对象"><a href="#Young-Generation触发的GC叫做Minor-GC，发生频率比较高，而Old-Generation叫做Major-GC即Full-GC，一般发生频率比较低，因为都是存活率很久的对象" class="headerlink" title="Young Generation触发的GC叫做Minor GC，发生频率比较高，而Old Generation叫做Major GC即Full GC，一般发生频率比较低，因为都是存活率很久的对象"></a>Young Generation触发的GC叫做Minor GC，发生频率比较高，而Old Generation叫做Major GC即Full GC，一般发生频率比较低，因为都是存活率很久的对象</h6><p><img src="https://img-blog.csdnimg.cn/20200303112132109.jpeg" alt="在这里插入图片描述"></p><h2 id="垃圾收集器🆚"><a href="#垃圾收集器🆚" class="headerlink" title="垃圾收集器🆚"></a>垃圾收集器🆚</h2><hr><p><strong>主要的垃圾收集器有四种：</strong></p><ul><li><strong>Serial Garbage Collection：串行垃圾回收器</strong></li><li><strong>Parallel Garbage Collection：并行垃圾回收器</strong></li><li><strong>CMS Garbage Collection：CMS垃圾回收其</strong></li><li><strong>G1 Garbage Collection：G1垃圾回收器</strong><br><img src="https://img-blog.csdnimg.cn/20200303112636593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote><p><strong>Serial Garbage Collection：一次只开一个线程回收，在垃圾回收时会停止所有的应用程序线程，不然怎么会叫串行呢，对吧，看上图最左边，应用程序线程停止了，只有垃圾回收线程在执行。-XX:+UseSerialGCJVM参数以使用串行垃圾收集器。</strong><br><strong>Parallel Garbage Collection：上图中间的那个，多个线程执行垃圾回收，是JVM默认的方式，但是也会暂停其他应用程序线程</strong><br><strong>CMS：并发标记清除（CMS）垃圾收集器使用多个线程扫描堆内存，以标记要逐出的实例，然后清除标记的实例。CMS垃圾收集器只保存以下两种情况下的所有应用程序线程：</strong></p><ul><li>在Old Generaton空间中标记引用对象时。</li><li>2:如果在执行垃圾收集时堆内存发生并行更改。</li><li><em>与并行垃圾收集器相比，CMS收集器使用更多的CPU来确保更好的应用程序吞吐量。如果我们可以分配更多的CPU以获得更好的性能，那么CMS垃圾收集器是优于并行收集器的首选。打开XX:+USeParNewGC JVM参数以使用CMS垃圾收集器*</em></li><li><em>G1 Garbage Collection：G1垃圾收集器用于大型堆内存区域。它将堆内存分成多个区域，并在这些区域内并行进行收集。G1也会在回收内存后压缩空闲堆空间。但是CMS垃圾收集器压缩了stop-the-world（STW）情况下的内存。G1收集器首先根据大多数垃圾对区域进行优先级排序。打开–XX:+UseG1GC JVM参数以使用G1垃圾收集器。*</em></li></ul></blockquote></li></ul><h6 id="虽然说分成了上面几种，但是呢，根据老年代，新生代又会有不同的使用方式。下图中，Young-Generation和Tunured-Generation的连线代表可以搭配使用的"><a href="#虽然说分成了上面几种，但是呢，根据老年代，新生代又会有不同的使用方式。下图中，Young-Generation和Tunured-Generation的连线代表可以搭配使用的" class="headerlink" title="虽然说分成了上面几种，但是呢，根据老年代，新生代又会有不同的使用方式。下图中，Young Generation和Tunured Generation的连线代表可以搭配使用的"></a>虽然说分成了上面几种，但是呢，根据老年代，新生代又会有不同的使用方式。下图中，Young Generation和Tunured Generation的连线代表可以搭配使用的</h6><p><img src="https://img-blog.csdnimg.cn/20200303114041865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-Serial收集器（复制Copy算法）"><a href="#1-Serial收集器（复制Copy算法）" class="headerlink" title="1:Serial收集器（复制Copy算法）"></a>1:Serial收集器（复制Copy算法）</h3><h6 id="单线程串行运行，会暂停应用程序。算是历史很悠久的一种收集器了。"><a href="#单线程串行运行，会暂停应用程序。算是历史很悠久的一种收集器了。" class="headerlink" title="单线程串行运行，会暂停应用程序。算是历史很悠久的一种收集器了。"></a>单线程串行运行，会暂停应用程序。算是历史很悠久的一种收集器了。</h6><p><img src="https://img-blog.csdnimg.cn/20200303121347456.png" alt="在这里插入图片描述"></p><h3 id="2-ParNew收集器（复制Copy算法）"><a href="#2-ParNew收集器（复制Copy算法）" class="headerlink" title="2:ParNew收集器（复制Copy算法）"></a>2:ParNew收集器（复制Copy算法）</h3><h6 id="其实就是上面Serial的多线程版本，除了GC线程在多个CPU上同时执行外，其他和Serial没啥区别，也会要暂停其他应用程序"><a href="#其实就是上面Serial的多线程版本，除了GC线程在多个CPU上同时执行外，其他和Serial没啥区别，也会要暂停其他应用程序" class="headerlink" title="其实就是上面Serial的多线程版本，除了GC线程在多个CPU上同时执行外，其他和Serial没啥区别，也会要暂停其他应用程序"></a>其实就是上面Serial的多线程版本，除了GC线程在多个CPU上同时执行外，其他和Serial没啥区别，也会要暂停其他应用程序</h6><p><img src="https://img-blog.csdnimg.cn/20200303121533719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-Parallel-Scavenge（复制Copy算法）"><a href="#3-Parallel-Scavenge（复制Copy算法）" class="headerlink" title="3:Parallel Scavenge（复制Copy算法）"></a>3:Parallel Scavenge（复制Copy算法）</h3><h6 id="与吞吐量关系密切，故也称为吞吐量优先收集器。特点：属于新生代收集器也是采用复制算法的收集器，又是并行的多线程收集器（与ParNew收集器类似）。"><a href="#与吞吐量关系密切，故也称为吞吐量优先收集器。特点：属于新生代收集器也是采用复制算法的收集器，又是并行的多线程收集器（与ParNew收集器类似）。" class="headerlink" title="与吞吐量关系密切，故也称为吞吐量优先收集器。特点：属于新生代收集器也是采用复制算法的收集器，又是并行的多线程收集器（与ParNew收集器类似）。"></a>与吞吐量关系密切，故也称为吞吐量优先收集器。特点：属于新生代收集器也是采用复制算法的收集器，又是并行的多线程收集器（与ParNew收集器类似）。</h6><h6 id="该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与ParNew收集器最重要的一个区别）"><a href="#该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与ParNew收集器最重要的一个区别）" class="headerlink" title="该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与ParNew收集器最重要的一个区别）"></a>该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与ParNew收集器最重要的一个区别）</h6><p><strong>GC自适应调节策略：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时不需要手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。</strong></p><p>Parallel Scavenge收集器使用两个参数控制吞吐量：</p><ul><li>XX:MaxGCPauseMillis 控制最大的垃圾收集停顿时间</li><li>XX:GCRatio 直接设置吞吐量的大小。</li></ul><h3 id="4-Serial-Old收集器（标记整理算法）"><a href="#4-Serial-Old收集器（标记整理算法）" class="headerlink" title="4:Serial Old收集器（标记整理算法）"></a>4:Serial Old收集器（标记整理算法）</h3><h6 id="在老年代使用的，也是单线程的。使用场景："><a href="#在老年代使用的，也是单线程的。使用场景：" class="headerlink" title="在老年代使用的，也是单线程的。使用场景："></a>在老年代使用的，也是单线程的。使用场景：</h6><ul><li>在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用。</li><li>作为CMS收集器的后备方案，在并发收集Concurent Mode Failure时使用。<br><img src="https://img-blog.csdnimg.cn/20200303122712520.png" alt="在这里插入图片描述"><h3 id="5-Parallel-Old-收集器（标记-整理算法）"><a href="#5-Parallel-Old-收集器（标记-整理算法）" class="headerlink" title="5:Parallel Old 收集器（标记-整理算法）"></a>5:Parallel Old 收集器（标记-整理算法）</h3>是Parallel Scavenge收集器的老年代版本。</li><li><em>特点：多线程，采用标记-整理算法。*</em><br>应用场景：注重高吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge+Parallel Old 收集器。</li></ul><p>Parallel Scavenge/Parallel Old收集器工作过程图：<br><img src="https://img-blog.csdnimg.cn/20200303122843302.png" alt="在这里插入图片描述"></p><h3 id="6-CMS收集器（标记清除算法）"><a href="#6-CMS收集器（标记清除算法）" class="headerlink" title="6:CMS收集器（标记清除算法）"></a>6:CMS收集器（标记清除算法）</h3><p><strong>一种以获取最短回收停顿时间为目标的收集器。</strong><br>特点：基于标记-清除算法实现。并发收集、低停顿。<br><strong>应用场景：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b/s服务。</strong><br>CMS收集器的运行过程分为下列4步：</p><ul><li><p>初始标记：标记GC Roots能直接到的对象。速度很快但是仍存在Stop The World问题。</p></li><li><p>并发标记：进行GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行。</p></li><li><p>重新标记：为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在Stop The World问题。</p></li><li><p>并发清除：对标记的对象进行清除回收。</p><p>CMS收集器的内存回收过程是与用户线程一起并发执行的。<br><img src="https://img-blog.csdnimg.cn/20200303122423177.png" alt="在这里插入图片描述"></p></li></ul><p>CMS收集器的缺点：</p><ul><li>对CPU资源非常敏感。</li><li>无法处理浮动垃圾，可能出现Concurrent Model Failure失败而导致另一次Full GC的产生。</li><li>因为采用标记-清除算法所以会存在空间碎片的问题，导致大对象无法分配空间，不得不提前触发一次Full GC。</li></ul><h3 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7:G1收集器"></a>7:G1收集器</h3><p>特点如下：</p><ul><li>并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿时间。部分收集器原本需要停顿Java线程来执行GC动作，G1收集器仍然可以通过并发的方式让Java程序继续运行。</li><li>分代收集：G1能够独自管理整个Java堆，并且采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</li><li>空间整合：G1运作期间不会产生空间碎片，收集后能提供规整的可用内存。</li><li>可预测的停顿：G1除了追求低停顿外，还能建立可预测的停顿时间模型。能让使用者明确指定在一个长度为M毫秒的时间段内，消耗在垃圾收集上的时间不得超过N毫秒。<br><img src="https://img-blog.csdnimg.cn/20200303123009355.png" alt="在这里插入图片描述"></li></ul><h6 id="上面简单介绍了一些垃圾回收的基础，后面会详细的分析垃圾收集器并配置实操"><a href="#上面简单介绍了一些垃圾回收的基础，后面会详细的分析垃圾收集器并配置实操" class="headerlink" title="上面简单介绍了一些垃圾回收的基础，后面会详细的分析垃圾收集器并配置实操"></a>上面简单介绍了一些垃圾回收的基础，后面会详细的分析垃圾收集器并配置实操</h6>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink：把状态State全都扒光，远走他乡(二)：广播状态</title>
      <link href="/2020/04/05/Flink%EF%BC%9A%E6%8A%8A%E7%8A%B6%E6%80%81State%E5%85%A8%E9%83%BD%E6%89%92%E5%85%89%EF%BC%8C%E8%BF%9C%E8%B5%B0%E4%BB%96%E4%B9%A1(%E4%BA%8C)%EF%BC%9A%E5%B9%BF%E6%92%AD%E7%8A%B6%E6%80%81/"/>
      <url>/2020/04/05/Flink%EF%BC%9A%E6%8A%8A%E7%8A%B6%E6%80%81State%E5%85%A8%E9%83%BD%E6%89%92%E5%85%89%EF%BC%8C%E8%BF%9C%E8%B5%B0%E4%BB%96%E4%B9%A1(%E4%BA%8C)%EF%BC%9A%E5%B9%BF%E6%92%AD%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p><strong>先用一个场景来入门：我们想象的是一个电商平台的用户操作和模式的实时匹配的情况吧。它获取了所有用户的操作行为数据作为一个用户的操作流。网站的运营团队致力于分析用户的操作，来提高销售额，改善用户体验，并监测和预防恶意行为。要实现了一个流应用程序，用于检测用户事件流中的模式。当然，也可以在代码中把所谓的这种“模式”给写死，但是这样情况是很不理想的对吧，总是要重新部署我们的应用，而且，那样用不到广播状态，而直接只能和UserActions流一起传播，这样相同的广播状态就重复传播，占用资源。</strong><br>他是这样的</p><ul><li><strong>定义一个User actions流，用来记录各个用户的操作，比如登陆，加入购物车，付款，注销退出等等。</strong></li><li><strong>定义一个Patterns流，用来记录平台需要的模式匹配，比如某个模式是记录这个用户在登陆之后马上退出了，或者这个用户加入购物车后马上退出了，总之就是一个动作之后接另一个动作形成一个模式，当然也可以多个动作连起来，不过这里为了简便，就暂时两个动作。</strong></li></ul><p>像下面这个样子：<br><img src="https://img-blog.csdnimg.cn/20200305160909730.png" alt="在这里插入图片描述"><br><strong>我们可以看到下面这个Patterns是一个模式流，它两个作为一组，也就是两个作为一个Pattern，广播给其他的operator。让广播出去的operator去匹配User Actions。</strong><br><img src="https://img-blog.csdnimg.cn/20200305161442360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将Pattern广播出去了：从图中可以看出，是登陆-&gt;退出的Pattern广播出去了。这样的话。</p><p><img src="https://img-blog.csdnimg.cn/20200305161634802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>然后就是User Actions流根据key来分到每一个对应的分区并行操作。这是多么的好。而且呢，每次一个action到来了，每个分区都会保存上一次的action，联合刚来的action一起组成一个模式和广播的Pattern去匹配，最后再讲刚来的action替代上次的action。</strong><br><img src="https://img-blog.csdnimg.cn/2020030516173188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>可以看到Key1的操作匹配到了Pattern，然后就collect</strong><br><img src="https://img-blog.csdnimg.cn/20200305161812997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是如果新来一个Pattern的话，就会替代掉原来的那个Pattern，从而就会与新来的Pattern比较了。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> flinkjava<span class="token punctuation">.</span>State<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>MapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span>BroadcastState<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span>MapStateDescriptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span>ValueState<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span>ValueStateDescriptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple3<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>BroadcastStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>co<span class="token punctuation">.</span>KeyedBroadcastProcessFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">broadcastState</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SingleOutputStreamOperator<span class="token operator">&lt;</span>Action<span class="token operator">></span> actions <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Action<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Action <span class="token function">map</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        String<span class="token punctuation">[</span><span class="token punctuation">]</span> dataArray <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>dataArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SingleOutputStreamOperator<span class="token operator">&lt;</span>Pattern<span class="token operator">></span> patterns <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Pattern<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Pattern <span class="token function">map</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        String<span class="token punctuation">[</span><span class="token punctuation">]</span> dataArray <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Pattern pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        pattern<span class="token punctuation">.</span><span class="token function">setFirstAction</span><span class="token punctuation">(</span>dataArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        pattern<span class="token punctuation">.</span><span class="token function">setSecondAction</span><span class="token punctuation">(</span>dataArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> pattern<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyedStream<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> Long<span class="token operator">></span> actionByUser <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>action <span class="token operator">-</span><span class="token operator">></span> action<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        MapStateDescriptor<span class="token operator">&lt;</span>Void<span class="token punctuation">,</span>Pattern<span class="token operator">></span> bcStateDescriptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapStateDescriptor</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Pattern<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"patterns"</span><span class="token punctuation">,</span> Types<span class="token punctuation">.</span>VOID<span class="token punctuation">,</span>Types<span class="token punctuation">.</span><span class="token function">POJO</span><span class="token punctuation">(</span>Pattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//广播模式pattern状态</span>        BroadcastStream<span class="token operator">&lt;</span>Pattern<span class="token operator">></span> bcedPatterns <span class="token operator">=</span> patterns<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>bcStateDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>        SingleOutputStreamOperator<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Pattern<span class="token operator">>></span> matches <span class="token operator">=</span> actionByUser<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>bcedPatterns<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PatternEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        matches<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Pattern<span class="token operator">></span><span class="token punctuation">,</span> Tuple3<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple3<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Pattern<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple3</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>f0<span class="token punctuation">,</span>value<span class="token punctuation">.</span>f1<span class="token punctuation">.</span><span class="token function">getFirstAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token punctuation">.</span>f1<span class="token punctuation">.</span><span class="token function">getSecondAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"broadcastJob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PatternEvaluator</span> <span class="token keyword">extends</span> <span class="token class-name">KeyedBroadcastProcessFunction</span><span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>Action<span class="token punctuation">,</span>Pattern<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>Pattern<span class="token operator">>></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每个用户维护一个上次操作的状态</span>    ValueState<span class="token operator">&lt;</span>String<span class="token operator">></span> prevActionState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//广播状态Descriptor</span>    MapStateDescriptor<span class="token operator">&lt;</span>Void<span class="token punctuation">,</span>Pattern<span class="token operator">></span> patternDesc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Configuration parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>       prevActionState <span class="token operator">=</span> <span class="token function">getRuntimeContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span>               <span class="token keyword">new</span> <span class="token class-name">ValueStateDescriptor</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"lastAction"</span><span class="token punctuation">,</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">)</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span>       patternDesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapStateDescriptor</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Pattern<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"patterns"</span><span class="token punctuation">,</span>Types<span class="token punctuation">.</span>VOID<span class="token punctuation">,</span>Types<span class="token punctuation">.</span><span class="token function">POJO</span><span class="token punctuation">(</span>Pattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这个方法是针对非广播流的元素到来调用方法，在这里是对于用户的Action</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span>Action value<span class="token punctuation">,</span> ReadOnlyContext ctx<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Pattern<span class="token operator">>></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前广播过来的模式状态</span>        Pattern pattern <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBroadcastState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>patternDesc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取前一个用户动作，也就是存在prevActionState的，是上一次用户操作的动作</span>        String preAction <span class="token operator">=</span> prevActionState<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> preAction <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果上一次的动作和模式的第一个动作匹配，而且这一次的动作和模式的第二个动作匹配，那么就是满足情况的</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>firstAction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preAction<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">.</span>secondAction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getCurrentKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将本次动作更新到状态，作为下一个动作的上一个动作</span>        prevActionState<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这个是每个广播流过来的时候</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processBroadcastElement</span><span class="token punctuation">(</span>Pattern value<span class="token punctuation">,</span> Context ctx<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Pattern<span class="token operator">>></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        BroadcastState<span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Pattern<span class="token operator">></span> bcstate <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBroadcastState</span><span class="token punctuation">(</span>patternDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>        bcstate<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    Long userId<span class="token punctuation">;</span>    String action<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Action</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">,</span> String action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> action<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><p><strong>先来个(a,b)的Pattern：</strong><br><img src="https://img-blog.csdnimg.cn/20200305160309648.png" alt="在这里插入图片描述"><br><strong>然后输入几个Action(UserId，action)</strong><br><img src="https://img-blog.csdnimg.cn/20200305160302452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得出结果：<br><img src="https://img-blog.csdnimg.cn/20200305160438113.png" alt="在这里插入图片描述"><br><strong>如果新来一个Pattern(b，e)</strong><br><img src="https://img-blog.csdnimg.cn/20200305160416862.png" alt="在这里插入图片描述"><br><strong>同时新来几个Action（UserId，action）：</strong><br><img src="https://img-blog.csdnimg.cn/20200305160409467.png" alt="在这里插入图片描述"><br>结果：<br><img src="https://img-blog.csdnimg.cn/20200305160445829.png" alt="在这里插入图片描述"></p><h3 id="KeyedBroadcastProcessFunction接口"><a href="#KeyedBroadcastProcessFunction接口" class="headerlink" title="KeyedBroadcastProcessFunction接口"></a>KeyedBroadcastProcessFunction接口</h3><p><strong>上面是实现了KeyedBroadcastProcessFunction接口</strong><br>总共有三个方法可以实现：</p><ul><li>processBroadcastElement()方法：这个方法是广播流的数据到来的时候调用的方法。在上面场景中，我们使用的是用MapState来保存广播的状态，用了一个null键，从而可以使只保存一个Pattern</li><li>processElement()方法：这个是每次一个非广播状态的数据到来时可以调用的</li><li>onTimer()方法：这个仍然可以注册定时器，我们前面的场景其实可以优化，就是如果一个用户长时间没用进行操作，就可以清空上次操作的状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程：它的繁杂“锁”事</title>
      <link href="/2020/04/05/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E5%AE%83%E7%9A%84%E7%B9%81%E6%9D%82%E2%80%9C%E9%94%81%E2%80%9D%E4%BA%8B/"/>
      <url>/2020/04/05/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E5%AE%83%E7%9A%84%E7%B9%81%E6%9D%82%E2%80%9C%E9%94%81%E2%80%9D%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>java中的锁还真是挺复杂的，先来一种图看看<br><img src="https://img-blog.csdnimg.cn/20200319165356569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>上面这些只是常见的分类，根据竞争同步资源的细节其实还分为：无锁，偏向锁，轻量级锁，重量级锁。</strong></p><h2 id="最基本的锁实现：Synchronized"><a href="#最基本的锁实现：Synchronized" class="headerlink" title="最基本的锁实现：Synchronized"></a>最基本的锁实现：Synchronized</h2><hr><h2 id="乐观锁VS悲观锁"><a href="#乐观锁VS悲观锁" class="headerlink" title="乐观锁VS悲观锁"></a>乐观锁VS悲观锁</h2><hr><p><strong>乐观锁就是乐天派，它自信的认为自己能够有机会获取这个资源，没有获取到就不罢休，它非常相信别的线程不会给他加锁，只是检查着某一资源有没有被更改过。比如可以使用CAS算法来实现。</strong><br><strong>而悲观锁，就非常悲观，如果有线程已经给某一资源加了锁，那么自己就会被阻塞，等待下一次有机会去获取锁。</strong></p><h4 id="CAS算法"><a href="#CAS算法" class="headerlink" title="CAS算法"></a>CAS算法</h4><p>比如，我们可以看看原子类，一个自增操作。<br><img src="https://img-blog.csdnimg.cn/20200319170345470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在AtomicInteger原子类里面，下图所示，非常重要的几个东东</p><ul><li><strong>unsafe：CAS底层实现</strong></li><li><strong>valueOffset：这个数据在内存中的偏移量</strong></li><li><strong>value：我们竞争的Integer资源</strong><br><img src="https://img-blog.csdnimg.cn/20200319170705740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后直接跳到原子类那个递增的方法里面去看看<br><img src="https://img-blog.csdnimg.cn/20200319171436866.png" alt="在这里插入图片描述"><br>如果是JDK里面的话就看不到unsafe里面具体内容了，只能有class类，没有源码，在OpenJDK里面看看。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Unsafe.java</span><span class="token comment" spellcheck="true">//o是我们传过来的原子类对象，offset是valueOffset，delta就是我们想要修改的差值</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> v<span class="token punctuation">;</span>   <span class="token keyword">do</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//先获取到o对象中这个偏移量的值</span>       v <span class="token operator">=</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//然后while循环就一直比较内存中的值和v是不是一样的</span>       <span class="token comment" spellcheck="true">//如果一样，说明没有线程动过这个对象的值，那么就设置为新值v+delta</span>       <span class="token comment" spellcheck="true">//不一样你就继续循环咯，知道设置成功</span>   <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200319180601775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200319180647444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//创建关于当前获取同步状态线程的Node节点</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Try the fast path of enq; backup to full enq on failure</span>        <span class="token comment" spellcheck="true">//快速尝试在同步队列尾部添加</span>        Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//compareAndSetHead确保线程被安全添加</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        *enq通过死循环保证节点正确添加        *因为可能在多线程下，很多线程同时去获取同步状态失败，从而被        *加入到同步队列的尾部。        */</span>        <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//死循环保证正确添加，通过CAS设置尾节点，否则一直尝试</span>        <span class="token comment" spellcheck="true">//这样并发的添加节点就变成了串行化</span>            Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Must initialize                </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token keyword">return</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="自定义DoubleLock共享锁"><a href="#自定义DoubleLock共享锁" class="headerlink" title="自定义DoubleLock共享锁"></a>自定义DoubleLock共享锁</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> current<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>AbstractQueuedSynchronizer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">doubleLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Sync</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"count must be larger than zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">setState</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//死循环</span>                <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> newCount <span class="token operator">=</span> current <span class="token operator">-</span> arg<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//只有当这个newcount大于0，才能算外面的线程获得到了锁</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>newCount <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>newCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> newCount<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> newcount <span class="token operator">=</span> current <span class="token operator">+</span> arg<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> newcount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> current<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">doubleLockTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        doubleLockTest pDoubleLockTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">doubleLockTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pDoubleLockTest<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">doubleLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Worker worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            worker<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//守护进程</span>            worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"换一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200319150230323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="LockSupport工具"><a href="#LockSupport工具" class="headerlink" title="LockSupport工具"></a>LockSupport工具</h2><p>在进入AQS和其他Lock相关内容之前，我觉得有必要了解一下LockSupport工具，不然都不知道代码在干嘛。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//唤醒操作</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span>            UNSAFE<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span>Object blocker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> blocker<span class="token punctuation">)</span><span class="token punctuation">;</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkNanos</span><span class="token punctuation">(</span>Object blocker<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> blocker<span class="token punctuation">)</span><span class="token punctuation">;</span>            UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//阻塞直到deadline，加入一个blocker对象，可以有信息访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkUntil</span><span class="token punctuation">(</span>Object blocker<span class="token punctuation">,</span> <span class="token keyword">long</span> deadline<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> blocker<span class="token punctuation">)</span><span class="token punctuation">;</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBlocker</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//阻塞进入waiting状态</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//阻塞nanos纳秒</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//知道某个时间界限才唤醒</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkUntil</span><span class="token punctuation">(</span><span class="token keyword">long</span> deadline<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="Lock接口和AQS源码分析"><a href="#Lock接口和AQS源码分析" class="headerlink" title="Lock接口和AQS源码分析"></a>Lock接口和AQS源码分析</h2><p><img src="https://img-blog.csdnimg.cn/20200404212329568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="独占式AQS"><a href="#独占式AQS" class="headerlink" title="独占式AQS"></a>独占式AQS</h4><p><img src="https://img-blog.csdnimg.cn/20200404211440835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token comment" spellcheck="true">//先用自己定义的tryAcquire逻辑尝试获取同步状态</span>            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取失败就调用addWaiter将线程加入同步队列，并调用acquireQueued去自旋获取锁</span>            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果获取失败而且自己曾被中断过，那么就自我中断</span>    <span class="token punctuation">}</span></code></pre><h5 id="addWaiter方法"><a href="#addWaiter方法" class="headerlink" title="addWaiter方法"></a>addWaiter方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//    这里尝试快速插入队列，如果失败了就是用enq方式插入即CAS自旋</span>        Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//快速插到尾部</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用enq方法将节点CAS自旋插入同步队列中</span>        <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//将这个节点以自旋的方式插入到其中</span>    <span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//死循环，一种到插入到队列中成功</span>            <span class="token comment" spellcheck="true">//底层也是用的unsafe的CAS操作</span>            Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//空队列，插入</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//非空插入</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token keyword">return</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="acquireQueued方法"><a href="#acquireQueued方法" class="headerlink" title="acquireQueued方法"></a>acquireQueued方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//死循环自旋的方式</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取前驱节点</span>                <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果前驱节点为头节点而且去尝试以独占锁的方式获取锁；tryAcquire的方法要具体的实现类去实现，获取成功返回true，否则返回false；</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//前驱节点确实为头节点，此时头节点可能还拿着锁，如果头节点释放了，当前节点确实可以尝试获取成功了，那么设置头节点</span>                    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将原来的节点置为null，便于垃圾回收</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取失败，直接取消获取</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//acquireQueued继续调用shouldParkAfterFailedAcquire方法</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>Node pred<span class="token punctuation">,</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拿到前驱的状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//如果已经告诉前驱拿完号后通知自己一下，那就可以安心休息了</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/*          * 如果前驱放弃了，那就一直往前找，直到找到最近一个正常等待的状态，并排在它的后边。          * 注意：那些放弃的结点，由于被自己“加塞”到它们前边，它们相当于形成一个无引用链，稍后就会被保安大叔赶走了(GC回收)！          */</span>         <span class="token keyword">do</span> <span class="token punctuation">{</span>             node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//如果前驱正常，那就把前驱的状态设置成SIGNAL，告诉它拿完号后通知自己一下。有可能失败，人家说不定刚刚释放完呢！</span>         <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用parkAndCheckInterrupt检查自己是不是中断过</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">2</span>     LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用park()使线程进入waiting状态</span><span class="token number">3</span>     <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果被唤醒，查看自己是不是被中断的。</span><span class="token number">4</span> <span class="token punctuation">}</span></code></pre><h5 id="Release释放锁"><a href="#Release释放锁" class="headerlink" title="Release释放锁"></a>Release释放锁</h5><p>释放因为只有一个头节点，不存在线程安全问题，可以直接释放，不需要加锁之类的。既不需要并发去维护这个同步队列的锁释放</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">2</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">3</span>         Node h <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到头结点</span><span class="token number">4</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">5</span>             <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//唤醒等待队列里的下一个线程</span><span class="token number">6</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token number">7</span>     <span class="token punctuation">}</span><span class="token number">8</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token number">9</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里，node一般为当前线程所在的结点。</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//置零当前线程所在的结点状态，允许失败。</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到下一个需要唤醒的结点s</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果为空或已取消</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从后向前找。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从这里可以看出，&lt;=0的结点，都是还有效的结点。</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//唤醒</span><span class="token punctuation">}</span></code></pre><p>上面就是独占方式的AQS，可以实现那个重入锁ReetranLock</p><h4 id="共享式AQS"><a href="#共享式AQS" class="headerlink" title="共享式AQS"></a>共享式AQS</h4><h2 id="重入锁ReentranLock源码分析"><a href="#重入锁ReentranLock源码分析" class="headerlink" title="重入锁ReentranLock源码分析"></a>重入锁ReentranLock源码分析</h2><p>上面有了AQS的独占式，就可以直到重入锁的ReentranLock的实现了，重入锁只需要重写lock，和unlock，以及tryAcquire和一些必要方法。主要是在tryAcquire里面实现重入的逻辑。想一想，我们是因为状态&gt;0才不能继续获取锁，但是如果价格判断，如果获取锁的是当前自己，那不就可以实现重入了吗。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取当前线程</span>            <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果没有线程获取锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//否则比较一下当前获取锁的是不是自己</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取锁的是自己哎</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 锁 </tag>
            
            <tag> 线程安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集去解决按公因数计算最大组件大小</title>
      <link href="/2020/04/02/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8E%BB%E8%A7%A3%E5%86%B3%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F/"/>
      <url>/2020/04/02/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8E%BB%E8%A7%A3%E5%86%B3%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<h6 id="首先看看什么叫并查集。"><a href="#首先看看什么叫并查集。" class="headerlink" title="首先看看什么叫并查集。"></a>首先看看什么叫并查集。</h6><p>并查集<br>并查集（Union-find Sets）是一种非常精巧而实用的数据结构，它主要用于处理一些不相交集合的合并问题。一些常见的用途有求连通子图、求最小生成树的 Kruskal 算法和求最近公共祖先（Least Common Ancestors, LCA）等。</p><p>使用并查集时，首先会存在一组不相交的动态集合 S={S1,S2,⋯,Sk}，一般都会使用一个整数表示集合中的一个元素。</p><p>每个集合可能包含一个或多个元素，并选出集合中的某个元素作为代表。每个集合中具体包含了哪些元素是不关心的，具体选择哪个元素作为代表一般也是不关心的。我们关心的是，对于给定的元素，可以很快的找到这个元素所在的集合（的代表），以及合并两个元素所在的集合，而且这些操作的时间复杂度都是常数级的。</p><p>并查集的基本操作有三个：</p><p>makeSet(s)：建立一个新的并查集，其中包含 s 个单元素集合。<br>unionSet(x, y)：把元素 x 和元素 y 所在的集合合并，要求 x 和 y 所在的集合不相交，如果相交则不合并。<br>find(x)：找到元素 x 所在的集合的代表，该操作也可以用于判断两个元素是否位于同一个集合，只要将它们各自的代表比较一下就可以了。<br>并查集的实现原理也比较简单，就是使用树来表示集合，树的每个节点就表示集合中的一个元素，树根对应的元素就是该集合的代表，如图 1 所示。</p><p>图 1 并查集的树表示<br><img src="https://img-blog.csdnimg.cn/20200225102106161.png" alt="在这里插入图片描述"><br>图中有两棵树，分别对应两个集合，其中第一个集合为 {a,b,c,d}，代表元素是 a；第二个集合为 {e,f,g}，代表元素是 e。</p><p>树的节点表示集合中的元素，指针表示指向父节点的指针，根节点的指针指向自己，表示其没有父节点。沿着每个节点的父节点不断向上查找，最终就可以找到该树的根节点，即该集合的代表元素。</p><p>现在，应该可以很容易的写出 makeSet 和 find 的代码了，假设使用一个足够长的数组来存储树节点（很类似之前讲到的静态链表），那么 makeSet 要做的就是构造出如图 2 的森林，其中每个元素都是一个单元素集合，即父节点是其自身：</p><p><img src="https://img-blog.csdnimg.cn/20200225102112299.png" alt="在这里插入图片描述"></p><p>图 2 构造并查集初始化</p><h3 id="Find版本"><a href="#Find版本" class="headerlink" title="Find版本"></a>Find版本</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind1</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存自己属于哪个集合</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造方法</span>        <span class="token keyword">public</span> <span class="token function">UnionFind1</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>            array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回数组大小</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回p是属于哪个集合</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> array<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断两个元素是不是属于同一集合</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//合并两个集合，比如，下面的循环就是将和p是一个集合的合并到和q是一个集合的去了</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unionElements</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pID <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> qID <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//他们两个本来就是相连的</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>qID <span class="token operator">==</span> pID<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pID <span class="token punctuation">)</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> qID<span class="token punctuation">;</span>             <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="Union版本"><a href="#Union版本" class="headerlink" title="Union版本"></a>Union版本</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind2</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存根结点元素</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parents<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造方法，初始化全是指向自己</span>        <span class="token keyword">public</span> <span class="token function">UnionFind2</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>            parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回数组长度</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断两个元素是否在同一集合</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//向上找到根结点，形象起来就是一个树</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token operator">!=</span>parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span> e <span class="token operator">=</span> parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//合并两个</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unionElements</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//本身就是一个根结点，说明在同一个集合</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>qRoot <span class="token operator">==</span> pRoot<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            parents<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="测试一下Find版本和Union版本"><a href="#测试一下Find版本和Union版本" class="headerlink" title="测试一下Find版本和Union版本"></a>测试一下Find版本和Union版本</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">testfind</span><span class="token punctuation">(</span>UnionFind1 UF<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置开始时间</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//合并集合</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> p <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>UF<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> q <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>UF<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            UF<span class="token punctuation">.</span><span class="token function">unionElements</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断是否同一集合</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> p <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>UF<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> q <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>UF<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            UF<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//结束时间</span>        <span class="token keyword">long</span> endtime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回时差</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>endtime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000000000.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">testunion</span><span class="token punctuation">(</span>UnionFind2 UF<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> p <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>UF<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> q <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>UF<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            UF<span class="token punctuation">.</span><span class="token function">unionElements</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> p <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>UF<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> q <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>UF<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            UF<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endtime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>endtime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000000000.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h6 id="main函数调用上面的test"><a href="#main函数调用上面的test" class="headerlink" title="main函数调用上面的test"></a>main函数调用上面的test</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//元素个数</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作次数（合并或者比较是否同一集合）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">testfind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnionFind1</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">testunion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnionFind2</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h5><h6 id="size-100000，m-10000"><a href="#size-100000，m-10000" class="headerlink" title="size=100000，m=10000"></a>size=100000，m=10000</h6><p><img src="https://img-blog.csdnimg.cn/20200224132413674.png" alt="在这里插入图片描述"></p><h6 id="size-100000-，-m-100000"><a href="#size-100000-，-m-100000" class="headerlink" title="size=100000 ， m=100000"></a>size=100000 ， m=100000</h6><p><img src="https://img-blog.csdnimg.cn/20200224132519959.png" alt="在这里插入图片描述"></p><h6 id="由上面测试结果可以看出，操作次数增加哀乐，我们的Union版本明显变慢了。因为元素个数太多，我们Union版本的树的深度也就高了，要知道Union版本不管是合并还是查找是否同一集合时间复杂度都是O-h-：h是树高度。而Find版本明显就是查找是否相等的时间复杂度是O-1-，而合并复杂度是O-N"><a href="#由上面测试结果可以看出，操作次数增加哀乐，我们的Union版本明显变慢了。因为元素个数太多，我们Union版本的树的深度也就高了，要知道Union版本不管是合并还是查找是否同一集合时间复杂度都是O-h-：h是树高度。而Find版本明显就是查找是否相等的时间复杂度是O-1-，而合并复杂度是O-N" class="headerlink" title="由上面测试结果可以看出，操作次数增加哀乐，我们的Union版本明显变慢了。因为元素个数太多，我们Union版本的树的深度也就高了，要知道Union版本不管是合并还是查找是否同一集合时间复杂度都是O(h)：h是树高度。而Find版本明显就是查找是否相等的时间复杂度是O(1)，而合并复杂度是O(N)"></a>由上面测试结果可以看出，操作次数增加哀乐，我们的Union版本明显变慢了。因为元素个数太多，我们Union版本的树的深度也就高了，要知道Union版本不管是合并还是查找是否同一集合时间复杂度都是O(h)：h是树高度。而Find版本明显就是查找是否相等的时间复杂度是O(1)，而合并复杂度是O(N)</h6><h3 id="对Union版本进行优化"><a href="#对Union版本进行优化" class="headerlink" title="对Union版本进行优化"></a>对Union版本进行优化</h3><h5 id="基于size优化"><a href="#基于size优化" class="headerlink" title="基于size优化"></a>基于size优化</h5><h6 id="我们上面的union版本其实有个问题：就是合并的时候没有注意高度的变化，看这样子："><a href="#我们上面的union版本其实有个问题：就是合并的时候没有注意高度的变化，看这样子：" class="headerlink" title="我们上面的union版本其实有个问题：就是合并的时候没有注意高度的变化，看这样子："></a>我们上面的union版本其实有个问题：就是合并的时候没有注意高度的变化，看这样子：</h6><p><img src="https://img-blog.csdnimg.cn/20200224135535528.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200224135548798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200224135606128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="可以看到，那么不断合并，树的高度越来越高，而基于size就是让节点个数少的往节点个数高的合并"><a href="#可以看到，那么不断合并，树的高度越来越高，而基于size就是让节点个数少的往节点个数高的合并" class="headerlink" title="可以看到，那么不断合并，树的高度越来越高，而基于size就是让节点个数少的往节点个数高的合并"></a>可以看到，那么不断合并，树的高度越来越高，而基于size就是让节点个数少的往节点个数高的合并</h6><p><img src="https://img-blog.csdnimg.cn/20200224135717408.png" alt="在这里插入图片描述"><br>这样多次合并还是只有高度2，不会增加那么快。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind3</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parents<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sz<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录每棵树的节点个数</span>    <span class="token keyword">public</span> <span class="token function">UnionFind3</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>        parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        sz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            sz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每个根结点的一开始都只有一个节点</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向上找到根结点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token operator">!=</span>parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span> e <span class="token operator">=</span> parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unionElements</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//本身就是一个根结点，说明在同一个集合</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>qRoot <span class="token operator">==</span> pRoot<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//节点数少的合并到节点数多的。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sz<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token operator">&lt;</span>sz<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parents<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>            sz<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> sz<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            parents<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token operator">=</span> pRoot<span class="token punctuation">;</span>            sz<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> sz<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="基于rank树的高度优化"><a href="#基于rank树的高度优化" class="headerlink" title="基于rank树的高度优化"></a>基于rank树的高度优化</h5><h6 id="上面基于size方法看似很优秀，但是也有缺点，它只注意size的数值，并没有真正从树的高度去下手，比如"><a href="#上面基于size方法看似很优秀，但是也有缺点，它只注意size的数值，并没有真正从树的高度去下手，比如" class="headerlink" title="上面基于size方法看似很优秀，但是也有缺点，它只注意size的数值，并没有真正从树的高度去下手，比如"></a>上面基于size方法看似很优秀，但是也有缺点，它只注意size的数值，并没有真正从树的高度去下手，比如</h6><p><img src="https://img-blog.csdnimg.cn/20200224135851227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是基于rank就是这样：<br><img src="https://img-blog.csdnimg.cn/20200224135913904.png" alt="在这里插入图片描述"><br>那么我们的层级明显就要比基于size的要少一些，所以查找就方便很多了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind4</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parents<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//rank[i]表示i为根的集合所表示的树的层数，而不是上面的基于元素个数大小</span>            <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rank<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UnionFind4</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>        parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>         rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向上找到根结点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token operator">!=</span>parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span> e <span class="token operator">=</span> parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unionElements</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//本身就是一个根结点，说明在同一个集合</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>qRoot <span class="token operator">==</span> pRoot<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据根结点树的高度来判断合并方向</span>        <span class="token comment" spellcheck="true">//层级矮的树往层级高的树合并并不需要维护rank</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rank<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">&lt;</span>rank<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parents<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rank<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token operator">></span>rank<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parents<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">=</span> pRoot<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这时候就会高度+1，比如最开始1，2两个元素合并，就是1&lt;-2，高度为2，如果有1&lt;-2，3&lt;-4合并，就是1&lt;-2，1&lt;-3&lt;-4高度就是3</span>            parents<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>            rank<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="测试一下上面四个版本"><a href="#测试一下上面四个版本" class="headerlink" title="测试一下上面四个版本"></a>测试一下上面四个版本</h4><p><img src="https://img-blog.csdnimg.cn/20200224135236416.png" alt="在这里插入图片描述"></p><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><h6 id="可见基于size和基于rank优化结果都挺不错的。"><a href="#可见基于size和基于rank优化结果都挺不错的。" class="headerlink" title="可见基于size和基于rank优化结果都挺不错的。"></a>可见基于size和基于rank优化结果都挺不错的。</h6><p><img src="https://img-blog.csdnimg.cn/20200224135244309.png" alt="在这里插入图片描述"></p><h6 id="可以看到，在十万级别的数据量，rank可能还略微差一点，但是当你到百万级别，就rank好一些了，而且我当前数据合并是顺序合并，并不是扰乱合并，所以实验结果会有些差别。"><a href="#可以看到，在十万级别的数据量，rank可能还略微差一点，但是当你到百万级别，就rank好一些了，而且我当前数据合并是顺序合并，并不是扰乱合并，所以实验结果会有些差别。" class="headerlink" title="可以看到，在十万级别的数据量，rank可能还略微差一点，但是当你到百万级别，就rank好一些了，而且我当前数据合并是顺序合并，并不是扰乱合并，所以实验结果会有些差别。"></a>可以看到，在十万级别的数据量，rank可能还略微差一点，但是当你到百万级别，就rank好一些了，而且我当前数据合并是顺序合并，并不是扰乱合并，所以实验结果会有些差别。</h6><h3 id="下面基于rank继续优化：路径压缩"><a href="#下面基于rank继续优化：路径压缩" class="headerlink" title="下面基于rank继续优化：路径压缩"></a>下面基于rank继续优化：路径压缩</h3><h6 id="直接修改find方法，就是如果当前节点的父亲节点，仍然不是根结点，那么就可能祖父节点可能是根结点，干脆直接让他直接指向祖父节点也不会影响对吧。"><a href="#直接修改find方法，就是如果当前节点的父亲节点，仍然不是根结点，那么就可能祖父节点可能是根结点，干脆直接让他直接指向祖父节点也不会影响对吧。" class="headerlink" title="直接修改find方法，就是如果当前节点的父亲节点，仍然不是根结点，那么就可能祖父节点可能是根结点，干脆直接让他直接指向祖父节点也不会影响对吧。"></a>直接修改find方法，就是如果当前节点的父亲节点，仍然不是根结点，那么就可能祖父节点可能是根结点，干脆直接让他直接指向祖父节点也不会影响对吧。</h6><p><img src="https://img-blog.csdnimg.cn/20200224140838860.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> parents<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        parents<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> parents<span class="token punctuation">[</span>parents<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> parents<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="先将测试数据跳到百万级别"><a href="#先将测试数据跳到百万级别" class="headerlink" title="先将测试数据跳到百万级别"></a>先将测试数据跳到百万级别</h6><p><img src="https://img-blog.csdnimg.cn/20200224140705945.png" alt="在这里插入图片描述"></p><h6 id="只测试基于size，基于rank和基于rank的路径压缩"><a href="#只测试基于size，基于rank和基于rank的路径压缩" class="headerlink" title="只测试基于size，基于rank和基于rank的路径压缩"></a>只测试基于size，基于rank和基于rank的路径压缩</h6><p>结果这么叼，百万级别的基于路径压缩结果都这么好。<br><img src="https://img-blog.csdnimg.cn/2020022414075341.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200224141043205.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="看个题目吧。"><a href="#看个题目吧。" class="headerlink" title="看个题目吧。"></a>看个题目吧。</h2><h4 id="按公因数计算最大组件大小"><a href="#按公因数计算最大组件大小" class="headerlink" title="按公因数计算最大组件大小"></a>按公因数计算最大组件大小</h4><p>给定一个由不同正整数的组成的非空数组 A，考虑下面的图：</p><ul><li>有 A.length 个节点，按从 A[0] 到 A[A.length - 1] 标记；</li><li>只有当 A[i] 和 A[j] 共用一个大于 1 的公因数时，A[i] 和 A[j] 之间才有一条边。<br>返回图中最大连通组件的大小。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200224141140375.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200224141152481.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200224141203811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="考虑这个题目，明显就是一个并查集的问题"><a href="#考虑这个题目，明显就是一个并查集的问题" class="headerlink" title="考虑这个题目，明显就是一个并查集的问题"></a>考虑这个题目，明显就是一个并查集的问题</h6><h6 id="首先我们要知道，找公因数方法，很多人一对于这种东西，马上就要去找性能最好，比如辗转相除法，但是呢，经过我的实验，它的计算会超时，因为它要不断重复相除，有许多重复计算，这里就直接采用质因数分解"><a href="#首先我们要知道，找公因数方法，很多人一对于这种东西，马上就要去找性能最好，比如辗转相除法，但是呢，经过我的实验，它的计算会超时，因为它要不断重复相除，有许多重复计算，这里就直接采用质因数分解" class="headerlink" title="首先我们要知道，找公因数方法，很多人一对于这种东西，马上就要去找性能最好，比如辗转相除法，但是呢，经过我的实验，它的计算会超时，因为它要不断重复相除，有许多重复计算，这里就直接采用质因数分解"></a>首先我们要知道，找公因数方法，很多人一对于这种东西，马上就要去找性能最好，比如辗转相除法，但是呢，经过我的实验，它的计算会超时，因为它要不断重复相除，有许多重复计算，这里就直接采用质因数分解</h6><h6 id="这里的话，我们先找到最大的数W，那么我们计算它的公因数最多循环到sqrt-W-即可。而且，因为数组中每个数肯定小于W，那么公因数遍历最多到sqrt-x-即可。"><a href="#这里的话，我们先找到最大的数W，那么我们计算它的公因数最多循环到sqrt-W-即可。而且，因为数组中每个数肯定小于W，那么公因数遍历最多到sqrt-x-即可。" class="headerlink" title="这里的话，我们先找到最大的数W，那么我们计算它的公因数最多循环到sqrt(W)即可。而且，因为数组中每个数肯定小于W，那么公因数遍历最多到sqrt(x)即可。"></a>这里的话，我们先找到最大的数W，那么我们计算它的公因数最多循环到sqrt(W)即可。而且，因为数组中每个数肯定小于W，那么公因数遍历最多到sqrt(x)即可。</h6><h6 id="那么呢，我们提取了公因数之后，就将他们合并，然后找出最大的。"><a href="#那么呢，我们提取了公因数之后，就将他们合并，然后找出最大的。" class="headerlink" title="那么呢，我们提取了公因数之后，就将他们合并，然后找出最大的。"></a>那么呢，我们提取了公因数之后，就将他们合并，然后找出最大的。</h6><h6 id="这样我们仔细看代码，时间复杂度是多少，首先要遍历数组个数A，然后遍历到他们的sqrt-x-，这里为了取上限，最多是sqrt-w-所以时间复杂度就是O-A-sqrt-w-，空间复杂度就是O-A"><a href="#这样我们仔细看代码，时间复杂度是多少，首先要遍历数组个数A，然后遍历到他们的sqrt-x-，这里为了取上限，最多是sqrt-w-所以时间复杂度就是O-A-sqrt-w-，空间复杂度就是O-A" class="headerlink" title="这样我们仔细看代码，时间复杂度是多少，首先要遍历数组个数A，然后遍历到他们的sqrt(x)，这里为了取上限，最多是sqrt(w),所以时间复杂度就是O(A*sqrt(w))，空间复杂度就是O(A)"></a>这样我们仔细看代码，时间复杂度是多少，首先要遍历数组个数A，然后遍历到他们的sqrt(x)，这里为了取上限，最多是sqrt(w),所以时间复杂度就是O(A*sqrt(w))，空间复杂度就是O(A)</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> ByteDance<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 给定一个由不同正整数的组成的非空数组 A，考虑下面的图：有 A.length 个节点，按从 A[0] 到 A[A.length - 1] 标记；只有当 A[i] 和 A[j] 共用一个大于 1 的公因数时，A[i] 和 A[j] 之间才有一条边。返回图中最大连通组件的大小。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/largest-component-size-by-common-factor著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">p13</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p13 paP13 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">p13</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paP13<span class="token punctuation">.</span><span class="token function">largestComponentSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">largestComponentSize</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> maxVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxVal <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 0 位置不使用，因此需要 + 1</span>            UnionFind unionFind <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>maxVal <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">double</span> upBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> upBound<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        unionFind<span class="token punctuation">.</span><span class="token function">unionElements</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        unionFind<span class="token punctuation">.</span><span class="token function">unionElements</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将候选数组映射成代表元，统计代表元出现的次数，找出最大者</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cnt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxVal <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> root <span class="token operator">=</span> unionFind<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">zhan</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        System.out.print(a+":"+b+":::");</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>r<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r <span class="token operator">=</span> a<span class="token operator">%</span>b<span class="token punctuation">;</span>            a<span class="token operator">=</span>b<span class="token punctuation">;</span>            b<span class="token operator">=</span>r<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        System.out.println(a);</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parents<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//rank[i]表示i为根的集合所表示的树的层数，而不是上面的基于元素个数大小</span>                <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rank<span class="token punctuation">;</span>                <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>            parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>             rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//向上找到根结点</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token operator">!=</span>parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> parents<span class="token punctuation">[</span>parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                e <span class="token operator">=</span> parents<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">unionElements</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//本身就是一个根结点，说明在同一个集合</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>qRoot <span class="token operator">==</span> pRoot<span class="token punctuation">)</span> <span class="token keyword">return</span> size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据根结点树的高度来判断合并方向</span>            <span class="token comment" spellcheck="true">//层级矮的树往层级高的树合并并不需要维护rank</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rank<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">&lt;</span>rank<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                parents<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>                size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rank<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token operator">></span>rank<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                parents<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">=</span> pRoot<span class="token punctuation">;</span>                size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token operator">+=</span> size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这时候就会高度+1，比如最开始1，2两个元素合并，就是1&lt;-2，高度为2，如果有1&lt;-2，3&lt;-4合并，就是1&lt;-2，1&lt;-3&lt;-4高度就是3</span>                parents<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>                size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>                rank<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink水涨船高：EventTime和WaterMark</title>
      <link href="/2020/04/02/Flink%E6%B0%B4%E6%B6%A8%E8%88%B9%E9%AB%98%EF%BC%9AEventTime%E5%92%8CWaterMark/"/>
      <url>/2020/04/02/Flink%E6%B0%B4%E6%B6%A8%E8%88%B9%E9%AB%98%EF%BC%9AEventTime%E5%92%8CWaterMark/</url>
      
        <content type="html"><![CDATA[<p><strong>之前对于ProcessingTime，作为一种当前计算机的处理时间，我们不用在意它数据到来的顺序，一切以我当前计算机的时间为准，不用协调其他的计算机节点。</strong><br><strong>但是呢对于EventTime，拿我们Web网站的日志来说，EventTime即是日志中的时间戳，但是发送数据的情况不可能总是那么理想，到达Flink的顺序不可能刚好是时间戳的顺序，为了控制这种乱序的情况，引入了WaterMark，中文翻译暂时是水位线，也可以翻译成水印，但是个人忠于水位线</strong><br><strong>它作为一种衡量EventTime时间的标准，也作为事件传输在流中</strong></p><hr><h4 id="串行中的WaterMark"><a href="#串行中的WaterMark" class="headerlink" title="串行中的WaterMark"></a>串行中的WaterMark</h4><p><img src="https://img-blog.csdnimg.cn/20200304141430495.png" alt="在这里插入图片描述"><br>**上面这个图中，方框中的数字代表EventTime，而WaterMark插入在这些时间之中，它代表所有&lt;=T的时间戳都来了。比如W(11)就说明&lt;=11的时间的事件都来了。但是这样也难免会出现一些问题，比如硬是有一些之前的数据延迟到达，</p><hr><h4 id="并行中的WaterMark"><a href="#并行中的WaterMark" class="headerlink" title="并行中的WaterMark"></a>并行中的WaterMark</h4><p><img src="https://img-blog.csdnimg.cn/20200304142538781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对于AB：Map算子和CD的window算子，而AB是同一算子并行计算，CD是同一算子并行计算。<br><strong>在A点的watermark是29，在B的watermark是17，那么通过到下个算子后，因为中间有个过程类似于分流或者说shuffle，导致A和B的watermark都进入了C和D</strong><br><strong>对于C和D来说，他们都接受到多个WaterMark，这时候他们会选择最小的那个作为自己的WaterMark，然后将自己的WaterMark发给下游，也就四下一个算子。</strong></p><hr><h3 id="原函数发出Watermark"><a href="#原函数发出Watermark" class="headerlink" title="原函数发出Watermark"></a>原函数发出Watermark</h3><p>这是一个原函数，随机发出数据了并带有时间戳和watermark</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> flinkjava<span class="token punctuation">.</span>source<span class="token punctuation">;</span><span class="token keyword">import</span> flinkjava<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>elements<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>SourceFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>watermark<span class="token punctuation">.</span>Watermark<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">source1</span> <span class="token keyword">implements</span> <span class="token class-name">SourceFunction</span><span class="token operator">&lt;</span>elements<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isRunning<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>SourceContext<span class="token operator">&lt;</span>elements<span class="token operator">></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"ha"</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"rose"</span><span class="token punctuation">,</span><span class="token string">"ongbo"</span><span class="token punctuation">,</span><span class="token string">"li"</span><span class="token punctuation">,</span><span class="token string">"zhou"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Long timestamp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            elements elem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">elements</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>timestamp<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输送元素和时间戳</span>            ctx<span class="token punctuation">.</span><span class="token function">collectWithTimestamp</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//发射水位线</span>            ctx<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        isRunning<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> flinkjava<span class="token punctuation">.</span>Task<span class="token punctuation">;</span><span class="token keyword">import</span> flinkjava<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>elements<span class="token punctuation">;</span><span class="token keyword">import</span> flinkjava<span class="token punctuation">.</span>source<span class="token punctuation">.</span>source1<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>ProcessWindowFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>TimeWindow<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">task1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置事件时间</span>        env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//引入soruce</span>        source1 source1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">source1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStreamSource<span class="token operator">&lt;</span>elements<span class="token operator">></span> sourcestream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span>source1<span class="token punctuation">)</span><span class="token punctuation">;</span>        sourcestream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>elements<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>elements value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>               <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProcessWindowFunction</span><span class="token operator">&lt;</span>elements<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> TimeWindow<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Context context<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>elements<span class="token operator">></span> elements<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"触发了一次窗口了："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Iterator<span class="token operator">&lt;</span>elements<span class="token operator">></span> iterator <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"currentWaterMark:"</span><span class="token operator">+</span>context<span class="token punctuation">.</span><span class="token function">currentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   starttime:"</span><span class="token operator">+</span>context<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   endtime:"</span><span class="token operator">+</span>                                    context<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418095934185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到了，每一行输出都是一个window，只是相同时间的window的key不同而已了，但是呢，我们输出的时候会是以一个window时间输出所有key的window，由此看出，这个watermark是保存在了某一个机器上，而不是每个key一个watermark，在同一个机器上同一task共享这个，所以呢，但最迟的数据，也就是某一个window时间窗口的最后面那个值来了，那么就是要出发所有的窗口了，所以所有的key共享了同一个task了,但是只限于分配到同一个task的key。</p><hr><h3 id="自定义发出WaterMark"><a href="#自定义发出WaterMark" class="headerlink" title="自定义发出WaterMark"></a>自定义发出WaterMark</h3><p>通过实现AssignerWithPeriodicWatermarks或者AssignerWithPunctuatedWatermarks接口来自己发出时间戳。前者是定期发出，后者是基于某些特殊的元素发出。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><hr><h3 id="Flink中提供的WaterMark实现"><a href="#Flink中提供的WaterMark实现" class="headerlink" title="Flink中提供的WaterMark实现"></a>Flink中提供的WaterMark实现</h3><h5 id="Assigners-with-ascending-timestamps"><a href="#Assigners-with-ascending-timestamps" class="headerlink" title="Assigners with ascending timestamps"></a>Assigners with ascending timestamps</h5><p>递增的时间戳实现：</p><pre class=" language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>MyEvent<span class="token operator">></span> stream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>DataStream<span class="token operator">&lt;</span>MyEvent<span class="token operator">></span> withTimestampsAndWatermarks <span class="token operator">=</span>    stream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AscendingTimestampExtractor</span><span class="token operator">&lt;</span>MyEvent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractAscendingTimestamp</span><span class="token punctuation">(</span>MyEvent element<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200304145452672.png" alt="在这里插入图片描述"><br>看他是实现了AssignerWithPeriodicWatermarks<T>，它是一种理想状况，即所有的元素都按序到达了，</p><h5 id="Assigners-allowing-a-fixed-amount-of-lateness"><a href="#Assigners-allowing-a-fixed-amount-of-lateness" class="headerlink" title="Assigners allowing a fixed amount of lateness"></a>Assigners allowing a fixed amount of lateness</h5><p><strong>某些情况下，比如当前节点WaterMark为19，所以认为&lt;19的事件都认为到了，但是就是有可能有个17的延迟了，所以这时候就需要我们允许这种延迟的情况</strong></p><pre class=" language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>MyEvent<span class="token operator">></span> stream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>DataStream<span class="token operator">&lt;</span>MyEvent<span class="token operator">></span> withTimestampsAndWatermarks <span class="token operator">=</span>    stream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token operator">&lt;</span>MyEvent<span class="token operator">></span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span>MyEvent element<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200304145628126.png" alt="在这里插入图片描述"><br>它是基于AssignerWithPeriodicWatermarks<T>接口实现，和上面一样，都是周期性的发出WaterMark。不同的时，它可以修复上面情况的延迟，即允许数据在窗口到期后一定时间内在接受当前窗口的数据。</p>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 延迟时间 </tag>
            
            <tag> WaterMark </tag>
            
            <tag> EventTime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站日志实时分析（一）：flume+kafka+Flink连通</title>
      <link href="/2020/03/31/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97%E5%AE%9E%E6%97%B6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Aflume+kafka+Flink%E8%BF%9E%E9%80%9A/"/>
      <url>/2020/03/31/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97%E5%AE%9E%E6%97%B6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Aflume+kafka+Flink%E8%BF%9E%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200302115732588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="这里flume-kafka-Flink-Cluster总体架构就是这个样子。"><a href="#这里flume-kafka-Flink-Cluster总体架构就是这个样子。" class="headerlink" title="这里flume+kafka+Flink Cluster总体架构就是这个样子。"></a>这里flume+kafka+Flink Cluster总体架构就是这个样子。</h6><h6 id="我们将多个Tomcat-Server的Web服务器，或者其他的网站服务器都看你而定，没台节点上都配置了Flume-Agent，用来收集本地日志目录。然后在另一台节点配置了Flume-Consolidation-Agent，用来收集各个Web服务器的Flume-Agent的数据，然后送入Kafka-Cluster。然后Kafka-Cluster的数据交由Flink-Cluster消费，从而将数据展示在Web前端"><a href="#我们将多个Tomcat-Server的Web服务器，或者其他的网站服务器都看你而定，没台节点上都配置了Flume-Agent，用来收集本地日志目录。然后在另一台节点配置了Flume-Consolidation-Agent，用来收集各个Web服务器的Flume-Agent的数据，然后送入Kafka-Cluster。然后Kafka-Cluster的数据交由Flink-Cluster消费，从而将数据展示在Web前端" class="headerlink" title="我们将多个Tomcat Server的Web服务器，或者其他的网站服务器都看你而定，没台节点上都配置了Flume Agent，用来收集本地日志目录。然后在另一台节点配置了Flume Consolidation Agent，用来收集各个Web服务器的Flume Agent的数据，然后送入Kafka Cluster。然后Kafka Cluster的数据交由Flink Cluster消费，从而将数据展示在Web前端"></a>我们将多个Tomcat Server的Web服务器，或者其他的网站服务器都看你而定，没台节点上都配置了Flume Agent，用来收集本地日志目录。然后在另一台节点配置了Flume Consolidation Agent，用来收集各个Web服务器的Flume Agent的数据，然后送入Kafka Cluster。然后Kafka Cluster的数据交由Flink Cluster消费，从而将数据展示在Web前端</h6><h5 id="flume1"><a href="#flume1" class="headerlink" title="flume1"></a>flume1</h5><pre class=" language-bash"><code class="language-bash">ZooKeeper -server host:port cmd args<span class="token comment" spellcheck="true">#主要作用是监听文件中的新增数据，采集到数据之后，输出到avro</span><span class="token comment" spellcheck="true">#    注意：Flume agent的运行，主要就是配置source channel sink</span><span class="token comment" spellcheck="true">#  下面的a1就是agent的代号，source叫r1 channel叫c1 sink叫k1</span>a1.sources <span class="token operator">=</span> r1a1.sinks <span class="token operator">=</span> k1a1.channels <span class="token operator">=</span> c1<span class="token comment" spellcheck="true">#对于source的配置描述 监听文件中的新增数据 exec</span>a1.sources.r1.type <span class="token operator">=</span> <span class="token function">exec</span>a1.sources.r1.command  <span class="token operator">=</span> <span class="token function">tail</span> -F /home/uplooking/data/data-clean/data-access.log<span class="token comment" spellcheck="true">#对于sink的配置描述 使用avro日志做数据的消费</span>a1.sinks.k1.type <span class="token operator">=</span> avroa1.sinks.k1.hostname <span class="token operator">=</span> localhosta1.sinks.k1.port <span class="token operator">=</span> 9000<span class="token comment" spellcheck="true">#对于channel的配置描述 使用文件做数据的临时缓存 这种的安全性要高</span>a1.channels.c1.type <span class="token operator">=</span> <span class="token function">file</span>a1.channels.c1.checkpointDir <span class="token operator">=</span> /home/uplooking/data/flume/checkpointa1.channels.c1.dataDirs <span class="token operator">=</span> /home/uplooking/data/flume/data<span class="token comment" spellcheck="true">#通过channel c1将source r1和sink k1关联起来</span>a1.sources.r1.channels <span class="token operator">=</span> c1a1.sinks.k1.channel <span class="token operator">=</span> c1</code></pre><pre class=" language-bash"><code class="language-bash"> 执行命令flume-ng agent --conf conf -n a1 -f 上面这个文件的位置 <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span></code></pre><h5 id="flume2同上，都是一台web服务器"><a href="#flume2同上，都是一台web服务器" class="headerlink" title="flume2同上，都是一台web服务器"></a>flume2同上，都是一台web服务器</h5><h5 id="flume3"><a href="#flume3" class="headerlink" title="flume3"></a>flume3</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#主要作用是监听目录中的新增文件，采集到数据之后，输出到kafka</span><span class="token comment" spellcheck="true">#    注意：Flume agent的运行，主要就是配置source channel sink</span><span class="token comment" spellcheck="true">#  下面的a1就是agent的代号，source叫r1 channel叫c1 sink叫k1</span>a1.sources <span class="token operator">=</span> r1a1.sinks <span class="token operator">=</span> k1a1.channels <span class="token operator">=</span> c1<span class="token comment" spellcheck="true">#对于source的配置描述 监听avro</span>a1.sources.r1.type <span class="token operator">=</span> avroa1.sources.r1.bind <span class="token operator">=</span> 0.0.0.0a1.sources.r1.port <span class="token operator">=</span> 9000<span class="token comment" spellcheck="true">#对于sink的配置描述 使用kafka做数据的消费</span>a1.sinks.k1.type <span class="token operator">=</span> org.apache.flume.sink.kafka.KafkaSinka1.sinks.k1.topic <span class="token operator">=</span> f-k-sa1.sinks.k1.brokerList <span class="token operator">=</span> 114.116.219.197:5008,114.116.220.98:5008,114.116.199.154:5008a1.sinks.k1.requiredAcks <span class="token operator">=</span> 1a1.sinks.k1.batchSize <span class="token operator">=</span> 20<span class="token comment" spellcheck="true">#对于channel的配置描述 使用内存缓冲区域做数据的临时缓存</span>a1.channels.c1.type <span class="token operator">=</span> memorya1.channels.c1.capacity <span class="token operator">=</span> 1000a1.channels.c1.transactionCapacity <span class="token operator">=</span> 100<span class="token comment" spellcheck="true">#通过channel c1将source r1和sink k1关联起来</span>a1.sources.r1.channels <span class="token operator">=</span> c1a1.sinks.k1.channel <span class="token operator">=</span> c1</code></pre><pre class=" language-bash"><code class="language-bash">flume-ng agent --conf conf -n a1 -f 上面这个文件的位置 <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span></code></pre><h5 id="前面所有的过程都需要你能够把kafka，flume搭建好，这里就做一下flume-kafka-flink的整合"><a href="#前面所有的过程都需要你能够把kafka，flume搭建好，这里就做一下flume-kafka-flink的整合" class="headerlink" title="前面所有的过程都需要你能够把kafka，flume搭建好，这里就做一下flume+kafka+flink的整合"></a>前面所有的过程都需要你能够把kafka，flume搭建好，这里就做一下flume+kafka+flink的整合</h5><h6 id="由于Web暂时还没写，我们直接往日志目录里面写数据，先看看flink代码是怎么样的，这是一段关于电商的热门商品统计的实时数据分析"><a href="#由于Web暂时还没写，我们直接往日志目录里面写数据，先看看flink代码是怎么样的，这是一段关于电商的热门商品统计的实时数据分析" class="headerlink" title="由于Web暂时还没写，我们直接往日志目录里面写数据，先看看flink代码是怎么样的，这是一段关于电商的热门商品统计的实时数据分析"></a>由于Web暂时还没写，我们直接往日志目录里面写数据，先看看flink代码是怎么样的，这是一段关于电商的热门商品统计的实时数据分析</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ongbo<span class="token punctuation">.</span>hotAnalysis<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>AggregateFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token punctuation">{</span>ListState<span class="token punctuation">,</span> ListStateDescriptor<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>function<span class="token punctuation">.</span>WindowFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>TimeWindow<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaConsumer<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ListBuffer<span class="token comment" spellcheck="true">/**定义输入数据的样例类 */</span><span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">UserBehavior</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> Long<span class="token punctuation">,</span> itemId<span class="token operator">:</span> Long<span class="token punctuation">,</span> cateGoryId<span class="token operator">:</span> Int<span class="token punctuation">,</span>behavior<span class="token operator">:</span> String<span class="token punctuation">,</span> timestamp<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定义窗口聚合结果样例类</span><span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">ItemViewCount</span><span class="token punctuation">(</span>itemId<span class="token operator">:</span> Long<span class="token punctuation">,</span> windowEnd<span class="token operator">:</span> Long<span class="token punctuation">,</span> count<span class="token operator">:</span> Long<span class="token punctuation">)</span>object HotItems <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1:创建执行环境</span>    val env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//设置为事件事件</span>    env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//2:读取数据</span>    <span class="token comment" spellcheck="true">/*kafka源*/</span>    val properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span><span class="token string">"114.116.219.197:5008,114.116.220.98:5008,114.116.199.154:5008"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span><span class="token string">"web-consumer-group"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"auto.offset.reset"</span><span class="token punctuation">,</span><span class="token string">"latest"</span><span class="token punctuation">)</span>    val dataStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlinkKafkaConsumer</span><span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"weblog"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    val dataStream = env.readTextFile("/Users/ongbo/Maven/bin/UserBehaviorAnalysis/HotItemAnalysis/src/main/resources/UserBehavior.csv")</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data:"</span><span class="token operator">+</span>data<span class="token punctuation">)</span>        val dataArray <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//        if(dataArray(0).equals("ij"))</span>        <span class="token function">UserBehavior</span><span class="token punctuation">(</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> <span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> <span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span> <span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> <span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">assignAscendingTimestamps</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>timestamp <span class="token operator">*</span> 1000L<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//3:transform处理数据</span>    val processStream <span class="token operator">=</span> dataStream      <span class="token comment" spellcheck="true">//筛选出埋点pv数据</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>behavior<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//先对itemID进行分组</span>      <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>itemId<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//然后设置timeWindow，size为1小时，步长为5分钟的滑动窗口</span>      <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//窗口聚合</span>      <span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountAgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WindowResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>windowEnd<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//按照窗口分组</span>      <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopNHotItems</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sink：输出数据</span>    processStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"processStream::"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    dataStream.print()</span>    <span class="token comment" spellcheck="true">//执行</span>    env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"hot Items Job"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*自定义预聚合函数*/</span><span class="token keyword">class</span> <span class="token class-name">CountAgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">AggregateFunction</span><span class="token punctuation">[</span>UserBehavior<span class="token punctuation">,</span> Long<span class="token punctuation">,</span> Long<span class="token punctuation">]</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//累加器初始值</span>  override def <span class="token function">createAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">//每来一次就加一</span>  override def <span class="token function">add</span><span class="token punctuation">(</span>in<span class="token operator">:</span> UserBehavior<span class="token punctuation">,</span> acc<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> acc<span class="token operator">+</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">//</span>  override def <span class="token function">getResult</span><span class="token punctuation">(</span>acc<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> acc  override def <span class="token function">merge</span><span class="token punctuation">(</span>acc<span class="token operator">:</span> Long<span class="token punctuation">,</span> acc1<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> acc <span class="token operator">+</span> acc1<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义窗口函数，输出ItemViewCount</span><span class="token keyword">class</span> <span class="token class-name">WindowResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">WindowFunction</span><span class="token punctuation">[</span>Long<span class="token punctuation">,</span>ItemViewCount<span class="token punctuation">,</span> Long<span class="token punctuation">,</span> TimeWindow<span class="token punctuation">]</span><span class="token punctuation">{</span>  override def <span class="token function">apply</span><span class="token punctuation">(</span>key<span class="token operator">:</span> Long<span class="token punctuation">,</span> window<span class="token operator">:</span> TimeWindow<span class="token punctuation">,</span> input<span class="token operator">:</span> Iterable<span class="token punctuation">[</span>Long<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span>  <span class="token punctuation">{</span>    out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">ItemViewCount</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>window<span class="token punctuation">.</span>getEnd<span class="token punctuation">,</span>input<span class="token punctuation">.</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义处理函数</span><span class="token keyword">class</span> <span class="token class-name">TopNHotItems</span><span class="token punctuation">(</span>topsize<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">KeyedProcessFunction</span><span class="token punctuation">[</span>Long<span class="token punctuation">,</span> ItemViewCount<span class="token punctuation">,</span> String<span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> var itemState<span class="token operator">:</span> ListState<span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span> <span class="token operator">=</span> _  override def <span class="token function">open</span><span class="token punctuation">(</span>parameters<span class="token operator">:</span> Configuration<span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    itemState <span class="token operator">=</span> getRuntimeContext<span class="token punctuation">.</span><span class="token function">getListState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListStateDescriptor</span><span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"item-state"</span><span class="token punctuation">,</span> classOf<span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  override def <span class="token function">processElement</span><span class="token punctuation">(</span>value<span class="token operator">:</span> ItemViewCount<span class="token punctuation">,</span> ctx<span class="token operator">:</span> KeyedProcessFunction<span class="token punctuation">[</span>Long<span class="token punctuation">,</span> ItemViewCount<span class="token punctuation">,</span> String<span class="token punctuation">]</span>#Context<span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//把每条数据存入状态列表</span>    itemState<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//注册一个定时器</span>    ctx<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerEventTimeTimer</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>windowEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//定时器触发时，对所有的数据排序，并输出结果</span>  override def <span class="token function">onTimer</span><span class="token punctuation">(</span>timestamp<span class="token operator">:</span> Long<span class="token punctuation">,</span> ctx<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token punctuation">[</span>Long<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>com<span class="token punctuation">.</span>ongbo<span class="token punctuation">.</span>hotAnalysis<span class="token punctuation">.</span>ItemViewCount<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">]</span>#OnTimerContext<span class="token punctuation">,</span> out<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">[</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将所有state中的数据取出，放到一个list Buffer中</span>    val allItems<span class="token operator">:</span> ListBuffer<span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>JavaConversions<span class="token punctuation">.</span>_    <span class="token keyword">for</span><span class="token punctuation">(</span>item <span class="token operator">&lt;</span><span class="token operator">-</span> itemState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      allItems <span class="token operator">+=</span> item    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按照点计量count大小排序,sortBy默认是升序,并且取前三个</span>    val sortedItems <span class="token operator">=</span> allItems<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span>Long<span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>topsize<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//清空状态</span>    itemState<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//格式化输出排名结果</span>    val result <span class="token operator">:</span> StringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span>    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"时间："</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//输出每一个商品信息</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token operator">-</span> sortedItems<span class="token punctuation">.</span>indices<span class="token punctuation">)</span><span class="token punctuation">{</span>      val currentItem <span class="token operator">=</span> <span class="token function">sortedItems</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  商品ID："</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>currentItem<span class="token punctuation">.</span>itemId<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  浏览量："</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>currentItem<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"============================\n"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//控制输出频率</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*自定义预聚合函数计算平均数*/</span><span class="token keyword">class</span> <span class="token class-name">AverageAgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">AggregateFunction</span><span class="token punctuation">[</span>UserBehavior<span class="token punctuation">,</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">,</span> Double<span class="token punctuation">]</span><span class="token punctuation">{</span>  override def <span class="token function">createAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>0L<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  override def <span class="token function">add</span><span class="token punctuation">(</span>in<span class="token operator">:</span> UserBehavior<span class="token punctuation">,</span> acc<span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span>_1<span class="token operator">+</span>in<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> acc<span class="token punctuation">.</span>_2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  override def <span class="token function">getResult</span><span class="token punctuation">(</span>acc<span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token operator">=</span> acc<span class="token punctuation">.</span>_1 <span class="token operator">/</span>acc<span class="token punctuation">.</span>_2  override def <span class="token function">merge</span><span class="token punctuation">(</span>acc<span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">,</span> acc1<span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span>_1<span class="token operator">+</span>acc1<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> acc<span class="token punctuation">.</span>_2<span class="token operator">+</span>acc1<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h6 id="下面往日志目录里面写日志"><a href="#下面往日志目录里面写日志" class="headerlink" title="下面往日志目录里面写日志"></a>下面往日志目录里面写日志</h6><pre class=" language-bash"><code class="language-bash">543462,1715,1464116,pv,1511658000662867,2244074,1575622,pv,1511658000561558,3611281,965809,pv,1511658000894923,3076029,1879194,pv,1511658000834377,4541270,3738615,pv,1511658000315321,942195,4339722,pv,1511658000625915,1162383,570735,pv,1511658000578814,176722,982926,pv,1511658000873335,1256540,1451783,pv,1511658000429984,4625350,2355072,pv,1511658000866796,534083,4203730,pv,1511658000937166,321683,2355072,pv,1511658000156905,2901727,3001296,pv,1511658000758810,5109495,1575622,pv,1511658000107304,111477,4173315,pv,1511658000452437,3255022,5099474,pv,1511658000813974,1332724,2520771,buy,1511658000524395,3887779,2366905,pv,1511658000470572,3760258,1299190,pv,1511658001543789,3110556,4558987,cart,1511658001354759,2191348,4756105,pv,1511658001382009,2123538,4801426,pv,1511658001677046,1598945,4145813,pv,1511658001946161,3021357,1506018,pv,1511658001464646,2512167,2733371,pv,15116580011007641,5046581,2355072,pv,1511658001723938,4719377,1464116,pv,1511658001513008,3472922,401357,pv,1511658001769215,22738,2355072,pv,1511658002652863,4967749,1320293,pv,1511658002801610,900305,634390,pv,1511658002411478,3259235,2667323,pv,1511658002431664,764155,2520377,pv,1511658002487768,4125503,2465336,pv,1511658002223813,4104826,2042400,pv,1511658002672849,1822977,4801426,fav,1511658002550127,4602135,65362,pv,1511658002205752,1467139,171529,pv,151165800264419,2029769,2729260,pv,1511658002756093,2881426,2520377,pv,151165800248353,4362292,583014,pv,1511658002355509,4712764,4082778,pv,1511658003826492,4016552,2735466,pv,1511658003624915,2243311,2520377,pv,1511658003682317,655740,982926,fav,1511658003677621,1051389,4801426,pv,1511658003422974,4649255,4818107,pv,151165800386512,563566,4756105,pv,1511658003565218,2331370,3607361,pv,1511658003232313,4182588,1730376,pv,1511658003436966,1329977,3607361,cart,1511658003561158,269170,2342116,fav,1511658003344379,3318242,2920476,cart,1511658003858204,2450718,235534,pv,1511658004833924,3190176,1051370,pv,1511658004992993,1900968,3794706,fav,1511658004911930,1150136,2131531,pv,1511658004736959,319911,4756105,pv,151165800482170,3588374,2465336,pv,1511658004587599,2067643,4818107,cart,1511658004367451,15775,4756105,pv,1511658004428316,2478780,4284875,pv,1511658004284910,3680091,3829657,pv,1511658004345119,737662,4357323,pv,1511658004551442,1762997,1879194,pv,1511658004550384,3908776,1029459,pv,1511658004677500,4534693,2640118,pv,1511658004398626,2791489,1467750,pv,1511658004118053,3545571,2433095,pv,1511658005457401,4063698,4801426,pv,151165800545105,3234847,3141941,fav,1511658005604760,2661651,3738615,pv,1511658005905383,2064903,2939262,cart,1511658005740788,3657484,4936889,pv,1511658005456838,1242724,4756105,fav,1511658005585217,215764,2640118,pv,1511658006658185,4025021,4048584,fav,1511658006210431,2035568,2328673,pv,1511658006602619,1838725,2247787,pv,1511658006860388,3797303,4357323,pv,1511658006175334,2624960,801221,pv,151165800672403,4249007,1320293,pv,1511658006307385,2551880,4050612,pv,1511658006819283,2094785,2520377,pv,1511658006801272,565658,1158475,pv,1511658006344680,3224461,4789432,pv,1511658006125206,1102775,622168,pv,151165800659131,1960832,154040,pv,1511658006252339,2455388,3745824,pv,1511658006794780,4465604,4242717,pv,1511658007388283,4701157,1457367,pv,1511658007416261,2101120,1299190,pv,1511658007231758,3622677,4758477,pv,151165800792253,642337,4135185,pv,1511658007297958,1762578,4801426,pv,1511658007786771,1940649,1320293,pv,1511658007789048,3144191,2355072,pv,1511658007895384,1138468,1602288,pv,1511658007578800,1324176,4135836,pv,1511658007886777,4606952,996587,pv,1511658008364036,2340632,2924150,pv,1511658008783973,3935641,982926,pv,1511658008483113,1158047,2030976,pv,1511658008321087,3987903,149192,fav,1511658008986762,2704613,4217906,pv,15116580081003495,3717164,535180,pv,151165800832983,1445878,2030976,pv,1511658008580912,1837669,4263418,pv,1511658008498371,980167,3607361,cart,151165800814830,3878488,3002561,pv,1511658008457499,4796667,2355072,pv,1511658008879381,881945,3004853,pv,1511658008606403,1404468,781315,pv,1511658008543832,3007018,2735466,pv,1511658009824188,161847,4801426,pv,1511658009750784,4727562,1286537,cart,151165800987479,5157294,2158079,pv,1511658009147730,1278040,4801426,pv,1511658009865088,3924907,411153,pv,15116580091006129,1993506,2939262,pv,1511658009401750,3127850,2640118,pv,1511658009501335,2005713,1092085,pv,1511658009266486,1777124,4672807,cart,151165800923125,4680673,1756314,buy,1511658009309473,3665543,2640118,pv,1511658009547966,693058,2129666,pv,1511658009599118,2771420,4159072,pv,1511658010684544,2335709,1451814,pv,1511658010130320,2469137,4756105,pv,1511658010464365,1474058,3794706,pv,1511658010522088,4170363,149192,pv,1511658010402626,3244134,4801426,pv,151165801019445,2183531,4756105,pv,151165801044670,5140156,2131531,fav,1511658010522815,2092266,2355072,pv,1511658010105757,4175185,3191556,cart,1511658010585344,1858802,267209,pv,1511658010412009,3422566,2355072,pv,1511658010872433,1984468,2520377,pv,1511658010463780,3377720,745134,pv,1511658010359932,5035793,3002561,pv,1511658011742048,3851196,4051859,pv,1511658011778656,559998,4874384,pv,1511658011326402,2103118,846990,pv,1511658011453328,2158281,2920476,pv,1511658011362515,1892018,883960,pv,1511658011763534,2402567,3496816,pv,1511658011935169,55330,4339722,pv,1511658011361299,1505783,982926,pv,1511658011628949,4210587,903809,cart,1511658011989894,3419383,1474371,fav,1511658012200517,4670782,4181361,cart,1511658012664416,2941436,1789614,pv,1511658012348706,2605837,4163659,pv,1511658012959846,5083345,479837,pv,1511658012848070,988062,2342116,pv,1511658012897594,4298799,4173315,pv,1511658012951961,1221785,4756105,pv,1511658012549488,2423996,4022701,pv,1511658012524655,1925334,2033408,pv,1511658013738256,496639,3247211,pv,1511658013778173,1032031,784897,cart,1511658013990673,1476503,3102419,pv,1511658013700498,1993845,4173315,pv,1511658013905860,2369381,1158475,pv,1511658013893832,1153119,982926,pv,1511658013602895,3538101,4756105,pv,1511658013542932,1360737,903809,pv,1511658013283950,3179868,3171095,pv,1511658013789348,3841875,737184,pv,1511658013756750,3534407,4129924,fav,1511658013196825,4765909,2885642,pv,151165801320676,2875398,2885642,pv,1511658013228104,2062543,2355072,pv,1511658013773198,4200289,982926,pv,1511658014677896,2165635,1029459,pv,1511658014158600,3312738,1697889,fav,1511658014287521,972793,1194737,pv,1511658014549674,625283,3767409,pv,1511658014631139,4364531,384755,pv,1511658014375063,4069076,3607361,pv,1511658014306072,1966569,285583,pv,1511658014643526,282851,1575622,pv,1511658014764411,4580986,982926,pv,1511658014976200,3266415,2355072,pv,1511658014918987,298223,1859277,pv,151165801418430,1882195,1080785,pv,1511658014629115,3093045,1320293,pv,1511658014332520,5026647,2355072,pv,1511658014476980,2311313,4801426,pv,1511658014157636,4858109,672001,pv,1511658015798555,1295731,2800021,pv,1511658015494300,4333209,3002561,cart,1511658015122406,2059276,4801426,pv,1511658015437344,4061918,4558987,pv,1511658015220037,2939369,3720767,buy,1511658015537712,2563909,3100759,pv,1511658015520145,4465657,1320293,pv,151165801538574,1201477,3125533,pv,15116580151014253,2963034,1464116,pv,1511658015915638,4800478,2629787,pv,1511658015768844,2116634,4757812,pv,151165801574745,2231297,323851,fav,1511658015326607,3693156,2066955,pv,1511658015651189,4000666,886203,pv,1511658015778396,3607696,5012555,pv,1511658016493284,127403,359388,pv,1511658016254349,4445002,2355072,pv,1511658016415381,3520931,2419959,pv,1511658016516789,18479,4145813,pv,1511658016644777,987403,982926,pv,1511658016317457,1546479,3776866,pv,1511658016156905,4377552,1168596,pv,1511658016740608,2405231,4173315,pv,1511658016341260,5034946,4756105,pv,1511658016806318,3525976,3299155,pv,1511658016674989,4568242,4284875,fav,1511658016889043,5015057,1281171,pv,1511658017912390,2303733,2735466,pv,1511658017393656,3569818,3738615,pv,1511658017225763,480292,500212,pv,1511658017334506,3722390,411153,pv,1511658017273314,4973721,4611962,pv,1511658017663193,2108019,2003083,pv,15116580171000034,800784,982926,pv,1511658018391116,1962121,4145813,pv,151165801840793,4153899,1320293,pv,1511658018280358,2654723,2520377,pv,1511658018344240,3712088,2390349,pv,1511658018691026,4022625,1126526,pv,1511658018688090,1502018,1879194,pv,1511658018947196,2259297,1406426,pv,1511658018518479,576777,411153,pv,1511658018789309,5136896,2981856,pv,1511658018248568,3349768,1045172,buy,1511658018392176,3742963,2066955,pv,1511658018460076,79067,4145813,fav,1511658018415381,98283,1104384,pv,1511658018104698,2500376,4159072,pv,1511658018854096,4858377,4145813,pv,1511658018587129,4427761,3776866,cart,151165801958778,630815,2355072,pv,1511658019250968,2335179,2355072,pv,1511658019380976,3933325,982926,pv,1511658019904253,1055751,471212,pv,1511658019907231,3686874,2812445,buy,1511658019377042,3549064,2355072,pv,1511658019356507,3220081,578983,pv,1511658019753856,2167638,4048584,fav,1511658019929073,1324319,1879194,pv,151165801943863,918139,982926,pv,151165801941109,4133170,3835723,buy,1511658020108015,4751201,411153,pv,1511658020285636,4130380,2355072,pv,1511658020395049,4346219,570735,cart,1511658020949647,4427447,4756105,pv,1511658020306072,1296281,3720767,pv,151165802069580,3928745,2671397,pv,1511658020735110,40025,2974419,cart,1511658020365717,1391888,2030976,pv,1511658020587754,4762986,3002561,pv,1511658020183966,1424015,4672807,pv,1511658020874905,876411,2465336,pv,1511658020789333,3383623,344833,pv,1511658020323387,1699578,982926,pv,1511658021530376,205888,5071267,pv,1511658021770137,1031049,154040,pv,1511658021732889,283410,3607361,pv,1511658021170558,3144143,2465336,pv,15116580211004611,201201,3419760,cart,1511658021121442,5073040,2355072,pv,1511658021511424,1078256,440901,pv,1511658021810879,4042749,3607361,pv,1511658021889013,1023293,634390,pv,1511658021641439,183845,4357323,pv,1511658021607188,3590098,2885642,pv,1511658021789271,5057422,245312,buy,1511658021350999,3956368,2945933,pv,1511658021974720,4838031,2072473,cart,1511658021460076,2147027,1320293,fav,1511658022956539,3937435,4801426,pv,1511658022682283,102982,1080785,pv,1511658022133319,2817626,4801426,pv,151165802282010,2788503,1216617,pv,1511658022417933,4159217,4756105,pv,1511658022719252,2161152,4145813,pv,1511658022386729,4115033,3343095,pv,1511658022460076,3268126,737184,fav,1511658022764871,564499,2640118,pv,1511658022599118,2335010,4159072,pv,1511658022463780,341543,820364,pv,1511658022377108,493618,3975787,cart,1511658022266094,3871120,2465336,pv,1511658022392064,4974340,4558987,pv,1511658022858761,5042307,4357323,pv,1511658023266992,3559268,4869428,pv,1511658023208833,3716643,383530,pv,1511658023244463,5059853,4145813,pv,1511658023874809,1024295,4466876,pv,151165802387520,1318574,4606718,pv,1511658023483594,1088111,2827444,pv,151165802329206,4448187,4756105,pv,1511658023186556,4070367,74446,pv,1511658023190940,833331,4604594,pv,1511658023201971,962676,2355072,pv,1511658023180695,1716295,2565857,pv,1511658023670681,4511840,846990,pv,1511658024843075,3665269,1080785,fav,1511658024409463,4443612,1722855,pv,1511658024145550,3900777,4993094,pv,1511658024608599,1097682,4082778,cart,1511658024997866,3002287,4082778,pv,1511658024436457,1884224,4915680,pv,1511658024517112,4526678,2520377,pv,1511658024659269,1605934,982926,pv,1511658025195725,5000029,4450414,pv,1511658025563203,1849653,4298656,pv,1511658025669210,4843772,570735,pv,1511658025445656,2581505,3381583,pv,151165802516103,3494764,2640118,pv,1511658025175769,776327,2465336,pv,1511658025960997,2649870,4756105,pv,1511658025995188,3017896,2355072,pv,1511658025475656,361127,3673049,pv,1511658025940124,176753,4411949,pv,1511658025538101,1732433,1787510,pv,1511658025416871,4981228,2858794,pv,1511658025256758,3889295,3800818,pv,1511658026511279,4601104,4868797,pv,1511658026880462,2780737,1859277,cart,1511658026163323,258231,1029459,pv,1511658026425634,4018832,4159072,pv,1511658026932384,2428269,982926,pv,1511658026565980,2988776,3075521,pv,1511658026551219,281111,350027,pv,151165802665944,4309207,3159480,pv,1511658026118861,512107,4145813,pv,151165802615696,1015021,3454970,pv,1511658027425200,2455388,3745824,pv,151165802755330,465280,2355072,pv,1511658027664146,1030747,3194735,fav,1511658027587248,1384198,634390,pv,1511658027472221,2895550,982926,pv,1511658027173290,416572,360294,pv,1511658027735750,2456660,1080785,pv,1511658027420860,1949459,1288487,pv,1511658027248955,229653,2195789,pv,1511658027745774,4756886,800581,pv,1511658027179889,2041935,2520377,pv,1511658027287035,3836534,625430,pv,1511658028196980,3445269,3108882,pv,1511658028550480,974291,869231,pv,1511658028585870,291358,4174942,pv,1511658028165889,4364728,2615163,pv,1511658028193922,4800535,3607361,pv,1511658028660013,1364114,4801426,pv,1511658028813479,158169,2355072,pv,1511658028261948,4698781,2520377,pv,1511658028120608,131099,876318,pv,1511658029268407,584693,3158249,pv,1511658029411536,2563526,4663501,pv,1511658029502196,936753,4145813,pv,1511658029652954,1362503,4284875,pv,151165802970758,3011543,2926020,pv,1511658029684074,2288156,377676,pv,1511658029515661,680174,2355072,pv,1511658029322508,2466347,2465336,pv,1511658030643826,4545733,873792,pv,1511658030447146,1436416,4331400,pv,1511658030646259,418486,119741,pv,1511658030288397,1926504,149192,pv,1511658030337203,1253410,405755,pv,1511658030219642,2704585,4148053,pv,1511658030992351,1452966,2303546,pv,1511658030860477,4319079,149192,pv,1511658030680394,2772093,3720767,pv,1511658030667912,1047955,1320293,pv,1511658030938116,2134897,2735466,pv,1511658030276252,3465909,1299190,pv,15116580301004505,4048232,145519,pv,1511658031954492,4932087,1320293,pv,1511658031271586,151399,578983,pv,1511658031629913,1014006,3702593,pv,1511658031879398,2473922,4756105,pv,1511658031644883,4961929,1573465,pv,151165803262574,169041,1807416,pv,1511658032643095,5119949,4357323,pv,151165803214391,2367378,2920476,pv,1511658032840495,3013895,2926020,pv,1511658032846863,1607283,1132429,pv,1511658032463414,4937993,3607361,pv,1511658032743967,491563,4244487,pv,1511658032571930,2104387,1646753,pv,1511658032337203,2407315,4715650,pv,151165803287004,3581433,690811,pv,1511658032808466,3209415,2355072,pv,1511658032834242,2646442,4357323,pv,15116580325855,1547334,1120543,pv,1511658032861315,4512645,3361496,fav,1511658032128765,1897815,4756105,pv,1511658033677500,4690832,3504022,pv,1511658033594637,3443787,3747017,pv,1511658033958078,952967,3177877,pv,1511658033455903,1725977,3904106,pv,1511658033441977,177176,50601,pv,1511658033391280,4307461,982926,pv,1511658033873094,2044886,2355072,pv,1511658033664177,1293088,5053508,pv,1511658034302778,3781391,1528133,pv,1511658034475563,4841577,1275696,cart,1511658034208142,3139742,4756105,pv,1511658034138026,3709805,3672452,pv,1511658034534394,3020956,2355072,pv,1511658034387963,1177970,2885642,pv,1511658034334506,2951108,411153,pv,1511658034274331,2394590,1464116,pv,1511658034356279,829406,1102540,pv,1511658034775853,3788823,4217906,pv,1511658034156203,4938048,2383838,pv,1511658034572844,1438423,2520377,pv,1511658035987111,2263608,245312,pv,1511658035231038,708261,1964754,fav,151165803581884,2437934,753984,pv,1511658035942856,4215633,4756105,pv,1511658035208061,2916548,4692440,pv,1511658035495163,5100809,1879194,pv,151165803543237,2393443,2355072,pv,1511658036750878,4729766,4672807,pv,1511658036882734,4273237,1540741,pv,1511658036400141,1714043,237446,pv,1511658036585344,646781,267209,pv,1511658036227633,3498188,4476428,pv,1511658036284584,2019640,3607361,cart,1511658036988694,3542016,982926,pv,1511658036164332,3158500,235534,pv,1511658036945934,2793460,3720767,pv,1511658036691649,437087,223690,pv,1511658036128816,2803125,3637084,pv,1511658036715158,1448525,1842993,pv,1511658036606841,4290041,3299155,cart,1511658037655163,3409614,4357323,pv,1511658037337203,1253410,405755,pv,1511658037169609,4290998,4731191,pv,1511658037515001,4142409,2735466,pv,1511658037525614,4397050,3738615,pv,151165803748008,3043421,4239038,pv,15116580371015928,2849670,2735466,pv,1511658037408783,703194,2885642,pv,151165803742364,3978662,611849,pv,1511658037790128,4946853,2096639,pv,1511658038226081,689681,4756105,pv,1511658038774686,96790,2188684,pv,1511658038317012,1665474,2355072,pv,1511658038211077,990967,570735,pv,1511658038879481,3523697,2154867,pv,151165803824625,5074681,2465336,pv,1511658038638709,3848680,1575622,pv,1511658038178232,1413610,149192,pv,151165803819742,4388000,200278,pv,1511658038216011,2678565,1548278,pv,1511658038709957,1969563,4606718,pv,1511658038106526,856738,1080785,pv,1511658038325562,363858,2735466,pv,1511658038979063,2452027,4022701,pv,1511658038451072,1035375,1320293,pv,1511658038374336,3615843,4801426,pv,1511658038466049,140210,1132429,pv,151165803838369,1780938,4357323,pv,151165803827948,1190005,1320293,pv,1511658038212574,321621,4756105,pv,1511658039793295,2941339,149192,pv,1511658039971953,1503702,4756105,pv,1511658039270332,1751547,4718907,pv,1511658039261666,5141180,2355072,pv,151165803979249,1336042,2465336,pv,1511658039743689,3161594,4181361,pv,1511658039187936,1209195,4145813,pv,1511658039954462,2653229,2448593,pv,1511658039505372,3578525,702060,pv,1511658039492876,2648336,35290,pv,1511658039572164,4818203,1464116,fav,1511658039204115,3552080,2477357,pv,1511658039342902,679860,4756105,pv,1511658039</code></pre><h6 id="上面就是模拟Web日志都一条条写入了Flume，然后flume就将其导入了Kafka，然后Flink作为消费者就会去消费数据，然后利用各种窗口操作就可以了OK。"><a href="#上面就是模拟Web日志都一条条写入了Flume，然后flume就将其导入了Kafka，然后Flink作为消费者就会去消费数据，然后利用各种窗口操作就可以了OK。" class="headerlink" title="上面就是模拟Web日志都一条条写入了Flume，然后flume就将其导入了Kafka，然后Flink作为消费者就会去消费数据，然后利用各种窗口操作就可以了OK。"></a>上面就是模拟Web日志都一条条写入了Flume，然后flume就将其导入了Kafka，然后Flink作为消费者就会去消费数据，然后利用各种窗口操作就可以了OK。</h6><p><img src="https://img-blog.csdnimg.cn/202003021550541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="上面就是实验结果，然后我们可以将这些数据提供给前台，或者可以给后台开发提供数据，可以作为热门商品推荐之类的。"><a href="#上面就是实验结果，然后我们可以将这些数据提供给前台，或者可以给后台开发提供数据，可以作为热门商品推荐之类的。" class="headerlink" title="上面就是实验结果，然后我们可以将这些数据提供给前台，或者可以给后台开发提供数据，可以作为热门商品推荐之类的。"></a>上面就是实验结果，然后我们可以将这些数据提供给前台，或者可以给后台开发提供数据，可以作为热门商品推荐之类的。</h6>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> Kafka </tag>
            
            <tag> 实时处理 </tag>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-归并排序及其优化</title>
      <link href="/2020/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
      <url>/2020/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="普通版本"><a href="#普通版本" class="headerlink" title="普通版本"></a>普通版本</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSortTopDown</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> backarray<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自顶向下递归归并排序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sortTopDown</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        backarray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>elems<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sortTopDown</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elems<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sortTopDown</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">>=</span>end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取中点</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分别对两边进行递归调用sortTopdown</span>        <span class="token function">sortTopDown</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span>start<span class="token punctuation">,</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sortTopDown</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//经过上面两个过程，能够保证两边分别有序</span>        <span class="token comment" spellcheck="true">//这时候经过merge，合并两边队列</span>        <span class="token function">merge</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> start<span class="token punctuation">,</span> backarray<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">,</span>j<span class="token operator">=</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>start<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>middle<span class="token punctuation">)</span> elems<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> backarray<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>end<span class="token punctuation">)</span> elems<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> backarray<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>backarray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> backarray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> elems<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span>backarray<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> elems<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> backarray<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="优化版本"><a href="#优化版本" class="headerlink" title="优化版本"></a>优化版本</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSortTopDownAdvance</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> backarray<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">mergesortTopDown</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        backarray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>elems<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">mergesortTopDown</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elems<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">mergesortTopDown</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insertsort</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        if(end&lt;=start) return;</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergesortTopDown</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span>start<span class="token punctuation">,</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergesortTopDown</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">,</span>elems<span class="token punctuation">[</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">mergeelems</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">mergeelems</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">,</span> <span class="token keyword">int</span> start <span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> start<span class="token punctuation">,</span> backarray<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">,</span>j<span class="token operator">=</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>start<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>middle<span class="token punctuation">)</span> elems<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> backarray<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>end<span class="token punctuation">)</span> elems<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> backarray<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>backarray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> backarray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> elems<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span>backarray<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> elems<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> backarray<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">insertsort</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">></span>start<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> elems<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">exch</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正常随机数组</span>                Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a11 <span class="token operator">=</span> RandomArray<span class="token punctuation">.</span><span class="token function">getRandomBoxedIntArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100000000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a12 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a11<span class="token punctuation">,</span> a11<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a13 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a11<span class="token punctuation">,</span> a11<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                 Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a14 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a11<span class="token punctuation">,</span> a11<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//大量重复数组</span>                Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a21 <span class="token operator">=</span> RandomArray<span class="token punctuation">.</span><span class="token function">getRandomBoxedIntArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a22 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a21<span class="token punctuation">,</span> a21<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                 Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a23 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a21<span class="token punctuation">,</span> a21<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a24 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a21<span class="token punctuation">,</span> a21<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组创建完毕！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//测试普通的排序</span>                StopWatch stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sortTopDown</span><span class="token punctuation">(</span>a11<span class="token punctuation">)</span><span class="token punctuation">;</span>                StdOut<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s (%.2f seconds)\n"</span><span class="token punctuation">,</span> <span class="token string">"sort method[random]:"</span><span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span><span class="token function">elapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">sortTopDown</span><span class="token punctuation">(</span>a21<span class="token punctuation">)</span><span class="token punctuation">;</span>                StdOut<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s (%.2f seconds)\n"</span><span class="token punctuation">,</span> <span class="token string">"sort method[random]:"</span><span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span><span class="token function">elapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MergeSortTopDownAdvance<span class="token punctuation">.</span><span class="token function">mergesortTopDown</span><span class="token punctuation">(</span>a12<span class="token punctuation">)</span><span class="token punctuation">;</span>                StdOut<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s (%.2f seconds)\n"</span><span class="token punctuation">,</span> <span class="token string">"sort method[random]:"</span><span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span><span class="token function">elapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 MergeSortTopDownAdvance<span class="token punctuation">.</span><span class="token function">mergesortTopDown</span><span class="token punctuation">(</span>a22<span class="token punctuation">)</span><span class="token punctuation">;</span>                StdOut<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s (%.2f seconds)\n"</span><span class="token punctuation">,</span> <span class="token string">"sort method[random]:"</span><span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span><span class="token function">elapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a11<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a21<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a12<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a22<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>100个数据</p><p><img src="https://img-blog.csdnimg.cn/20200404225810786.png" alt="在这里插入图片描述"><br>10000000个数据<br><img src="https://img-blog.csdnimg.cn/20200404225907430.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-堆排序</title>
      <link href="/2020/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200331215525986.gif#pic_center" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Sortpre<span class="token punctuation">;</span><span class="token keyword">import</span> ByteDance<span class="token punctuation">.</span>sort<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> aIntegers<span class="token operator">=</span> RandomArray<span class="token punctuation">.</span><span class="token function">getRandomBoxedIntArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>aIntegers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span>aIntegers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//构造大顶堆</span>        <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>elems<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>elems<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将为排序的最后一个元素和最顶的元素交换</span>            <span class="token function">exch</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这里i既然和最上面的交换了，那么从i->elems.length-1都已经排好序了，这时候的heap的bound应该是小于i</span>            <span class="token comment" spellcheck="true">//不能大于i</span>            <span class="token function">heap</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从最后面的非叶子节点开始</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>elems<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">heap</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> i<span class="token punctuation">,</span> elems<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//针对第i个元素构造最大堆</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">heap</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> bound <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> elems<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> largest <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> bound <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> elems<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> largest <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//说明此时子堆有比它大的</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">exch</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> i<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//然后沉下去的元素应该继续针对这个元素构造大顶堆</span>            <span class="token function">heap</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><h5 id="第一步：构造大顶堆"><a href="#第一步：构造大顶堆" class="headerlink" title="第一步：构造大顶堆"></a>第一步：构造大顶堆</h5><p>我们构造大顶堆是从最后一个非叶子结点开始的，所以对于n个元素，他的最后一个非叶子节点是第n/2个元素<br>注意这里的第几个元素和数组里面的元素关系不一样的，这里是从1开始，代码数组里面是从0开始<br>😊<br>那么我们外层循环遍历所有的非叶子结点就是n/2次，然后每一次遍历交换后，都要对子节点进行构造大顶堆。<br> 首先要理解怎么计算这个堆化过程所消耗的时间，可以直接画图去理解；</p><pre><code>    假设高度为k，则从倒数第二层右边的节点开始，这一层的节点都要执行子节点比较然后交换（如果顺序是对的就不用交换）；倒数第三层呢，则会选择其子节点进行比较和交换，如果没交换就可以不用再执行下去了。如果交换了，那么又要选择一支子树进行比较和交换；    那么总的时间计算为：s = 2^( i - 1 )  *  ( k - i )；其中 i 表示第几层，2^( i - 1) 表示该层上有多少个元素，( k - i) 表示子树上要比较的次数，如果在最差的条件下，就是比较次数后还要交换；因为这个是常数，所以提出来后可以忽略；    S = 2^(k-2) * 1 + 2^(k-3)*2.....+2*(k-2)+2^(0)*(k-1)  ===&gt; 因为叶子层不用交换，所以i从 k-1 开始到 1；    这个等式求解，我想高中已经会了：等式左右乘上2，然后和原来的等式相减，就变成了：    S = 2^(k - 1) + 2^(k - 2) + 2^(k - 3) ..... + 2 - (k-1)    除最后一项外，就是一个等比数列了，直接用求和公式：S = {  a1[ 1-  (q^n) ] }  / (1-q)；    S = 2^k -k -1；又因为k为完全二叉树的深度，所以 (2^k) &lt;=  n &lt; (2^k  -1 )，总之可以认为：k = logn （实际计算得到应该是 log(n+1) &lt; k &lt;= logn ）;    综上所述得到：S = n - longn -1，所以时间复杂度为：O(n)</code></pre><h5 id="重建堆复杂度"><a href="#重建堆复杂度" class="headerlink" title="重建堆复杂度"></a>重建堆复杂度</h5><p>更改堆元素后重建堆时间：O(nlogn)</p><pre><code>    推算过程：   1、循环  n -1 次，每次都是从根节点往下循环查找，所以每一次时间是 logn，总时间：logn(n-1) = nlogn  - logn ；</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组列表</title>
      <link href="/2020/03/29/%E6%95%B0%E7%BB%84%E5%88%97%E8%A1%A8/"/>
      <url>/2020/03/29/%E6%95%B0%E7%BB%84%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>说到数组列表，不得不与之前的数组挂钩了。首先小便带大家温习一下数组。</p><p>回顾回顾数组<br>数组，我个人理解他为一种静态的存储结构，创建它也比较简单，比如，datatype[] arrayname这是定义一个数组变量，然后声明一下它即可，arrayname=new datatype[size]，这里的datatype是数据类型，arrayname是数组的名字，这是简单的数组定义，也可以把size去掉，直接在声明数组后面初始化数组，当我们声明一个数组时，实际上就是像电脑内存申请一块内存基址，当然，这只是徒有其表，分配的内存空间是一块值为null的空指针，所以，如果不对他们进行初始化，而去直接使用赋值，访问等等，都会出现空指针异常java.lang.NullPointerException，在使用前，除非确保自己的程序没问题，否则一定要进行查空的操作，所以，当声明数组变量是，要么静态初始化，要么动态初始化。</p><p>//静态初始化<br>public class array1{<br>    public static void main(String args[]){<br>        dataname[] arrayname=new dataname[]{数据1，数据2，数据3，数据4…..};</p><pre><code>}</code></pre><p>}<br>//动态初始化<br>public class array2{<br>    public static void main(String args[]){<br>        dataname[] arrayname=new dataname[size];<br>    }<br>}<br>/*<br>  注意：<br>  对于第一种方式，声明的数据里面会有数据，一般不用系统默认指定了<br>  对于动态初始化，假如dataname是int型，则系统默认会是0；假如是String型，则默认会是null。<br>*/<br>有时候，使用数组，就会联想到线性表，大家可以去看看数据结构这本书，里面包含了表，图，树等各种数据结构。数组和数据结构一样，可以通过下标随机访问任意一个元素，但是随着使用，我们会发现，第一，数组的长度已经固定很难改变，线性表要插入或者删除则需要移动大量数据，第二，数组经常出现空指针异常的问题，人们就必须想一想办法如何解决这种问题。</p><p>数组列表<br>我以前也几乎没听说过列表这种东西，并不觉得比数组有多高级，首先我们来看看建立数组列表的简单代码：</p><p>public class arraylist{<br>   public int size;//这里是为了记录列表的长度，能够动态变化，比数组更好 。<br>   public dataname[] data;//这是列表里面存储的数组数据<br>   public void add(dataneme e){<br>     //为了添加元素<br>     dataname[] data1=new dataname[size+1];//因为数组不能随意改变大小，但是可以通过建立一个更大的数组来赋值给原来的数组进而扩充数组；<br>     //把原来的数据复制一下<br>     for (int i=0;i&lt;size;i++){<br>        data1[i]=data[i];<br>     }<br>     data1[size]=e;<br>     //复制给原数组，这样原数组就可以改变了。<br>    data=data1;<br>    size++;<br>  }<br>  public void getlength(){}//获取列表的长度<br>  public void delete(){}//删除一个元素<br>  public void getlocation(){}//获取位置<br>  public void check(){}//查找 Ȥ   还 Ȭ   元素<br>  //这些方法都很简单，读者可以自己去完善，更多的方法，可以参考数据结构里面的线性表，来实现自己的方法。<br>}<br>慢慢的会发现，其实在列表这个类里面，还是有数组这个东西，还是要通过数组本身去实现这个东西，那为什么要这么繁琐。首先，建立数组列表这个类，实际上是一种数据结构了，写在一个类里面以后能够轻松应用这个数组列表。</p><p>我们可以简单的看一看这张图，根据那个箭头，读者只用想，既然数组不能扩充，那我就要给他赋值一个更大的数组，0，1，2，3不断增大，这种东西用起来很简单，实现起来也很简单，读者可以自己去试一试。</p><p>java 自带的ArrayList动态数<br>其实，java里面已经有一个关于数组列表的实现方法了，他就是动态数组。</p><p>读者可以在API里找到这个类以及他所实现的接口。里面类似的方法个我写的差不多，当然比我的完整，但是想要解决数组缺点的方向是一致的啦。</p><p>以上只是小编根据自己浅学的东西，所说的一些体会罢了，其他的各位可以查阅更多的相关资料，一定要记得看一本书《数据结构》，这本书讲述了很多算法和结构，可以提神自己的能力。欢迎大家来与我交流学习。</p><p>联系方式：13397494026</p><p>QQ：1308161085## 数组列表</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解计算机系统—链接——静态链接</title>
      <link href="/2020/03/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E9%93%BE%E6%8E%A5%E2%80%94%E2%80%94%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/"/>
      <url>/2020/03/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E9%93%BE%E6%8E%A5%E2%80%94%E2%80%94%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="程序执行前经历了啥"><a href="#程序执行前经历了啥" class="headerlink" title="程序执行前经历了啥"></a>程序执行前经历了啥</h1><p>当我们编写了一个程序，你想法设法让他运行，在你的编辑器编译运行。<br>编译是啥，运行前经历了啥。<br><img src="https://img-blog.csdnimg.cn/20190929191030389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="用一张图就是这样表示的。"><a href="#用一张图就是这样表示的。" class="headerlink" title="用一张图就是这样表示的。"></a>用一张图就是这样表示的。</h5><h3 id="预处理器cpp："><a href="#预处理器cpp：" class="headerlink" title="预处理器cpp："></a>预处理器cpp：</h3><pre class=" language-cpp"><code class="language-cpp">gcc <span class="token operator">-</span>E a<span class="token punctuation">.</span>c <span class="token operator">-</span>o a<span class="token punctuation">.</span>i</code></pre><p>假设看一个程序没有include：<br><img src="https://img-blog.csdnimg.cn/2019092919134194.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190929191316612.png" alt="在这里插入图片描述"></p><p>加入加了include<br><img src="https://img-blog.csdnimg.cn/20190929191402462.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190929191446792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-css"><code class="language-css">所以预处理器cpp就是对这个程序进行预处理，可以展开头文件或者宏替换还有去掉注释，有时候头文件里面有条件编译，也可以翻译成一个<span class="token number">.</span>i文件。</code></pre><h4 id="编译器cc1："><a href="#编译器cc1：" class="headerlink" title="编译器cc1："></a>编译器cc1：</h4><pre class=" language-css"><code class="language-css">编译阶段是检查语法，生成汇编<span class="token punctuation">:</span>gcc -S a<span class="token number">.</span>i -o a<span class="token number">.</span>s</code></pre><p>将预处理过的.i文件搞成了汇编程序，至于里面进行了怎样的复杂过程，怎样优化，我也不是很清楚，有时间研究，只要知道它是用来翻译成汇编程序就行了。<br><img src="https://img-blog.csdnimg.cn/20190929192046448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意上面的两个文件都是==ASCII文件==</p><h4 id="汇编器as："><a href="#汇编器as：" class="headerlink" title="汇编器as："></a>汇编器as：</h4><pre class=" language-css"><code class="language-css">汇编代码转换机器码 gcc -c a<span class="token number">.</span>s -o a<span class="token number">.</span>o</code></pre><p>这个汇编器之后就是一个==可重定位的目标程序==了,等会儿看看啥样子</p><h4 id="链接器："><a href="#链接器：" class="headerlink" title="链接器："></a>链接器：</h4><pre class=" language-csharp"><code class="language-csharp">链接过程将多个目标文以及所需的库文件链接成最终的可执行文件gcc a<span class="token punctuation">.</span>o <span class="token operator">-</span>o a</code></pre><h3 id="今天就重点来初识一下链接器所做的链接过程"><a href="#今天就重点来初识一下链接器所做的链接过程" class="headerlink" title="今天就重点来初识一下链接器所做的链接过程"></a>今天就重点来初识一下链接器所做的链接过程</h3><hr><h1 id="静态链接"><a href="#静态链接" class="headerlink" title="==静态链接=="></a>==静态链接==</h1><hr><blockquote><p><strong>静态链接就是根据一系列可重定位的目标文件和命令行的参数，来生成一个已经完全链接的，而且可以加载运行的可执行文件的过程</strong></p></blockquote><p>不知道什么意思没有关系，我们一步一步来梳理就行。</p><p>这个静态链接由一个静态链接器完成，主要执行两个过程。<br>一个是<code>符号解析</code>，一个是<code>重定位</code>。</p><p>又懵了，什么是符号，解析他干嘛，重定位又是啥？</p><p>还是一步一步来<br>首先要知道啥时符号吧</p><h4 id="符号：不说了，上图吧。"><a href="#符号：不说了，上图吧。" class="headerlink" title="符号：不说了，上图吧。"></a>符号：不说了，上图吧。</h4><p><img src="https://img-blog.csdnimg.cn/20190929194129829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>似乎明白了，不就是一些符号啥的嘛，好像没啥了不起的。先有个印象</p><p>符号解析这个过程先不说，先来看看那个我们之前所说的==可重定位的目标文件==。<br>==它是经汇编程序翻译过来的二进制文件==。<br>首先要知道Linux系统使用可执行可链接格式，即==ELF==。<br>可重定位文件分成了一节节的内容，即符合ELF格式的一种二进制文件。</p><pre class=" language-c"><code class="language-c">先来上一份代码吧<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> boy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        count <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190929201101769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们使用<code>readelf -S b.o</code>查看一下内容<br>我们需要重点观察<code>.bss,.data,.text.symtab</code><br>我们通过图片可以知道它是一节节的组成的。</p><p><img src="https://img-blog.csdnimg.cn/20190929202646392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们重点在于==符号表.symtab==<br>使用<code>readelf -s b.o</code>（这里是小s）可以查看符号表的内容<br><img src="https://img-blog.csdnimg.cn/20190929204302409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>==<strong>.symtab</strong>:==<br>就是通过<code>readelf -s</code>&gt; 命令弄出来的，上面这张图，value对应的在对应节的偏移量，Size大小，Type类型，Bind是本地还是全局还是弱符号，Ndx对应于ELF文件（可重定位目标文件）的哪一节。<br>==.<strong>bss:</strong>==<br>对应上面图片Ndx项的4，用于存放未被初始化的全局变量和静态C变量，==但是有个情况，如果你指定了一个为初值为0的变量，就像上面的count，它是一个初始化为0的全局变量，但是它被分配在了.bss字段==。还需要注意的就是，如果一个静态变量被分配空间的话，它有个特殊的，它只适合本地模块，也就是说只需要在本地保证唯一就行了，就算其他模块有同名的强符号或者弱符号，本地模块只会引用本地的这个静态变量，除非你指定了用外部模块的。对于bss更细微的定义就是，它一般只保存未初始化的静态变量和初始化位0的全局变量，静态变量，而未初始化的全局变量暂时在符号表中定义为COMMON，就像上面的k一样。<br>==.<strong>data:</strong>==<br>对应上面图片的3，用于存放已经初始化的全局变量和静态C变量，但是初始值为0的没有分配在这个地方，和上面一样。<br>==<strong>.text：</strong>==<br>存放是编译后的机器代码</p></blockquote><p>我们了解了符号和符号表，就可以来进行符号解析了</p><hr><h2 id="符号解析"><a href="#符号解析" class="headerlink" title="==符号解析=="></a>==符号解析==</h2><hr><pre class=" language-cpp"><code class="language-cpp">就是将某个模块的符号引用与这个符号在另一个模块的定义相关联</code></pre><p><img src="https://img-blog.csdnimg.cn/20190929212332795.png" alt=""><br><img src="https://img-blog.csdnimg.cn/2019092921240043.png" alt="在这里插入图片描述"><br>写了两个程序<br>我们把他们编译成可重定位的文件</p><p>有三种集合，链接器进行符号解析时，需要创建维护这三个集合。</p><ul><li><p>E：合并在一起的所有目标文件（还未重定位）</p></li><li><p>U：没有解析的符号（定义符号和引用符号还没有被建立联系）</p></li><li><p>D：定义符号的集合</p><p>当链接器接收到了一个可重定位文件<br>看看它是不是库文件<br>库文件：将所有没有解析的符号(U)与库文件匹配，如果匹配上了，就将匹配的模块放入E中，然后将这个U中的符号放到D中，知道U和D不在变化，库文件剩下的全不要了。<br>非库文件：就是可重定位的目标文件，先把它放到E中，分别将未解析的符号和定义的符号放到U和D中，如果D中有未解析符号的定义，那么就可以将U中的那个未解析的符号和D中定义的相关联。<br><img src="https://img-blog.csdnimg.cn/2019092921254242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190929212557628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p>比如如果链接上面的两个可重定位文件<br><img src="https://img-blog.csdnimg.cn/20191002123820144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>虽然说符号建立的关联，但是仅仅建立了管理而已，我们根本不知道符号对应地址在哪里。<br><img src="https://img-blog.csdnimg.cn/20191002124125912.png" alt="在这里插入图片描述"></p><p>你看这些全是0，根本不知道对应的符号地址在哪里，你要它怎么去执行命令，这不是为难它吗？</p><p>所以我们还需要一个过程，就是重定位</p><hr><h1 id="重定位"><a href="#重定位" class="headerlink" title="==重定位=="></a>==重定位==</h1><hr><p>重定位就是为每个符号分配对应的地址</p><ul><li>合并相同类型的节，然后链接器将运行时的内存地址赋给新的聚合节，赋给输入模块定义的每个节，以及赋给输入模块定义的每个符号。</li><li>然后对定义符号进行重定位</li><li>对引用符号进行重定位，那么每个被引用符号的位置，都为改成对应分配的地址<br>你看将两个可重定位文件重定位后：<br><img src="https://img-blog.csdnimg.cn/20191002125520802.png" alt="在这里插入图片描述"></li></ul><p>所有的地址都变了。<br>相对寻址<br>对于一个重定位条目，里面保存了一个数据结构的信息<br>第一就是给定重定位偏移量offset，还有就是修正值addend，还有重定位寻址类型（相对，绝对）<br>还有就是重定位的符号r.symbol<br>计算机会给我们的信息就是每个节的信息（比如.text代码节，记作ADDR(s)），然后还有重定位符号地址（ADDR(r.symbol)）<br>我们先根据重定位偏移量找到我们需要重定位的地址address = ADDR(s)+offset<br>然后我们要根据重定位符号地址和修正值，来更新重定位的引用地址<br>则ADDR(r.symbol) +addent-address就填充进我们要重定位的引用地址值</p><p>绝对寻址：<br>绝对寻址比较粗暴简单，直接对符号地址加以修正 ADDR(r.symbol+addend）即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
            <tag> Linux </tag>
            
            <tag> 静态链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站日志实时分析（二）：Flink处理实时热门组件，PV，布隆实现UV统计</title>
      <link href="/2020/03/29/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97%E5%AE%9E%E6%97%B6%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AFlink%E5%A4%84%E7%90%86%E5%AE%9E%E6%97%B6%E7%83%AD%E9%97%A8%E7%BB%84%E4%BB%B6%EF%BC%8CPV%EF%BC%8C%E5%B8%83%E9%9A%86%E5%AE%9E%E7%8E%B0UV%E7%BB%9F%E8%AE%A1/"/>
      <url>/2020/03/29/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97%E5%AE%9E%E6%97%B6%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AFlink%E5%A4%84%E7%90%86%E5%AE%9E%E6%97%B6%E7%83%AD%E9%97%A8%E7%BB%84%E4%BB%B6%EF%BC%8CPV%EF%BC%8C%E5%B8%83%E9%9A%86%E5%AE%9E%E7%8E%B0UV%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="实时热门统计"><a href="#实时热门统计" class="headerlink" title="实时热门统计"></a>实时热门统计</h2><p>操作步骤：</p><ul><li>先从Kafka读取消费数据</li><li>使用map算子对数据进行预处理</li><li>过滤数据，只留住pv数据</li><li>使用timewindow，每隔10秒创建一个20秒的window</li><li>然后将窗口自定义预聚合，并且兹定于窗口函数，按指定输入输出case操作数据</li><li>上面操作时候返回的是DataStream，那么就根据timestampEnd进行keyby</li><li>使用底层API操作，对每个时间窗口内的数据进行排序，取top</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ongbo<span class="token punctuation">.</span>hotAnalysis<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>AggregateFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token punctuation">{</span>ListState<span class="token punctuation">,</span> ListStateDescriptor<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>function<span class="token punctuation">.</span>WindowFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>TimeWindow<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaConsumer<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ListBuffer<span class="token comment" spellcheck="true">/**定义输入数据的样例类 */</span><span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">UserBehavior</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> Long<span class="token punctuation">,</span> itemId<span class="token operator">:</span> Long<span class="token punctuation">,</span> cateGoryId<span class="token operator">:</span> Int<span class="token punctuation">,</span>behavior<span class="token operator">:</span> String<span class="token punctuation">,</span> timestamp<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定义窗口聚合结果样例类</span><span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">ItemViewCount</span><span class="token punctuation">(</span>itemId<span class="token operator">:</span> Long<span class="token punctuation">,</span> windowEnd<span class="token operator">:</span> Long<span class="token punctuation">,</span> count<span class="token operator">:</span> Long<span class="token punctuation">)</span>object HotItems <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1:创建执行环境</span>    val env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//设置为事件事件</span>    env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//2:读取数据</span>    <span class="token comment" spellcheck="true">/*kafka源*/</span>    val properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span><span class="token string">"114.116.219.197:5008,114.116.220.98:5008,114.116.199.154:5008"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span><span class="token string">"web-consumer-group"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"auto.offset.reset"</span><span class="token punctuation">,</span><span class="token string">"latest"</span><span class="token punctuation">)</span>    val dataStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlinkKafkaConsumer</span><span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"weblog"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    val dataStream = env.readTextFile("/Users/ongbo/Maven/bin/UserBehaviorAnalysis/HotItemAnalysis/src/main/resources/UserBehavior.csv")</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data:"</span><span class="token operator">+</span>data<span class="token punctuation">)</span>        val dataArray <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//        if(dataArray(0).equals("ij"))</span>        <span class="token function">UserBehavior</span><span class="token punctuation">(</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> <span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> <span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span> <span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> <span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">assignAscendingTimestamps</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>timestamp <span class="token operator">*</span> 1000L<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//3:transform处理数据</span>    val processStream <span class="token operator">=</span> dataStream      <span class="token comment" spellcheck="true">//筛选出埋点pv数据</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>behavior<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//先对itemID进行分组</span>      <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>itemId<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//然后设置timeWindow，size为1小时，步长为5分钟的滑动窗口</span>      <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//窗口聚合，按道理说应该不用窗口聚合，但是因为达到的数据可能时间顺序会扰乱，所以聚合后要keyby</span>      <span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountAgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WindowResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>windowEnd<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//按照窗口分组</span>      <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopNHotItems</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sink：输出数据</span>    processStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"processStream::"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    dataStream.print()</span>    <span class="token comment" spellcheck="true">//执行</span>    env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"hot Items Job"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*自定义预聚合函数*/</span><span class="token keyword">class</span> <span class="token class-name">CountAgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">AggregateFunction</span><span class="token punctuation">[</span>UserBehavior<span class="token punctuation">,</span> Long<span class="token punctuation">,</span> Long<span class="token punctuation">]</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//累加器初始值</span>  override def <span class="token function">createAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">//每来一次就加一</span>  override def <span class="token function">add</span><span class="token punctuation">(</span>in<span class="token operator">:</span> UserBehavior<span class="token punctuation">,</span> acc<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> acc<span class="token operator">+</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">//</span>  override def <span class="token function">getResult</span><span class="token punctuation">(</span>acc<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> acc  override def <span class="token function">merge</span><span class="token punctuation">(</span>acc<span class="token operator">:</span> Long<span class="token punctuation">,</span> acc1<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token operator">=</span> acc <span class="token operator">+</span> acc1<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义窗口函数，输出ItemViewCount</span><span class="token keyword">class</span> <span class="token class-name">WindowResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">WindowFunction</span><span class="token punctuation">[</span>Long<span class="token punctuation">,</span>ItemViewCount<span class="token punctuation">,</span> Long<span class="token punctuation">,</span> TimeWindow<span class="token punctuation">]</span><span class="token punctuation">{</span>  override def <span class="token function">apply</span><span class="token punctuation">(</span>key<span class="token operator">:</span> Long<span class="token punctuation">,</span> window<span class="token operator">:</span> TimeWindow<span class="token punctuation">,</span> input<span class="token operator">:</span> Iterable<span class="token punctuation">[</span>Long<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span>  <span class="token punctuation">{</span>    out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">ItemViewCount</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>window<span class="token punctuation">.</span>getEnd<span class="token punctuation">,</span>input<span class="token punctuation">.</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义处理函数</span><span class="token keyword">class</span> <span class="token class-name">TopNHotItems</span><span class="token punctuation">(</span>topsize<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">KeyedProcessFunction</span><span class="token punctuation">[</span>Long<span class="token punctuation">,</span> ItemViewCount<span class="token punctuation">,</span> String<span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> var itemState<span class="token operator">:</span> ListState<span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span> <span class="token operator">=</span> _  override def <span class="token function">open</span><span class="token punctuation">(</span>parameters<span class="token operator">:</span> Configuration<span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    itemState <span class="token operator">=</span> getRuntimeContext<span class="token punctuation">.</span><span class="token function">getListState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListStateDescriptor</span><span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"item-state"</span><span class="token punctuation">,</span> classOf<span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  override def <span class="token function">processElement</span><span class="token punctuation">(</span>value<span class="token operator">:</span> ItemViewCount<span class="token punctuation">,</span> ctx<span class="token operator">:</span> KeyedProcessFunction<span class="token punctuation">[</span>Long<span class="token punctuation">,</span> ItemViewCount<span class="token punctuation">,</span> String<span class="token punctuation">]</span>#Context<span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//把每条数据存入状态列表</span>    itemState<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//注册一个定时器</span>    ctx<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerEventTimeTimer</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>windowEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//定时器触发时，对所有的数据排序，并输出结果</span>  override def <span class="token function">onTimer</span><span class="token punctuation">(</span>timestamp<span class="token operator">:</span> Long<span class="token punctuation">,</span> ctx<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeyedProcessFunction<span class="token punctuation">[</span>Long<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>com<span class="token punctuation">.</span>ongbo<span class="token punctuation">.</span>hotAnalysis<span class="token punctuation">.</span>ItemViewCount<span class="token punctuation">,</span> _root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">]</span>#OnTimerContext<span class="token punctuation">,</span> out<span class="token operator">:</span> _root_<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">[</span>_root_<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Predef<span class="token punctuation">.</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将所有state中的数据取出，放到一个list Buffer中</span>    val allItems<span class="token operator">:</span> ListBuffer<span class="token punctuation">[</span>ItemViewCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>JavaConversions<span class="token punctuation">.</span>_    <span class="token keyword">for</span><span class="token punctuation">(</span>item <span class="token operator">&lt;</span><span class="token operator">-</span> itemState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      allItems <span class="token operator">+=</span> item    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按照点计量count大小排序,sortBy默认是升序,并且取前三个</span>    val sortedItems <span class="token operator">=</span> allItems<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span>Long<span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>topsize<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//清空状态</span>    itemState<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//格式化输出排名结果</span>    val result <span class="token operator">:</span> StringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span>    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"时间："</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//输出每一个商品信息</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token operator">-</span> sortedItems<span class="token punctuation">.</span>indices<span class="token punctuation">)</span><span class="token punctuation">{</span>      val currentItem <span class="token operator">=</span> <span class="token function">sortedItems</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  商品ID："</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>currentItem<span class="token punctuation">.</span>itemId<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  浏览量："</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>currentItem<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"============================\n"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//控制输出频率</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*自定义预聚合函数计算平均数*/</span><span class="token keyword">class</span> <span class="token class-name">AverageAgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">AggregateFunction</span><span class="token punctuation">[</span>UserBehavior<span class="token punctuation">,</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token punctuation">,</span> Double<span class="token punctuation">]</span><span class="token punctuation">{</span>  override def <span class="token function">createAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>0L<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  override def <span class="token function">add</span><span class="token punctuation">(</span>in<span class="token operator">:</span> UserBehavior<span class="token punctuation">,</span> acc<span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span>_1<span class="token operator">+</span>in<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> acc<span class="token punctuation">.</span>_2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  override def <span class="token function">getResult</span><span class="token punctuation">(</span>acc<span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token operator">=</span> acc<span class="token punctuation">.</span>_1 <span class="token operator">/</span>acc<span class="token punctuation">.</span>_2  override def <span class="token function">merge</span><span class="token punctuation">(</span>acc<span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">,</span> acc1<span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Long<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span>_1<span class="token operator">+</span>acc1<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> acc<span class="token punctuation">.</span>_2<span class="token operator">+</span>acc1<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="实时PV统计"><a href="#实时PV统计" class="headerlink" title="实时PV统计"></a>实时PV统计</h2><h6 id="这里按道理应该也要从Kafka读取数据的，但是这里暂时先从本地读，因为当时本地网络的原因，暂时不在服务器上创建数据，而直接用本地的。"><a href="#这里按道理应该也要从Kafka读取数据的，但是这里暂时先从本地读，因为当时本地网络的原因，暂时不在服务器上创建数据，而直接用本地的。" class="headerlink" title="这里按道理应该也要从Kafka读取数据的，但是这里暂时先从本地读，因为当时本地网络的原因，暂时不在服务器上创建数据，而直接用本地的。"></a>这里按道理应该也要从Kafka读取数据的，但是这里暂时先从本地读，因为当时本地网络的原因，暂时不在服务器上创建数据，而直接用本地的。</h6><h6 id="这个很简单，直接创建滚动窗口，从而能够计算一个小时的PV，然后每隔一个小时更新一次"><a href="#这个很简单，直接创建滚动窗口，从而能够计算一个小时的PV，然后每隔一个小时更新一次" class="headerlink" title="这个很简单，直接创建滚动窗口，从而能够计算一个小时的PV，然后每隔一个小时更新一次"></a>这个很简单，直接创建滚动窗口，从而能够计算一个小时的PV，然后每隔一个小时更新一次</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ongbo<span class="token punctuation">.</span>NetWorkFlow_Analysis<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token comment" spellcheck="true">/**定义输入数据的样例类 */</span><span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token class-name">UserBehavior</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> Long<span class="token punctuation">,</span> itemId<span class="token operator">:</span> Long<span class="token punctuation">,</span> cateGoryId<span class="token operator">:</span> Int<span class="token punctuation">,</span>behavior<span class="token operator">:</span> String<span class="token punctuation">,</span> timestamp<span class="token operator">:</span> Long<span class="token punctuation">)</span>object PageVies <span class="token punctuation">{</span>  def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    val env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>    env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用相对路径定义数据集</span>    val resource <span class="token operator">=</span> getClass<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/UserBehavior.csv"</span><span class="token punctuation">)</span>    val dataStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">readTextFile</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>getPath<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        val dataArray <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        <span class="token function">UserBehavior</span><span class="token punctuation">(</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">assignAscendingTimestamps</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>timestamp <span class="token operator">*</span> 1000L<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>behavior<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"pv"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">hours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    dataStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"pv count"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"PV"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="实时UV统计：布隆过滤器"><a href="#实时UV统计：布隆过滤器" class="headerlink" title="实时UV统计：布隆过滤器"></a>实时UV统计：布隆过滤器</h2><h6 id="我们统计UV需要注意，很多重复的user会占用到内存，所以我们采用布隆过滤器优化，减少Flink缓存user从而降低性能。而且将数据count保存在Redis，可以给后端使用的哦"><a href="#我们统计UV需要注意，很多重复的user会占用到内存，所以我们采用布隆过滤器优化，减少Flink缓存user从而降低性能。而且将数据count保存在Redis，可以给后端使用的哦" class="headerlink" title="我们统计UV需要注意，很多重复的user会占用到内存，所以我们采用布隆过滤器优化，减少Flink缓存user从而降低性能。而且将数据count保存在Redis，可以给后端使用的哦"></a>我们统计UV需要注意，很多重复的user会占用到内存，所以我们采用布隆过滤器优化，减少Flink缓存user从而降低性能。而且将数据count保存在Redis，可以给后端使用的哦</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ongbo<span class="token punctuation">.</span>NetWorkFlow_Analysis<span class="token keyword">import</span> com<span class="token punctuation">.</span>ongbo<span class="token punctuation">.</span>NetWorkFlow_Analysis<span class="token punctuation">.</span>UniqueView<span class="token punctuation">.</span>getClass<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>ProcessFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>function<span class="token punctuation">.</span>ProcessWindowFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>triggers<span class="token punctuation">.</span><span class="token punctuation">{</span>Trigger<span class="token punctuation">,</span> TriggerResult<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>TimeWindow<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedisobject UvWithBloom <span class="token punctuation">{</span> def <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>   val env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment   env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>   env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//用相对路径定义数据集</span>   val resource <span class="token operator">=</span> getClass<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/UserBehavior.csv"</span><span class="token punctuation">)</span>   val dataStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">readTextFile</span><span class="token punctuation">(</span><span class="token string">"/Users/ongbo/Maven/bin/UserBehaviorAnalysis/NetWorkFlowAnalysis/src/main/resources/UserBehavior.csv"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       val dataArray <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>       <span class="token function">UserBehavior</span><span class="token punctuation">(</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span><span class="token function">dataArray</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">assignAscendingTimestamps</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>timestamp <span class="token operator">*</span> 1000L<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>behavior<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"dummyKey"</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">hours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UvCountWithBloom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   dataStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义窗口触发器</span><span class="token keyword">class</span> <span class="token class-name">MyTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">Trigger</span><span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Long<span class="token punctuation">)</span><span class="token punctuation">,</span>TimeWindow<span class="token punctuation">]</span><span class="token punctuation">{</span>  override def <span class="token function">onElement</span><span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">,</span> timestamp<span class="token operator">:</span> Long<span class="token punctuation">,</span> window<span class="token operator">:</span> TimeWindow<span class="token punctuation">,</span> ctx<span class="token operator">:</span> Trigger<span class="token punctuation">.</span>TriggerContext<span class="token punctuation">)</span><span class="token operator">:</span> TriggerResult <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每来一条数据就直接触发窗口操作，并清空所有状态</span>    TriggerResult<span class="token punctuation">.</span>FIRE_AND_PURGE  <span class="token punctuation">}</span>  override def <span class="token function">onProcessingTime</span><span class="token punctuation">(</span>time<span class="token operator">:</span> Long<span class="token punctuation">,</span> window<span class="token operator">:</span> TimeWindow<span class="token punctuation">,</span> ctx<span class="token operator">:</span> Trigger<span class="token punctuation">.</span>TriggerContext<span class="token punctuation">)</span><span class="token operator">:</span> TriggerResult <span class="token operator">=</span> TriggerResult<span class="token punctuation">.</span>CONTINUE  override def <span class="token function">onEventTime</span><span class="token punctuation">(</span>time<span class="token operator">:</span> Long<span class="token punctuation">,</span> window<span class="token operator">:</span> TimeWindow<span class="token punctuation">,</span> ctx<span class="token operator">:</span> Trigger<span class="token punctuation">.</span>TriggerContext<span class="token punctuation">)</span><span class="token operator">:</span> TriggerResult <span class="token operator">=</span> TriggerResult<span class="token punctuation">.</span>CONTINUE  override def <span class="token function">clear</span><span class="token punctuation">(</span>window<span class="token operator">:</span> TimeWindow<span class="token punctuation">,</span> ctx<span class="token operator">:</span> Trigger<span class="token punctuation">.</span>TriggerContext<span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UvCountWithBloom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">ProcessWindowFunction</span><span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Long<span class="token punctuation">)</span><span class="token punctuation">,</span>UvCount<span class="token punctuation">,</span>String<span class="token punctuation">,</span> TimeWindow<span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义Redis连接</span>  lazy val jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"114.116.219.97"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//29位，也就是64M</span>  lazy val bloom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bloom</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">29</span><span class="token punctuation">)</span>  override def <span class="token function">process</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">,</span> elements<span class="token operator">:</span> Iterable<span class="token punctuation">[</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> Long<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span>UvCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//位图的存储方式 , key是windowwen，value是位图</span>    val storeKey <span class="token operator">=</span> context<span class="token punctuation">.</span>window<span class="token punctuation">.</span>getEnd<span class="token punctuation">.</span>toString    var count <span class="token operator">=</span> 0L    <span class="token comment" spellcheck="true">//把每个窗口的count值，也存入Redis表里，存放内容位（windowEnd，uccount），所以要先从Redis中读取</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span>storeKey<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//      System.out.println(v)</span>      count <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span>storeKey<span class="token punctuation">)</span><span class="token punctuation">.</span>toLong    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用布隆过滤器判断当前用户是否已经存在</span>    val userId <span class="token operator">=</span> elements<span class="token punctuation">.</span>last<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>toString    val offset <span class="token operator">=</span> bloom<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//定义一个标志位，判断Redis位图中有没有这一位</span>    val isExist <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">getbit</span><span class="token punctuation">(</span>storeKey<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isExist<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果不存在位图对应位置变成1，count+1</span>      jedis<span class="token punctuation">.</span><span class="token function">setbit</span><span class="token punctuation">(</span>storeKey<span class="token punctuation">,</span>offset<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>      jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span>storeKey<span class="token punctuation">,</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span>      out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">UvCount</span><span class="token punctuation">(</span>storeKey<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">UvCount</span><span class="token punctuation">(</span>storeKey<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bloom</span><span class="token punctuation">(</span>size<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//位图大小</span>  <span class="token keyword">private</span> val cap <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> size <span class="token keyword">else</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">27</span>  <span class="token comment" spellcheck="true">//定义Hash函数</span>  def <span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token operator">:</span> String<span class="token punctuation">,</span> seed<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token punctuation">{</span>    var result<span class="token operator">:</span>Long <span class="token operator">=</span> 0L    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">0</span> until value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>      result <span class="token operator">=</span> result <span class="token operator">*</span> seed <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    result <span class="token operator">&amp;</span> <span class="token punctuation">(</span>cap<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> Redis </tag>
            
            <tag> 实时处理 </tag>
            
            <tag> PV，UV </tag>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-BubbleSort及其优化</title>
      <link href="/2020/03/28/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-BubbleSort%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
      <url>/2020/03/28/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-BubbleSort%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Sortpre<span class="token punctuation">;</span><span class="token keyword">import</span> ByteDance<span class="token punctuation">.</span>sort<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bubble_Sort</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    普通sort*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>elems<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>elems<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> elems<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">exch</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加标志，如果某一轮外层循环，没有出现交换，说明已经有序了，可以不用排序了。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sortWithFlag</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>elems<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>elems<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>elems<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">exch</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//每轮循环记录最后一次交换的边界</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sortWithBound</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> bound <span class="token operator">=</span> elems<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>elems<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//上面的flag优化</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//以前的每次遍历都会遍历到最后一个未排序的元素，但是可能经过上一次交换了之后，最后一次排好序的子数组的前面一部分子数组可能也是有序的</span>            <span class="token comment" spellcheck="true">//我们只要记录最后一次交换的位置，说明这个位置以后的都是排好序的了。</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>bound<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> elems<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">exch</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//记录最后一次交换的位置</span>                    pos  <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将最后的边界值赋值过来</span>            bound <span class="token operator">=</span> pos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//双向排序，一次排序，正像扫描最大值到最后（最小值到最后），反向扫描将最小值放到最前面（最大值最后）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sortWothDoubleDir</span><span class="token punctuation">(</span>K<span class="token punctuation">[</span><span class="token punctuation">]</span> elems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//双边界，双position</span>        <span class="token keyword">int</span> rightbound <span class="token operator">=</span> elems<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>leftbound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>rightpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>leftpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>elems<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>leftbound<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rightbound<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> elems<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">exch</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    rightpos <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            rightbound <span class="token operator">=</span> rightpos<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> rightbound<span class="token punctuation">;</span>j<span class="token operator">></span>leftbound<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elems<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">exch</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    leftpos <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            leftbound <span class="token operator">=</span> leftpos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>计算结果：</p><p><img src="https://img-blog.csdnimg.cn/20200330203937735.png" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>** 我每次创建了一个是普通的随机数组，一种是包含了很多重复元素的数组，每个数组1000000条，排序的话，效果最好的是双向排序+flag+bound排序。而flag单独的话效果不是很好，进过多次测试bound效果还行。**</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>撩一撩Redis：事务</title>
      <link href="/2020/03/20/%E6%92%A9%E4%B8%80%E6%92%A9Redis%EF%BC%9ARedis%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/03/20/%E6%92%A9%E4%B8%80%E6%92%A9Redis%EF%BC%9ARedis%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>在mysql中说过事务，主要特性就是ACID，如下</p><blockquote><ul><li><strong>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</strong></li></ul></blockquote><blockquote><ul><li><strong>一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</strong></li></ul></blockquote><blockquote><ul><li><strong>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</strong></li></ul></blockquote><blockquote><ul><li><strong>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</strong></li></ul></blockquote><h2 id="Redis中的事务"><a href="#Redis中的事务" class="headerlink" title="Redis中的事务"></a>Redis中的事务</h2><h4 id="先来看看用法和常用命令"><a href="#先来看看用法和常用命令" class="headerlink" title="先来看看用法和常用命令"></a>先来看看用法和常用命令</h4><blockquote><ul><li>MULTI：开启一个事务</li><li>EXEC：执行一个事务</li><li>DISCARD：取消一个事务</li></ul></blockquote><h6 id="MULTI-执行之后，-客户端可以继续向服务器发送任意多条命令，-这些命令不会立即被执行，-而是被放到一个队列中，-当-EXEC命令被调用时，-所有队列中的命令才会被执行。另一方面，-通过调用-DISCARD-，-客户端可以清空事务队列，-并放弃执行事务。EXEC-命令的回复是一个数组，-数组中的每个元素都是执行事务中的命令所产生的回复。-其中，-回复元素的先后顺序和命令发送的先后顺序一致。当客户端处于事务状态时，-所有传入的命令都会返回一个内容为-QUEUED-的状态回复（status-reply），-这些被入队的命令将在-EXEC-命令被调用时执行。"><a href="#MULTI-执行之后，-客户端可以继续向服务器发送任意多条命令，-这些命令不会立即被执行，-而是被放到一个队列中，-当-EXEC命令被调用时，-所有队列中的命令才会被执行。另一方面，-通过调用-DISCARD-，-客户端可以清空事务队列，-并放弃执行事务。EXEC-命令的回复是一个数组，-数组中的每个元素都是执行事务中的命令所产生的回复。-其中，-回复元素的先后顺序和命令发送的先后顺序一致。当客户端处于事务状态时，-所有传入的命令都会返回一个内容为-QUEUED-的状态回复（status-reply），-这些被入队的命令将在-EXEC-命令被调用时执行。" class="headerlink" title="MULTI 执行之后， 客户端可以继续向服务器发送任意多条命令， 这些命令不会立即被执行， 而是被放到一个队列中， 当 EXEC命令被调用时， 所有队列中的命令才会被执行。另一方面， 通过调用 DISCARD ， 客户端可以清空事务队列， 并放弃执行事务。EXEC 命令的回复是一个数组， 数组中的每个元素都是执行事务中的命令所产生的回复。 其中， 回复元素的先后顺序和命令发送的先后顺序一致。当客户端处于事务状态时， 所有传入的命令都会返回一个内容为 QUEUED 的状态回复（status reply）， 这些被入队的命令将在 EXEC 命令被调用时执行。"></a>MULTI 执行之后， 客户端可以继续向服务器发送任意多条命令， 这些命令不会立即被执行， 而是被放到一个队列中， 当 EXEC命令被调用时， 所有队列中的命令才会被执行。另一方面， 通过调用 DISCARD ， 客户端可以清空事务队列， 并放弃执行事务。EXEC 命令的回复是一个数组， 数组中的每个元素都是执行事务中的命令所产生的回复。 其中， 回复元素的先后顺序和命令发送的先后顺序一致。当客户端处于事务状态时， 所有传入的命令都会返回一个内容为 QUEUED 的状态回复（status reply）， 这些被入队的命令将在 EXEC 命令被调用时执行。</h6><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p><img src="https://img-blog.csdnimg.cn/20200215194011614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200215194059924.png" alt="在这里插入图片描述"></p><h3 id="事务中发生错误怎么办"><a href="#事务中发生错误怎么办" class="headerlink" title="事务中发生错误怎么办"></a>事务中发生错误怎么办</h3><h6 id="我们直到事务执行要么全部完成，在执行过程中发生错误就会回滚，这是事务的原子性。但是我们针对事务的错误，定义了两种错误的解决方式：一种就是连坐，另一种就是谁错谁负责。"><a href="#我们直到事务执行要么全部完成，在执行过程中发生错误就会回滚，这是事务的原子性。但是我们针对事务的错误，定义了两种错误的解决方式：一种就是连坐，另一种就是谁错谁负责。" class="headerlink" title="我们直到事务执行要么全部完成，在执行过程中发生错误就会回滚，这是事务的原子性。但是我们针对事务的错误，定义了两种错误的解决方式：一种就是连坐，另一种就是谁错谁负责。"></a>我们直到事务执行要么全部完成，在执行过程中发生错误就会回滚，这是事务的原子性。但是我们针对事务的错误，定义了两种错误的解决方式：一种就是连坐，另一种就是谁错谁负责。</h6><p>在Redis所有命令中，并不是所有的命令都会干扰事务，也就是说，有些命令是不会阻断事务的执行的。</p><p>像下面的这种语法错误，导致事务失败，事务是直接失败的。是属于连坐<br><img src="https://img-blog.csdnimg.cn/20200215194245956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是像下面这种情况，我已经把k1-v1键值对建立好，但是又使用的自增让v1+1，但是v1是字符串，根本不可能，像这种就是谁错谁负责，并不会阻断事务执行，事务中的其他命令还是会执行的。返回的状态数组中显示了那条命令失败，其他成功，执行完后检查k1的值，确实被改变了。<br><img src="https://img-blog.csdnimg.cn/20200215194550519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>归纳上面两种错误：</p><blockquote><ul><li>连坐：事务在执行 <strong>EXEC 之前</strong>，<strong>入队的命令可能会出错</strong>。比如说，命令可能会产生语法错误（参数数量错误，参数名错误，等等），或者其他更严重的错误，比如内存不足（如果服务器使用 maxmemory 设置了最大内存限制的话）。</li><li>命令可能在 <strong>EXEC 调用之后</strong>失败。举个例子，事务中的命令可能处理了错误类型的键，比如将列表命令用在了字符串键上面，诸如此类。</li></ul></blockquote><p>那些在 EXEC 命令执行之后所产生的错误， 并没有对它们进行特别处理： 即使事务中有某个/某些命令在执行时产生了错误， 事务中的其他命令仍然会继续执行。</p><h4 id="或许你会想，这也太坑了吧，连回滚都没有，那有些命令是一部分成功一部分不成功了。"><a href="#或许你会想，这也太坑了吧，连回滚都没有，那有些命令是一部分成功一部分不成功了。" class="headerlink" title="或许你会想，这也太坑了吧，连回滚都没有，那有些命令是一部分成功一部分不成功了。"></a>或许你会想，这也太坑了吧，连回滚都没有，那有些命令是一部分成功一部分不成功了。</h4><p>在事务运行期间，虽然Redis命令可能会执行失败，但是Redis仍然会执行事务中余下的其他命令，而不会执行回滚操作。然而，这种行为也有其合理之处：<br>只有当被调用的Redis命令有语法错误时，这条命令才会执行失败（在将这个命令放入事务队列期间，Redis能够发现此类问题），或者对某个键执行不符合其数据类型的操作：实际上，这就意味着只有程序错误才会导致Redis命令执行失败，这种错误很有可能在程序开发期间发现，一般很少在生产环境发现。也就是说这些错误应该是程序员自己应该发现的错误，而不应该到服务器才发现。这些错误没必要在服务器那边执行完事务命令后再执行回滚。</p><p>Redis已经在系统内部进行功能简化，这样可以确保更快的运行速度，因为Redis不需要事务回滚的能力。对于Redis事务的这种行为，有一个普遍的反对观点，那就是程序有可能会有缺陷（bug）。但是，你应当注意到：事务回滚并不能解决任何程序错误。</p><h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><p>关于乐观锁和悲观锁详情见文章<a href="https://blog.csdn.net/weixin_43272605/article/details/104334933" target="_blank" rel="noopener">乐观锁与悲观锁</a></p><h5 id="使用-check-and-set-操作实现乐观锁"><a href="#使用-check-and-set-操作实现乐观锁" class="headerlink" title="使用 check-and-set 操作实现乐观锁"></a>使用 check-and-set 操作实现乐观锁</h5><p>WATCH 命令可以为 Redis 事务提供  <strong>check-and-set(CAS)</strong> 行为。<br>被 WATCH 的键会被监视，并会发觉这些键是否被改动过了。 如果有至少一个被监视的键在 EXEC 执行之前被修改了， 那么整个事务都会被取消， EXEC 返回nil-reply来表示事务已经失败。这个nil-reply在<a href="https://blog.csdn.net/weixin_43272605/article/details/104334912" target="_blank" rel="noopener">撩一撩Redis：Redis协议</a>中已经说过了。<br><img src="https://img-blog.csdnimg.cn/20200215212432964.png" alt="在这里插入图片描述"><br>像上面这种情况，多个客户端同时读取到了mykey，假设都是100，但是在set之前，各自+1，又同时set成了101，本来的结果是102的，那么就会出现错误</p><h5 id="用watch"><a href="#用watch" class="headerlink" title="用watch"></a>用watch</h5><p><img src="https://img-blog.csdnimg.cn/20200215212609791.png" alt="在这里插入图片描述"><br>使用上面的代码， 如果在 WATCH 执行之后， EXEC 执行之前， 有其他客户端修改了 mykey 的值， 那么当前客户端的事务就会失败。 程序需要做的， 就是不断重试这个操作， 直到没有发生碰撞为止。</p><p>这种形式的锁被称作乐观锁， 它是一种非常强大的锁机制。 并且因为大多数情况下， 不同的客户端会访问不同的键， 碰撞的情况一般都很少， 所以通常并不需要进行重试。</p><h6 id="看下面例子"><a href="#看下面例子" class="headerlink" title="看下面例子"></a>看下面例子</h6><p>我首先使用watch命令，监视了balance<br><img src="https://img-blog.csdnimg.cn/20200215213200797.png" alt="在这里插入图片描述"><br>然后在另一个客户端代码之中改变balance</p><pre class=" language-java"><code class="language-java"> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">,</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 这时候，再在原来的客户端，分别执行一下命令<br> <img src="https://img-blog.csdnimg.cn/20200215213306983.png" alt="在这里插入图片描述"><br> 可以看到，exec执行结果返回了nil，也就是没有执行成功。balance的结果还是12<br> 那么说明watch监视成功，它起到了乐观锁的作用，就是在你提交程序之前，有其他人也提交了修改了数据，从而导致版本和你之前看到的不一样了。那么就会执行失败。</p><h2 id="程序代码操作事务"><a href="#程序代码操作事务" class="headerlink" title="程序代码操作事务"></a>程序代码操作事务</h2><p><img src="https://img-blog.csdnimg.cn/20200215202510497.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"114.116.219.97"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> balance<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可用余额</span>        <span class="token keyword">int</span> debt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//欠额</span>        <span class="token keyword">int</span> amtTosubtract <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例额度</span>        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balance <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>balance<span class="token operator">&lt;</span>amtTosubtract<span class="token punctuation">)</span><span class="token punctuation">{</span>            jedis<span class="token punctuation">.</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the ddata has nbe updated before you commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            Transaction transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transaction<span class="token punctuation">.</span><span class="token function">decrBy</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">,</span>amtTosubtract<span class="token punctuation">)</span><span class="token punctuation">;</span>            transaction<span class="token punctuation">.</span><span class="token function">incrBy</span><span class="token punctuation">(</span><span class="token string">"debt"</span><span class="token punctuation">,</span>amtTosubtract<span class="token punctuation">)</span><span class="token punctuation">;</span>            transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            balance <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            debt <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"debt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"balance:"</span><span class="token operator">+</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"debt:"</span> <span class="token operator">+</span> debt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">,</span><span class="token string">"ii"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020021520252050.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"114.116.219.97"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> balance<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可用余额</span>        <span class="token keyword">int</span> debt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//欠额</span>        <span class="token keyword">int</span> amtTosubtract <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例额度</span>        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加入线程沉睡，让另一个客户端去修改</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        balance <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>balance<span class="token operator">&lt;</span>amtTosubtract<span class="token punctuation">)</span><span class="token punctuation">{</span>            jedis<span class="token punctuation">.</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the ddata has nbe updated before you commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            Transaction transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transaction<span class="token punctuation">.</span><span class="token function">decrBy</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">,</span>amtTosubtract<span class="token punctuation">)</span><span class="token punctuation">;</span>            transaction<span class="token punctuation">.</span><span class="token function">incrBy</span><span class="token punctuation">(</span><span class="token string">"debt"</span><span class="token punctuation">,</span>amtTosubtract<span class="token punctuation">)</span><span class="token punctuation">;</span>            transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            balance <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            debt <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"debt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"balance:"</span><span class="token operator">+</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"debt:"</span> <span class="token operator">+</span> debt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">,</span><span class="token string">"ii"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200215202618165.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java">输出：the ddata has nbe updated before you commit</code></pre><h1 id="CAS（Check-And-Set）"><a href="#CAS（Check-And-Set）" class="headerlink" title="CAS（Check And Set）"></a>CAS（Check And Set）</h1>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式存储 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>撩一撩Redis：它是怎么持久化的</title>
      <link href="/2020/03/19/%E6%92%A9%E4%B8%80%E6%92%A9Redis%EF%BC%9A%E5%AE%83%E6%98%AF%E6%80%8E%E4%B9%88%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84/"/>
      <url>/2020/03/19/%E6%92%A9%E4%B8%80%E6%92%A9Redis%EF%BC%9A%E5%AE%83%E6%98%AF%E6%80%8E%E4%B9%88%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Jsb2cub25nYm8udG9wL3VwbG9hZC8yMDIwLzIvdWRvbm5vZHVfY2hhaHVhLTAwMS0zZjYxM2E5NjEyYzk0YjA2YjAxZTdiMWQ2NjRiYzZkYy5qcGc?x-oss-process=image/format,png" alt="udonnodu_chahua-001"></p><h3 id="Redis-提供了两种不同级别的持久化方式"><a href="#Redis-提供了两种不同级别的持久化方式" class="headerlink" title="Redis 提供了两种不同级别的持久化方式:"></a><strong>Redis</strong> 提供了两种不同级别的持久化方式:</h3><blockquote><ul><li><strong>RDB</strong>持久化方式能够在指定的时间间隔能对你的数据进行快照存储.</li><li><strong>AOF</strong>持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数<br>据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大.<br><img src="https://img-blog.csdnimg.cn/20200215111118994.png" alt="在这里插入图片描述"><br>但是如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.<br>你也可以同时开启两种持久化方式, 在这种情况下, 当redis重启的时候会<strong>优先载入AOF文件</strong>来恢复原始的数据：<strong>因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</strong></li></ul></blockquote><hr><h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><h3 id="RDB的优点"><a href="#RDB的优点" class="headerlink" title="RDB的优点"></a>RDB的优点</h3><blockquote><ul><li><strong>1：适合大规模数据恢复</strong></li><li><strong>2：对数据完整性和一致性要求不高</strong></li><li><strong>3：RDB是一个非常紧凑的文件,它保存了某个时间点得数据集,非常适用于数据集的备份,比如你可以在每个小时报保存一下过去24小时内的数据,同时每天保存过去30天的数据,这样即使出了问题你也可以根据需求恢复到不同版本的数据集.</strong><ul><li><strong>4：RDB是一个紧凑的单一文件,很方便传送到另一个远端数据中心或者亚马逊的S3（可能加密），非常适用于灾难恢复.</strong></li><li><strong>5：RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程,接下来的工作全部由子进程来做，父进程不需要再做其他IO操作，所以RDB持久化方式可以最大化redis的性能.</strong></li></ul></li><li><strong>6：与AOF相比,在恢复大的数据集的时候，RDB方式会更快一些.</strong></li></ul></blockquote><h3 id="RDB的缺点"><a href="#RDB的缺点" class="headerlink" title="RDB的缺点"></a>RDB的缺点</h3><blockquote><ul><li><strong>1：如果你希望在redis意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么RDB不适合你.虽然你可以配置不同的save时间点(例如每隔5分钟并且对数据集有100个写的操作),是Redis要完整的保存整个数据集是一个比较繁重的工作,你通常会每隔5分钟或者更久做一次完整的保存,万一在Redis意外宕机,你可能会丢失几分钟的数据.</strong><ul><li><strong>2：RDB需要经常fork子进程来保存数据集到硬盘上,当数据集比较大的时候,fork的过程是非常耗时的,可能会导致Redis在一些毫秒级内不能响应客户端的请求.如果数据集巨大并且CPU性能不是很好的情况下,这种情况会持续1秒,AOF也需要fork,但是你可以调节重写日志文件的频率来提高数据集的耐久度.fork过程就是子进程拷贝父进程的内存页，但是Linux使用了写时复制技术</strong></li></ul></li></ul></blockquote><p>RDB保存的是<strong>dump.rdb文件</strong>。在关机SNAPSHOTTING(快照)，<strong>恢复时直接将快照文件读到内存</strong> </p><p><img src="https://img-blog.csdnimg.cn/20200215105954243.png" alt="在这里插入图片描述"></p><h4 id="在下面三种情况任意一种发生都会发生快照"><a href="#在下面三种情况任意一种发生都会发生快照" class="headerlink" title="在下面三种情况任意一种发生都会发生快照"></a>在下面三种情况任意一种发生都会发生快照</h4><blockquote><ul><li><h5 id="900s内发生了一次1个key的变化"><a href="#900s内发生了一次1个key的变化" class="headerlink" title="900s内发生了一次1个key的变化"></a>900s内发生了一次1个key的变化</h5></li><li><h5 id="300s内发生了10个key的变化"><a href="#300s内发生了10个key的变化" class="headerlink" title="300s内发生了10个key的变化"></a>300s内发生了10个key的变化</h5></li><li><h5 id="60s内发生了10000个key变化"><a href="#60s内发生了10000个key变化" class="headerlink" title="60s内发生了10000个key变化"></a>60s内发生了10000个key变化</h5><img src="https://img-blog.csdnimg.cn/20200215110032439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h6 id="是怎的牛皮，自己可以调节，皮卡丘都惊呆了"><a href="#是怎的牛皮，自己可以调节，皮卡丘都惊呆了" class="headerlink" title="是怎的牛皮，自己可以调节，皮卡丘都惊呆了"></a>是怎的牛皮，自己可以调节，皮卡丘都惊呆了</h6><p><img src="https://img-blog.csdnimg.cn/20200215110807192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="实验："><a href="#实验：" class="headerlink" title="实验："></a>实验：</h2><h4 id="1：准备工作"><a href="#1：准备工作" class="headerlink" title="1：准备工作"></a>1：准备工作</h4><h6 id="为了更能够方便实验更快得到修改快照，改成"><a href="#为了更能够方便实验更快得到修改快照，改成" class="headerlink" title="为了更能够方便实验更快得到修改快照，改成"></a>为了更能够方便实验更快得到修改快照，改成</h6><p><img src="https://img-blog.csdnimg.cn/20200215110101236.png" alt="在这里插入图片描述"></p><h6 id="意味着120s如果发生了10个key的变化，那么就发生快照，当然你也可以改成更快"><a href="#意味着120s如果发生了10个key的变化，那么就发生快照，当然你也可以改成更快" class="headerlink" title="意味着120s如果发生了10个key的变化，那么就发生快照，当然你也可以改成更快"></a>意味着120s如果发生了10个key的变化，那么就发生快照，当然你也可以改成更快</h6><p><img src="https://img-blog.csdnimg.cn/2020021511014314.png" alt="在这里插入图片描述"></p><h5 id="2：这时候加入几个KV"><a href="#2：这时候加入几个KV" class="headerlink" title="2：这时候加入几个KV"></a>2：这时候加入几个KV</h5><p> <img src="https://img-blog.csdnimg.cn/20200215110148310.png" alt="在这里插入图片描述"></p><h6 id="两分钟后生成了dump-rdb文件，看清楚时间的差别，21：20的时候因为插入了几个KV，然后120s后也就是两分钟后21：22生成了dump-rdb文件，然后我不插入任何东西，120s内没有任何变化，所以在21：25的时候dump-rdb文件的修改时间还是21-22"><a href="#两分钟后生成了dump-rdb文件，看清楚时间的差别，21：20的时候因为插入了几个KV，然后120s后也就是两分钟后21：22生成了dump-rdb文件，然后我不插入任何东西，120s内没有任何变化，所以在21：25的时候dump-rdb文件的修改时间还是21-22" class="headerlink" title="两分钟后生成了dump.rdb文件，看清楚时间的差别，21：20的时候因为插入了几个KV，然后120s后也就是两分钟后21：22生成了dump.rdb文件，然后我不插入任何东西，120s内没有任何变化，所以在21：25的时候dump.rdb文件的修改时间还是21.22."></a>两分钟后生成了dump.rdb文件，看清楚时间的差别，21：20的时候因为插入了几个KV，然后120s后也就是两分钟后21：22生成了dump.rdb文件，然后我不插入任何东西，120s内没有任何变化，所以在21：25的时候dump.rdb文件的修改时间还是21.22.</h6><p><img src="https://img-blog.csdnimg.cn/20200215110221395.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200215110226390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="3：flushALL后马上形成快照"><a href="#3：flushALL后马上形成快照" class="headerlink" title="3：flushALL后马上形成快照"></a>3：flushALL后马上形成快照</h5><h6 id="可以看到，因为执行了flushALL命令，dump-rdb文件就被刷新了，修改时间变化了。"><a href="#可以看到，因为执行了flushALL命令，dump-rdb文件就被刷新了，修改时间变化了。" class="headerlink" title="可以看到，因为执行了flushALL命令，dump.rdb文件就被刷新了，修改时间变化了。"></a>可以看到，因为执行了flushALL命令，dump.rdb文件就被刷新了，修改时间变化了。</h6><p> <img src="https://img-blog.csdnimg.cn/20200215110317866.png" alt="在这里插入图片描述"></p><h5 id="4：假如我们重新做一次上面的操作，在flushALL之前，备份dump-rdb"><a href="#4：假如我们重新做一次上面的操作，在flushALL之前，备份dump-rdb" class="headerlink" title="4：假如我们重新做一次上面的操作，在flushALL之前，备份dump.rdb"></a>4：假如我们重新做一次上面的操作，在flushALL之前，备份dump.rdb</h5><p> <img src="https://img-blog.csdnimg.cn/20200215110323276.png" alt="在这里插入图片描述"></p><h6 id="在flushALL之前，里面有了很多KV，那么然后flushall，这时候Redis是没有任何数据的，同时dump-rdb也被刷新成空的了，那么关闭redis，由于恢复时会加载RDB文件-这时候AOF持久化方式没有打开-，所以恢复时应该什么数据都没有，但是当我们用备份的dump-rdb-bk替代dump-rdb时，再启动redis服务器"><a href="#在flushALL之前，里面有了很多KV，那么然后flushall，这时候Redis是没有任何数据的，同时dump-rdb也被刷新成空的了，那么关闭redis，由于恢复时会加载RDB文件-这时候AOF持久化方式没有打开-，所以恢复时应该什么数据都没有，但是当我们用备份的dump-rdb-bk替代dump-rdb时，再启动redis服务器" class="headerlink" title="在flushALL之前，里面有了很多KV，那么然后flushall，这时候Redis是没有任何数据的，同时dump.rdb也被刷新成空的了，那么关闭redis，由于恢复时会加载RDB文件(这时候AOF持久化方式没有打开)，所以恢复时应该什么数据都没有，但是当我们用备份的dump.rdb.bk替代dump.rdb时，再启动redis服务器"></a>在flushALL之前，里面有了很多KV，那么然后flushall，这时候Redis是没有任何数据的，同时dump.rdb也被刷新成空的了，那么关闭redis，由于恢复时会加载RDB文件(这时候AOF持久化方式没有打开)，所以恢复时应该什么数据都没有，但是当我们用备份的dump.rdb.bk替代dump.rdb时，再启动redis服务器</h6><p> <img src="https://img-blog.csdnimg.cn/20200215110330234.png" alt="在这里插入图片描述"></p><h6 id="看这里，又有我加过的数据，这里第二次我没有加那么多，只是shuntdown的时候它会快照一次"><a href="#看这里，又有我加过的数据，这里第二次我没有加那么多，只是shuntdown的时候它会快照一次" class="headerlink" title="看这里，又有我加过的数据，这里第二次我没有加那么多，只是shuntdown的时候它会快照一次"></a>看这里，又有我加过的数据，这里第二次我没有加那么多，只是shuntdown的时候它会快照一次</h6><p> <img src="https://img-blog.csdnimg.cn/20200215110337275.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200215112644677.gif" alt="在这里插入图片描述"></p><h3 id="如何触发RDB快照"><a href="#如何触发RDB快照" class="headerlink" title="如何触发RDB快照"></a>如何触发RDB快照</h3><p>配置文件中的save默认配置</p><blockquote><ul><li><strong>1：命令save或者时bgsave</strong><br><strong>save：save只管保存，其他不管，一切阻塞</strong><br><strong>bgsave：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照恶的时间</strong></li><li><strong>2：执行flushall命令，但是会没有数据了，没有意义，要么就shutdown，关闭服务器时会迅速快照一次</strong><ul><li><strong>3：shutdown瞬间完成持久化</strong></li></ul></li></ul></blockquote><h3 id="怎么进行恢复"><a href="#怎么进行恢复" class="headerlink" title="怎么进行恢复"></a>怎么进行恢复</h3><p><strong>将备份文件dump.rdb移动到redis安装目录并启动服务<br>其实你的dump.rdb在不同地方，配置不同的bump.rdb你就可以得到不同的数据库了<br>RDB是整个内存压缩过的Snapshot，RDB的数据结构，可以配置符合的快照触发条件<br>禁用的话：save不用这个指令，要么就传“”的东西给他</strong></p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><blockquote><p>1:在默认情况下， Redis 将数据库快照保存在名字为 <strong>dump.rdb</strong>的二进制文件中。你可以对 Redis 进行设置， 让它在“ <strong>N 秒内数据集至少有 M 个改动</strong>”这一条件被满足时， 自动保存一次数据集。<br>2:你也可以通过调用 SAVE或者 BGSAVE ， 手动让 Redis 进行数据集保存操作。</p></blockquote><p>比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集:</p><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><p>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作:</p><blockquote><p>•    <strong>Redis 调用forks. 同时拥有父进程和子进程。对于Linux中的fork，它就是子进程复制父进程的内存页面</strong><br>•    <strong>子进程将数据集写入到一个临时 RDB 文件中。</strong><br>•    <strong>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</strong></p></blockquote><p>这种工作方式使得 Redis 可以从<strong>写时复制（copy-on-write）机制</strong>中获益。因为写时复制是在修改的时候子进程才会复制父进程的某一个修改页面放到自己的真正进程空间，否则和父进程公用。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><img src="https://img-blog.csdnimg.cn/20200215113144167.gif" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200215113152714.gif" alt="在这里插入图片描述"></p><h2 id="怎么还有啊！！！！！！！！！！！"><a href="#怎么还有啊！！！！！！！！！！！" class="headerlink" title="怎么还有啊！！！！！！！！！！！"></a>怎么还有啊！！！！！！！！！！！</h2><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><h3 id="APPEND-ONLY-FILE"><a href="#APPEND-ONLY-FILE" class="headerlink" title="APPEND ONLY FILE"></a>APPEND ONLY FILE</h3><p><strong>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录）</strong><br>只许追加文件但不可以改写文件，<strong>redis启动之初就会读取该文件重新构建数据</strong><br>换言之，重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。    </p><h4 id="你可能会说，说了这么多，不就是我干什么都被它给偷偷记录了吗，干嘛这么啰嗦"><a href="#你可能会说，说了这么多，不就是我干什么都被它给偷偷记录了吗，干嘛这么啰嗦" class="headerlink" title="你可能会说，说了这么多，不就是我干什么都被它给偷偷记录了吗，干嘛这么啰嗦"></a>你可能会说，说了这么多，不就是我干什么都被它给偷偷记录了吗，干嘛这么啰嗦</h4><p><img src="https://img-blog.csdnimg.cn/2020021511342965.gif" alt="在这里插入图片描述"> </p><h3 id="AOF-优点"><a href="#AOF-优点" class="headerlink" title="AOF 优点"></a>AOF 优点</h3><blockquote><ul><li><strong>1：使用AOF 会让你的Redis更加耐久: 你可以使用不同的fsync策略：无fsync,每秒fsync,每次写的时候fsync.使用默认的每秒fsync策略,Redis的性能依然很好(fsync是由后台线程进行处理的,主线程会尽力处理客户端请求),一旦出现故障，你最多丢失1秒的数据.</strong></li><li><strong>2：AOF文件是一个只进行追加的日志文件,所以不需要写入seek,即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令,你也也可使用redis-check-aof工具修复这些问题.</strong></li><li><strong>3：Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</strong></li><li><strong>4：AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</strong></li></ul></blockquote><h3 id="AOF-缺点"><a href="#AOF-缺点" class="headerlink" title="AOF 缺点"></a>AOF 缺点</h3><blockquote><ul><li><strong>1：对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</strong></li><li><strong>2：根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency)</strong></li></ul></blockquote><h2 id="实验：-1"><a href="#实验：-1" class="headerlink" title="实验："></a>实验：</h2><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1:准备工作"></a>1:准备工作</h4><p> <img src="https://img-blog.csdnimg.cn/20200215110558760.png" alt="在这里插入图片描述"></p><h6 id="默认appendonly为no，现在改成yes，将这个持久化功能打开，重新启动服务器"><a href="#默认appendonly为no，现在改成yes，将这个持久化功能打开，重新启动服务器" class="headerlink" title="默认appendonly为no，现在改成yes，将这个持久化功能打开，重新启动服务器"></a>默认appendonly为no，现在改成yes，将这个持久化功能打开，重新启动服务器</h6><p> <img src="https://img-blog.csdnimg.cn/20200215110604600.png" alt="在这里插入图片描述"></p><p>多了一个这样的文件<br> <img src="https://img-blog.csdnimg.cn/20200215110610422.png" alt="在这里插入图片描述"><br>文件内容</p><p> <img src="https://img-blog.csdnimg.cn/20200215110614382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2：执行flushall后，先来看啊可能RDB文件和AOF文件不共存的情况"><a href="#2：执行flushall后，先来看啊可能RDB文件和AOF文件不共存的情况" class="headerlink" title="2：执行flushall后，先来看啊可能RDB文件和AOF文件不共存的情况"></a>2：执行flushall后，先来看啊可能RDB文件和AOF文件不共存的情况</h4><h6 id="因为RDB持久化功能没有关，会有dump-rdb文件"><a href="#因为RDB持久化功能没有关，会有dump-rdb文件" class="headerlink" title="因为RDB持久化功能没有关，会有dump.rdb文件"></a>因为RDB持久化功能没有关，会有dump.rdb文件</h6><h6 id="先删了它。将服务器重新启动"><a href="#先删了它。将服务器重新启动" class="headerlink" title="先删了它。将服务器重新启动"></a>先删了它。将服务器重新启动</h6><h6 id="按AOF恢复机制，会按照上面的命令重新执行一遍来恢复数据，也就是结果什么都没有。"><a href="#按AOF恢复机制，会按照上面的命令重新执行一遍来恢复数据，也就是结果什么都没有。" class="headerlink" title="按AOF恢复机制，会按照上面的命令重新执行一遍来恢复数据，也就是结果什么都没有。"></a>按AOF恢复机制，会按照上面的命令重新执行一遍来恢复数据，也就是结果什么都没有。</h6><p> <img src="https://img-blog.csdnimg.cn/20200215110629107.png" alt="在这里插入图片描述"></p><h4 id="3：但是如果删掉最后一个flushall"><a href="#3：但是如果删掉最后一个flushall" class="headerlink" title="3：但是如果删掉最后一个flushall"></a>3：但是如果删掉最后一个flushall</h4><p> <img src="https://img-blog.csdnimg.cn/20200215110634842.png" alt="在这里插入图片描述"></p><h4 id="4：删掉RDB快照文件，重新启动服务器"><a href="#4：删掉RDB快照文件，重新启动服务器" class="headerlink" title="4：删掉RDB快照文件，重新启动服务器"></a>4：删掉RDB快照文件，重新启动服务器</h4><p> <img src="https://img-blog.csdnimg.cn/20200215110645859.png" alt="在这里插入图片描述"></p><h6 id="数据又有了，它的恢复就是将这些命令重新执行一遍。"><a href="#数据又有了，它的恢复就是将这些命令重新执行一遍。" class="headerlink" title="数据又有了，它的恢复就是将这些命令重新执行一遍。"></a>数据又有了，它的恢复就是将这些命令重新执行一遍。</h6><h4 id="5：再执行一次flushALL，然后我们再来关闭shutdown，这个时候RDB会产生快照，这时候RDB持久化的数据肯定是空的，这次不删，也就是这次RDB和AOF文件会共存。而不管按照哪种方式，都因为flushALL导致启动后没有任何数据"><a href="#5：再执行一次flushALL，然后我们再来关闭shutdown，这个时候RDB会产生快照，这时候RDB持久化的数据肯定是空的，这次不删，也就是这次RDB和AOF文件会共存。而不管按照哪种方式，都因为flushALL导致启动后没有任何数据" class="headerlink" title="5：再执行一次flushALL，然后我们再来关闭shutdown，这个时候RDB会产生快照，这时候RDB持久化的数据肯定是空的，这次不删，也就是这次RDB和AOF文件会共存。而不管按照哪种方式，都因为flushALL导致启动后没有任何数据"></a>5：再执行一次flushALL，然后我们再来关闭shutdown，这个时候RDB会产生快照，这时候RDB持久化的数据肯定是空的，这次不删，也就是这次RDB和AOF文件会共存。而不管按照哪种方式，都因为flushALL导致启动后没有任何数据</h4><h4 id="6：但是为了比对两种方式，同样将appendonly的flushall命令删掉"><a href="#6：但是为了比对两种方式，同样将appendonly的flushall命令删掉" class="headerlink" title="6：但是为了比对两种方式，同样将appendonly的flushall命令删掉"></a>6：但是为了比对两种方式，同样将appendonly的flushall命令删掉</h4><h4 id="7：重新启动服务器"><a href="#7：重新启动服务器" class="headerlink" title="7：重新启动服务器"></a>7：重新启动服务器</h4><p> <img src="https://img-blog.csdnimg.cn/20200215110654671.png" alt="在这里插入图片描述"></p><h6 id="看数据，又恢复了。"><a href="#看数据，又恢复了。" class="headerlink" title="看数据，又恢复了。"></a>看数据，又恢复了。</h6><p>可见，如果RDB和AOF同时存在，应该听AOF的<br><img src="https://img-blog.csdnimg.cn/20200215114313626.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200215114322363.gif" alt="在这里插入图片描述"></p><h3 id="AOF文件故障"><a href="#AOF文件故障" class="headerlink" title="AOF文件故障"></a>AOF文件故障</h3><p><strong>Redis-check-aof –fix appendonly.aof可以修复这个文件<br>Redis-benchmark</strong></p><h3 id="AOF的同步机制Appendfsync"><a href="#AOF的同步机制Appendfsync" class="headerlink" title="AOF的同步机制Appendfsync:"></a>AOF的同步机制Appendfsync:</h3><blockquote><ul><li><strong>Always:没修改同步，同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好</strong></li><li><strong>Everysec：每秒同步，出厂默认推荐，异步操作，每秒记录，如果一秒内宕机，有数据丢失,但是比起RDB指定时间内的数据丢失，还是好了很多</strong></li><li><strong>NO：从不同步</strong><br><img src="https://img-blog.csdnimg.cn/20200215110706628.png" alt="在这里插入图片描述"></li></ul></blockquote><h3 id="AOF的日志重写"><a href="#AOF的日志重写" class="headerlink" title="AOF的日志重写"></a>AOF的日志重写</h3><h6 id="因为-AOF-的运作方式是不断地将命令追加到文件的末尾，-所以随着写入命令的不断增加，-AOF-文件的体积也会变得越来越大。"><a href="#因为-AOF-的运作方式是不断地将命令追加到文件的末尾，-所以随着写入命令的不断增加，-AOF-文件的体积也会变得越来越大。" class="headerlink" title="因为 AOF 的运作方式是不断地将命令追加到文件的末尾， 所以随着写入命令的不断增加， AOF 文件的体积也会变得越来越大。"></a>因为 AOF 的运作方式是不断地将命令追加到文件的末尾， 所以随着写入命令的不断增加， AOF 文件的体积也会变得越来越大。</h6><p><img src="https://img-blog.csdnimg.cn/20200215114500689.gif" alt="在这里插入图片描述"></p><h6 id="你不担心是吧，那好举个例子"><a href="#你不担心是吧，那好举个例子" class="headerlink" title="你不担心是吧，那好举个例子"></a>你不担心是吧，那好举个例子</h6><h6 id="如果你对一个计数器调用了-100-次-INCR-，-那么仅仅是为了保存这个计数器的当前值，-AOF-文件就需要使用-100-条记录（entry）。"><a href="#如果你对一个计数器调用了-100-次-INCR-，-那么仅仅是为了保存这个计数器的当前值，-AOF-文件就需要使用-100-条记录（entry）。" class="headerlink" title="如果你对一个计数器调用了 100 次 INCR ， 那么仅仅是为了保存这个计数器的当前值， AOF 文件就需要使用 100 条记录（entry）。"></a>如果你对一个计数器调用了 100 次 INCR ， 那么仅仅是为了保存这个计数器的当前值， AOF 文件就需要使用 100 条记录（entry）。</h6><p><img src="https://img-blog.csdnimg.cn/20200215114608308.gif" alt="在这里插入图片描述"></p><h6 id="然而在实际上，-只使用一条-SET-命令已经足以保存计数器的当前值了，-其余-99-条记录实际上都是多余的。"><a href="#然而在实际上，-只使用一条-SET-命令已经足以保存计数器的当前值了，-其余-99-条记录实际上都是多余的。" class="headerlink" title="然而在实际上， 只使用一条 SET 命令已经足以保存计数器的当前值了， 其余 99 条记录实际上都是多余的。"></a>然而在实际上， 只使用一条 SET 命令已经足以保存计数器的当前值了， 其余 99 条记录实际上都是多余的。</h6><p>为了处理这种情况， Redis 支持一种<strong>有趣的特性：</strong></p><h5 id="可以在不打断服务客户端的情况下，-对-AOF-文件进行重建（rebuild）。"><a href="#可以在不打断服务客户端的情况下，-对-AOF-文件进行重建（rebuild）。" class="headerlink" title="可以在不打断服务客户端的情况下， 对 AOF 文件进行重建（rebuild）。"></a>可以在不打断服务客户端的情况下， 对 AOF 文件进行重建（rebuild）。</h5><blockquote><p><strong>执行 BGREWRITEAOF 命令， Redis 将生成一个新的 AOF 文件， 这个文件包含重建当前数据集所需的最少命令。Redis 2.2 需要自己手动执行 BGREWRITEAOF 命令； Redis 2.4 则可以自动触发 AOF 重写</strong></p></blockquote><h3 id="AOF文件损坏"><a href="#AOF文件损坏" class="headerlink" title="AOF文件损坏"></a>AOF文件损坏</h3><p>服务器可能在程序正在对 AOF 文件进行写入时停机， 如果停机造成了 AOF 文件出错（corrupt）， 那么 Redis 在重启时会拒绝载入这个 AOF 文件， 从而确保数据的一致性不会被破坏。当发生这种情况时， 可以用以下方法来修复出错的 AOF 文件：</p><blockquote><p>•    <strong>为现有的 AOF 文件创建一个备份。</strong><br>•    <strong>使用 Redis 附带的 redis-check-aof 程序，对原来的 AOF 文件进行修复:<br>$ redis-check-aof –fix</strong><br>•    <strong>可以使用 diff -u 对比修复后的 AOF 文件和原始 AOF 文件的备份，查看两个文件之间的不同之处。</strong><br>•    <strong>重启 Redis 服务器，等待服务器载入修复后的 AOF 文件，并进行数据恢复。</strong></p></blockquote><h3 id="AOF日志重写工作原理"><a href="#AOF日志重写工作原理" class="headerlink" title="AOF日志重写工作原理"></a>AOF日志重写工作原理</h3><p>AOF 重写和 RDB 创建快照一样，都巧妙地利用了<strong>写时复制机制:</strong></p><blockquote><p>•    <strong>Redis 执行 fork() ，现在同时拥有父进程和子进程。</strong><br>•    <strong>子进程开始将新 AOF 文件的内容写入到临时文件。</strong><br>•    <strong>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾,这样样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。</strong><br>•    <strong>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。</strong><br>•    <strong>搞定！现在 Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</strong><br> <img src="https://img-blog.csdnimg.cn/20200215120341553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>确保数据由完整的备份. <strong>磁盘故障， 节点失效</strong>， 诸如此类的问题都可能让你的数据消失不见， 不进行备份是非常危险的。<br>Redis 对于数据备份是非常友好的， 因为你可以在服务器运行的时候对 RDB 文件进行复制： RDB 文件一旦被创建， 就不会进行任何修改。 当服务器要创建一个新的 RDB 文件时， 它先将文件的内容保存在一个临时文件里面， 当临时文件写入完毕时， 程序才使用 rename(2) 原子地用临时文件替换原来的 RDB 文件。<br>这也就是说， 无论何时， 复制 RDB 文件都是绝对安全的。<br>•    创建一个定期任务（cron job）， 每小时将一个 RDB 文件备份到一个文件夹， 并且每天将一个 RDB 文件备份到另一个文件夹。<br>•    确保快照的备份都带有相应的日期和时间信息， 每次执行定期任务脚本时， 使用 find 命令来删除过期的快照： 比如说， 你可以保留最近 48 小时内的每小时快照， 还可以保留最近一两个月的每日快照。<br>•    至少每天一次， 将 RDB 备份到你的数据中心之外， 或者至少是备份到你运行 Redis 服务器的物理机器之外。<br>容灾备份<br>Redis 的容灾备份基本上就是对数据进行备份， 并将这些备份传送到多个不同的外部数据中心。容灾备份可以在 Redis 运行并产生快照的主数据中心发生严重的问题时， 仍然让数据处于安全状态。<br>因为很多 Redis 用户都是创业者， 他们没有大把大把的钱可以浪费， 所以下面介绍的都是一些实用又便宜的容灾备份方法：<br>•    Amazon S3 ，以及其他类似 S3 的服务，是一个构建灾难备份系统的好地方。 最简单的方法就是将你的每小时或者每日 RDB 备份加密并传送到 S3 。 对数据的加密可以通过 gpg -c 命令来完成（对称加密模式）。 记得把你的密码放到几个不同的、安全的地方去（比如你可以把密码复制给你组织里最重要的人物）。 同时使用多个储存服务来保存数据文件，可以提升数据的安全性。<br>•    传送快照可以使用 SCP 来完成（SSH 的组件）。 以下是简单并且安全的传送方法： 买一个离你的数据中心非常远的 VPS ， 装上 SSH ， 创建一个无口令的 SSH 客户端 key ， 并将这个 key 添加到 VPS 的 authorized_keys 文件中， 这样就可以向这个 VPS 传送快照备份文件了。 为了达到最好的数据安全性，至少要从两个不同的提供商那里各购买一个 VPS 来进行数据容灾备份。<br>•    需要注意的是， 这类容灾系统如果没有小心地进行处理的话， 是很容易失效的。最低限度下， 你应该在文件传送完毕之后， 检查所传送备份文件的体积和原始快照文件的体积是否相同。 如果你使用的是 VPS ， 那么还可以通过比对文件的 SHA1 校验和来确认文件是否传送完整。<br>另外， 你还需要一个独立的警报系统， 让它在负责传送备份文件的传送器（transfer）失灵时通知你。</p><p><img src="https://img-blog.csdnimg.cn/20200215120515738.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式存储 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>撩一撩Redis：数据类型</title>
      <link href="/2020/03/18/%E6%92%A9%E4%B8%80%E6%92%A9Redis%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/03/18/%E6%92%A9%E4%B8%80%E6%92%A9Redis%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="Redis有5种常见的基础数据结构：string，list，set（集合），hash，zset（有序集合）。"><a href="#Redis有5种常见的基础数据结构：string，list，set（集合），hash，zset（有序集合）。" class="headerlink" title="Redis有5种常见的基础数据结构：string，list，set（集合），hash，zset（有序集合）。"></a>Redis有5种常见的基础数据结构：string，list，set（集合），hash，zset（有序集合）。</h5><h5 id="在了解这些Redis的数据结构之前，我们必须清楚，Redis是采用key—Value格式存储的。在存进去之前采用序列化的方式，返回来的数据又是反序列化。key是作为唯一的键存在，但是value根据不同的基础数据类型就会有不同的数据结构。"><a href="#在了解这些Redis的数据结构之前，我们必须清楚，Redis是采用key—Value格式存储的。在存进去之前采用序列化的方式，返回来的数据又是反序列化。key是作为唯一的键存在，但是value根据不同的基础数据类型就会有不同的数据结构。" class="headerlink" title="在了解这些Redis的数据结构之前，我们必须清楚，Redis是采用key—Value格式存储的。在存进去之前采用序列化的方式，返回来的数据又是反序列化。key是作为唯一的键存在，但是value根据不同的基础数据类型就会有不同的数据结构。"></a>在了解这些Redis的数据结构之前，我们必须清楚，Redis是采用key—Value格式存储的。在存进去之前采用序列化的方式，返回来的数据又是反序列化。key是作为唯一的键存在，但是value根据不同的基础数据类型就会有不同的数据结构。</h5><h5 id="Redis-key值是二进制安全的，这意味着可以用任何二进制序列作为key值，从形如”foo”的简单字符串到一个JPEG文件的内容都可以。空字符串也是有效key值。"><a href="#Redis-key值是二进制安全的，这意味着可以用任何二进制序列作为key值，从形如”foo”的简单字符串到一个JPEG文件的内容都可以。空字符串也是有效key值。" class="headerlink" title="Redis key值是二进制安全的，这意味着可以用任何二进制序列作为key值，从形如”foo”的简单字符串到一个JPEG文件的内容都可以。空字符串也是有效key值。"></a>Redis key值是二进制安全的，这意味着可以用任何二进制序列作为key值，从形如”foo”的简单字符串到一个JPEG文件的内容都可以。空字符串也是有效key值。</h5><h3 id="设置key值需要注意："><a href="#设置key值需要注意：" class="headerlink" title="设置key值需要注意："></a>设置key值需要注意：</h3><blockquote><p><strong>•    太长的键值不是个好主意，例如1024字节的键值就不是个好主意，不仅因为消耗内存，而且在数据中查找这类键值的计算成本很高。</strong><br><strong>•    太短的键值通常也不是好主意，如果你要用”u:1000:pwd”来代替”user:1000:password”，这没有什么问题，但后者更易阅读，并且由此增加的空间消耗相对于key object和value object本身来说很小。当然，没人阻止您一定要用更短的键值节省一丁点儿空间。</strong><br><strong>•    最好坚持一种模式。例如：”object-type:id:field”就是个不错的注意，像这样”user:1000:password”。</strong></p></blockquote><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><h5 id="redis的字符串是一种动态字符串，是可以修改的"><a href="#redis的字符串是一种动态字符串，是可以修改的" class="headerlink" title="redis的字符串是一种动态字符串，是可以修改的"></a>redis的字符串是一种动态字符串，是可以修改的</h5><h6 id="内部机构类似于java中的ArrayList，有预分配空间来减少内存的冗余分配。类似于这样。但是最高的字符串大小为512M。而且这种字符串比较特殊，它其实也可以是一张图片。"><a href="#内部机构类似于java中的ArrayList，有预分配空间来减少内存的冗余分配。类似于这样。但是最高的字符串大小为512M。而且这种字符串比较特殊，它其实也可以是一张图片。" class="headerlink" title="内部机构类似于java中的ArrayList，有预分配空间来减少内存的冗余分配。类似于这样。但是最高的字符串大小为512M。而且这种字符串比较特殊，它其实也可以是一张图片。"></a>内部机构类似于java中的ArrayList，有预分配空间来减少内存的冗余分配。类似于这样。但是最高的字符串大小为512M。而且这种字符串比较特殊，它其实也可以是一张图片。</h6><p><img src="https://img-blog.csdnimg.cn/20200215133552168.png" alt="在这里插入图片描述"></p><h5 id="通常采用Set和Get来创建和获取字符串"><a href="#通常采用Set和Get来创建和获取字符串" class="headerlink" title="通常采用Set和Get来创建和获取字符串"></a>通常采用Set和Get来创建和获取字符串</h5><h5 id="pattern匹配："><a href="#pattern匹配：" class="headerlink" title="pattern匹配："></a>pattern匹配：</h5><blockquote><ul><li><strong>表示任意长度字符</strong></li><li><strong>？表示一个字符</strong></li><li><strong>[]表示可以是集合中的任意一个</strong></li></ul></blockquote><h4 id="基本操作：字符串操作，追加，截取，即set，get，append"><a href="#基本操作：字符串操作，追加，截取，即set，get，append" class="headerlink" title="基本操作：字符串操作，追加，截取，即set，get，append"></a>基本操作：字符串操作，追加，截取，即set，get，append</h4><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p><img src="https://img-blog.csdnimg.cn/20200215135503649.png" alt="在这里插入图片描述"></p><p>在后面会有语法提示<br> <img src="https://img-blog.csdnimg.cn/20200215135511419.png" alt="在这里插入图片描述"></p><p> <img src="https://img-blog.csdnimg.cn/20200215135536409.png" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200215135541216.png" alt="在这里插入图片描述"></p><p>即ex代表秒倒计时，px代表毫秒倒计时，设置了在内存中的过期时间<br> <img src="https://img-blog.csdnimg.cn/20200215135551320.png" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200215135558988.png" alt="在这里插入图片描述"></p><blockquote><p>set后有nx即在not exist情况下添加，即意思时不修改原值<br>xx即在存在的情况下才可以添加，即修改的意思。</p></blockquote><p>虽然字符串是Redis的基本值类型，但你仍然能通过它完成一些有趣的操作。例如：原子递增：</p><blockquote><p>set counter 100<br>OK<br>incr counter<br>(integer) 101<br>incr counter<br>(integer) 102<br>incrby counter 50<br>(integer) 152</p></blockquote><p>INCR 命令将字符串值解析成整型，将其加一，最后将结果保存为新的字符串值，类似的命令有INCRBY, DECR 和 DECRBY。实际上他们在内部就是同一个命令，只是看上去有点儿不同。</p><p><strong>INCR是原子操作</strong>意味着什么呢？就是说即使多个客户端对同一个key发出INCR命令，也决不会导致竞争的情况。例如如下情况永远不可能发生：<br>『客户端1和客户端2同时读出“10”，他们俩都对其加到11，然后将新值设置为11』。最终的值一定是12，read-increment-set操作完成时，<strong>其他客户端不会在同一时间执行任何命令。</strong><br>对字符串，另一个的令人感兴趣的操作是GETSET命令，行如其名：他为key设置新值并且返回原值。这有什么用处呢？例如：你的系统每当有新用户访问时就用INCR命令操作一个Redis key。你希望每小时对这个信息收集一次。你就可以GETSET这个key并给其赋值0并读取原值。<br>为减少等待时间，也可以一次存储或获取多个key对应的值，使用MSET和MGET命令:</p><blockquote><p>mset a 10 b 20 c 30<br>OK<br>mget a b c</p></blockquote><p>1) “10”<br>2) “20”<br>3) “30”</p><p>修改或查询键空间<br>有些指令不是针对任何具体的类型定义的，而是用于和整个键空间交互的。因此，它们可被用于任何类型的键。<br>使用EXISTS命令返回1或0标识给定key的值是否存在，使用DEL命令可以删除key对应的值，DEL命令返回1或0标识值是被删除(值存在)或者没被删除(key对应的值不存在)。</p><blockquote><p>set mykey hello<br>OK<br>exists mykey<br>(integer) 1<br>del mykey<br>(integer) 1<br>exists mykey<br>(integer) 0</p></blockquote><p>数据类型计算：<br>位图bitmap：底层位运算</p><h2 id="列表：lists"><a href="#列表：lists" class="headerlink" title="列表：lists"></a>列表：lists</h2><p>要说清楚列表数据类型，最好先讲一点儿理论背景，在信息技术界List这个词常常被使用不当。例如”Python Lists”就名不副实（名为Linked Lists），但他们实际上是数组（同样的数据类型在Ruby中叫数组）<br>一般意义上讲，列表就是有序元素的序列：10,20,1,2,3就是一个列表。但用数组实现的List和用Linked List实现的List，在属性方面大不相同。</p><h4 id="Redis-lists基于Linked-Lists实现。这意味着即使在一个list中有数百万个元素，在头部或尾部添加一个元素的操作，其时间复杂度也是常数级别的。用LPUSH-命令在十个元素的list头部添加新元素，和在千万元素list头部添加新元素的速度相同。就和java里的LinkList差不多。"><a href="#Redis-lists基于Linked-Lists实现。这意味着即使在一个list中有数百万个元素，在头部或尾部添加一个元素的操作，其时间复杂度也是常数级别的。用LPUSH-命令在十个元素的list头部添加新元素，和在千万元素list头部添加新元素的速度相同。就和java里的LinkList差不多。" class="headerlink" title="Redis lists基于Linked Lists实现。这意味着即使在一个list中有数百万个元素，在头部或尾部添加一个元素的操作，其时间复杂度也是常数级别的。用LPUSH 命令在十个元素的list头部添加新元素，和在千万元素list头部添加新元素的速度相同。就和java里的LinkList差不多。"></a>Redis lists基于Linked Lists实现。这意味着即使在一个list中有数百万个元素，在头部或尾部添加一个元素的操作，其时间复杂度也是常数级别的。用LPUSH 命令在十个元素的list头部添加新元素，和在千万元素list头部添加新元素的速度相同。就和java里的LinkList差不多。</h4><p>那么，坏消息是什么？在数组实现的list中利用索引访问元素的速度极快，而同样的操作在linked list实现的list上没有那么快。<br>Redis Lists用linked list实现的原因是：对于数据库系统来说，至关重要的特性是：能非常快的在很大的列表上添加元素。另一个重要因素是，正如你将要看到的：Redis lists能在常数时间取得常数长度。<br>如果快速访问集合元素很重要，建议使用可排序集合(sorted sets)。可排序集合我们会随后介绍。</p><p>LPUSH 命令可向list的左边（头部）添加一个新元素，而RPUSH命令可向list的右边（尾部）添加一个新元素。最后LRANGE 命令可从list中取出一定范围的元素:</p><blockquote><p>rpush mylist A<br>(integer) 1<br>rpush mylist B<br>(integer) 2<br>lpush mylist first<br>(integer) 3<br>lrange mylist 0 -1</p></blockquote><p>1) “first”<br>2) “A”<br>3) “B”<br>注意:LRANGE 带有两个索引，一定范围的第一个和最后一个元素。这两个索引都可以为负来告知Redis从尾部开始计数，因此-1表示最后一个元素，-2表示list中的倒数第二个元素，以此类推。<br>上面的所有命令的参数都可变，方便你一次向list存入多个值。</p><blockquote><p>rpush mylist 1 2 3 4 5 “foo bar”<br>(integer) 9<br>lrange mylist 0 -1</p></blockquote><p>1) “first”<br>2) “A”<br>3) “B”<br>4) “1”<br>5) “2”<br>6) “3”<br>7) “4”<br>8) “5”<br>9) “foo bar”<br>还有一个重要的命令是pop,它从list中删除元素并同时返回删除的值。可以在左边或右边操作。</p><blockquote><p>rpush mylist a b c<br>(integer) 3<br>rpop mylist<br>“c”<br>rpop mylist<br>“b”<br>rpop mylist<br>“a”<br>我们增加了三个元素，并弹出了三个元素，因此，在这最后 列表中的命令序列是空的，没有更多的元素可以被弹出。如果我们尝试弹出另一个元素，这是我们得到的结果：<br>rpop mylist<br>(nil)<br>当list没有元素时，Redis 返回了一个NULL。</p></blockquote><h5 id="List的常用案例"><a href="#List的常用案例" class="headerlink" title="List的常用案例"></a>List的常用案例</h5><p>正如你可以从上面的例子中猜到的，list可被用来实现聊天系统。还可以作为不同进程间传递消息的队列。关键是，你可以每次都以原先添加的顺序访问数据。这不需要任何SQL ORDER BY 操作，将会非常快，也会很容易扩展到百万级别元素的规模。<br>例如在评级系统中，比如社会化新闻网站 reddit.com，你可以把每个新提交的链接添加到一个list，用LRANGE可简单的对结果分页。<br>在博客引擎实现中，你可为每篇日志设置一个list，在该list中推入博客评论，等等。</p><blockquote></blockquote><h5 id="List上的阻塞操作"><a href="#List上的阻塞操作" class="headerlink" title="List上的阻塞操作"></a>List上的阻塞操作</h5><p>可以使用Redis来实现生产者和消费者模型，如使用LPUSH和RPOP来实现该功能。但会遇到这种情景：list是空，这时候消费者就需要轮询来获取数据，这样就会增加redis的访问压力、增加消费端的cpu时间，而很多访问都是无用的。为此redis提供了阻塞式访问 BRPOP 和 BLPOP 命令。 消费者可以在获取数据时指定如果数据不存在阻塞的时间，如果在时限内获得数据则立即返回，如果超时还没有数据则返回null, 0表示一直阻塞。<br>同时redis还会为所有阻塞的消费者以先后顺序排队。<br>如需了解详细信息请查看 RPOPLPUSH 和 BRPOPLPUSH。</p><h5 id="key-的自动创建和删除"><a href="#key-的自动创建和删除" class="headerlink" title="key 的自动创建和删除"></a>key 的自动创建和删除</h5><p>目前为止，在我们的例子中，我们没有在推入元素之前创建空的 list，或者在 list 没有元素时删除它。在 list 为空时删除 key，并在用户试图添加元素（比如通过 LPUSH）而键不存在时创建空 list，是 Redis 的职责。<br>这不光适用于 lists，还适用于所有包括多个元素的 Redis 数据类型 – Sets, Sorted Sets 和 Hashes。<br>基本上，我们可以用三条规则来概括它的行为：</p><ol><li>当我们向一个聚合数据类型中添加元素时，如果目标键不存在，就在添加元素前创建空的聚合数据类型。</li><li>当我们从聚合数据类型中移除元素时，如果值仍然是空的，键自动被销毁。</li><li>对一个空的 key 调用一个只读的命令，比如 LLEN （返回 list 的长度），或者一个删除元素的命令，将总是产生同样的结果。该结果和对一个空的聚合类型做同个操作的结果是一样的。</li></ol><h2 id="散列：Hash"><a href="#散列：Hash" class="headerlink" title="散列：Hash"></a>散列：Hash</h2><p>Redis hash 看起来就像一个 “hash” 的样子，由键值对组成：</p><blockquote><p>hmset user:1000 username antirez birthyear 1977 verified 1<br>OK<br>hget user:1000 username<br>“antirez”<br>hget user:1000 birthyear<br>“1977”<br>hgetall user:1000</p></blockquote><p>1) “username”<br>2) “antirez”<br>3) “birthyear”<br>4) “1977”<br>5) “verified”<br>6) “1”<br>Hash 便于表示 objects，实际上，你可以放入一个 hash 的域数量实际上没有限制（除了可用内存以外）。所以，你可以在你的应用中以不同的方式使用 hash。<br>HMSET 指令设置 hash 中的多个域，而 HGET 取回单个域。HMGET 和 HGET 类似，但返回一系列值：</p><blockquote><p>hmget user:1000 username birthyear no-such-field</p></blockquote><p>1) “antirez”<br>2) “1977”<br>3) (nil)<br>也有一些指令能够对单独的域执行操作，比如 HINCRBY：</p><blockquote><p>hincrby user:1000 birthyear 10<br>(integer) 1987<br>hincrby user:1000 birthyear 10<br>(integer) 1997<br> hash 指令的完整列表。<br>值得注意的是，小的 hash 被用特殊方式编码，非常节约内存。</p></blockquote><h2 id="集合：set"><a href="#集合：set" class="headerlink" title="集合：set"></a>集合：set</h2><p>Redis Set 是 String 的无序排列。SADD 指令把新的元素添加到 set 中。对 set 也可做一些其他的操作，比如测试一个给定的元素是否存在，对不同 set 取交集，并集或差，等等。</p><blockquote><p>sadd myset 1 2 3<br>(integer) 3<br>smembers myset</p></blockquote><ol><li>3</li><li>1</li><li>2<br>现在我已经把三个元素加到我的 set 中，并告诉 Redis 返回所有的元素。可以看到，它们没有被排序 —— Redis 在每次调用时可能按照任意顺序返回元素，因为对于元素的顺序并没有规定。<br>Redis 有检测成员的指令。一个特定的元素是否存在？<blockquote><p>sismember myset 3<br>(integer) 1<br>sismember myset 30<br>(integer) 0<br>“3” 是 set 的一个成员，而 “30” 不是。<br>Sets 适合用于表示对象间的关系。 例如，我们可以轻易使用 set 来表示标记。<br>一个简单的建模方式是，对每一个希望标记的对象使用 set。这个 set 包含和对象相关联的标签的 ID。<br>假设我们想要给新闻打上标签。 假设新闻 ID 1000 被打上了 1,2,5 和 77 四个标签，我们可以使用一个 set 把 tag ID 和新闻条目关联起来：<br>sadd news:1000:tags 1 2 5 77<br>(integer) 4<br>但是，有时候我可能也会需要相反的关系：所有被打上相同标签的新闻列表：<br>sadd tag:1:news 1000<br>(integer) 1<br>sadd tag:2:news 1000<br>(integer) 1<br>sadd tag:5:news 1000<br>(integer) 1<br>sadd tag:77:news 1000<br>(integer) 1<br>获取一个对象的所有 tag 是很方便的：<br>smembers news:1000:tags</p></blockquote></li><li>5</li><li>1</li><li>77</li><li>2<br>注意：在这个例子中，我们假设你有另一个数据结构，比如一个 Redis hash，把标签 ID 对应到标签名称。<br>使用 Redis 命令行，我们可以轻易实现其它一些有用的操作。比如，我们可能需要一个含有 1, 2, 10, 和 27 标签的对象的列表。我们可以用 SINTER 命令来完成这件事。它获取不同 set 的交集。我们可以用：<blockquote><p>sinter tag:1:news tag:2:news tag:10:news tag:27:news<br>… results here …<br>不光可以取交集，还可以取并集，差集，获取随机元素，等等。<br>获取一个元素的命令是 SPOP，它很适合对特定问题建模。比如，要实现一个基于 web 的扑克游戏，你可能需要用 set 来表示一副牌。假设我们用一个字符的前缀来表示不同花色：<br> sadd deck C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 CJ CQ CK<br>D1 D2 D3 D4 D5 D6 D7 D8 D9 D10 DJ DQ DK H1 H2 H3<br>H4 H5 H6 H7 H8 H9 H10 HJ HQ HK S1 S2 S3 S4 S5 S6<br>S7 S8 S9 S10 SJ SQ SK<br>(integer) 52<br>现在，我们想要给每个玩家 5 张牌。SPOP 命令删除一个随机元素，把它返回给客户端，因此它是完全合适的操作。<br>但是，如果我们对我们的牌直接调用它，在下一盘我们就需要重新充满这副牌。开始，我们可以复制 deck 键中的内容，并放入 game:1:deck 键中。<br>这是通过 SUNIONSTORE 实现的，它通常用于对多个集合取并集，并把结果存入另一个 set 中。但是，因为一个 set 的并集就是它本身，我可以这样复制我的牌：<br>sunionstore game:1:deck deck<br>(integer) 52<br>现在，我已经准备好给 1 号玩家发五张牌：<br>spop game:1:deck<br>“C6”<br>spop game:1:deck<br>“CQ”<br>spop game:1:deck<br>“D1”<br>spop game:1:deck<br>“CJ”<br>spop game:1:deck<br>“SJ”</p></blockquote></li></ol><h1 id="排序集数据类型"><a href="#排序集数据类型" class="headerlink" title="排序集数据类型"></a>排序集数据类型</h1><p>排序集类似于集：元素集合。但是，在“排序集”中，每个元素都与一个称为元素得分的浮点值相关联 。由于存在得分，因此排序集中的元素是有序的，因为我们始终可以按得分比较两个元素（如果得分恰好相同，则可以将两个元素作为字符串进行比较）。<br>与“排序集中的集合”一样，不可能添加重复的元素，每个元素都是唯一的。但是，可以更新元素的分数。<br>排序集命令的前缀为Z。以下是“排序集”用法的示例：<br>ZADD zset 10 a<br>ZADD zset 5 b<br>ZADD zset 12.55 c<br>ZRANGE zset 0 -1 =&gt; b,a,c<br>在上面的示例中，我们使用添加了一些元素ZADD，随后使用检索了元素ZRANGE。如您所见，元素按照其得分顺序返回。为了检查给定元素是否存在，并检索其分数（如果存在），我们使用以下ZSCORE命令：<br>ZSCORE zset a =&gt; 10<br>ZSCORE zset non_existing_element =&gt; NULL<br>排序集是一个非常强大的数据结构，您可以按分数范围，字典顺序，反向顺序等查询元素</p><p>HyperLogLog</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式存储 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撕红黑树RedBlackTree    Right？带动画的哦</title>
      <link href="/2020/03/13/%E6%89%8B%E6%92%95%E7%BA%A2%E9%BB%91%E6%A0%91RedBlackTree%20%20%20%20Right%EF%BC%9F%E5%B8%A6%E5%8A%A8%E7%94%BB%E7%9A%84%E5%93%A6/"/>
      <url>/2020/03/13/%E6%89%8B%E6%92%95%E7%BA%A2%E9%BB%91%E6%A0%91RedBlackTree%20%20%20%20Right%EF%BC%9F%E5%B8%A6%E5%8A%A8%E7%94%BB%E7%9A%84%E5%93%A6/</url>
      
        <content type="html"><![CDATA[<p>首先这篇博客花了一点时间才总结出来，肯定还有错误，希望各位读者能够小心翼翼的看。尽量理解吧，因为我自己水平也很菜哈哈。还有就是因为看了很多篇博客其实图片都有问题，所以自己就在<a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html" target="_blank" rel="noopener">RedBlackTree</a>上动手实验，然后搞成了gif图片，供大家参考。然后呢，这篇博客是自己看了WiKi后总结的，基本应该没有啥问题，就是稍微做了些改动吧。</p><h4 id="首先红黑树是一个二叉查找树，就是加了各种限制，让他成为了一种自平衡的二叉树。首先来看看它的五大特性，这也是我们必须要牢记的，后面多次提到，但我还是会多次重复。"><a href="#首先红黑树是一个二叉查找树，就是加了各种限制，让他成为了一种自平衡的二叉树。首先来看看它的五大特性，这也是我们必须要牢记的，后面多次提到，但我还是会多次重复。" class="headerlink" title="首先红黑树是一个二叉查找树，就是加了各种限制，让他成为了一种自平衡的二叉树。首先来看看它的五大特性，这也是我们必须要牢记的，后面多次提到，但我还是会多次重复。"></a>首先红黑树是一个二叉查找树，就是加了各种限制，让他成为了一种自平衡的二叉树。首先来看看它的五大特性，这也是我们必须要牢记的，后面多次提到，但我还是会多次重复。</h4><p><strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong>GO🌈黑🌲GO<strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong></p><hr><ul><li><h4 id="树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）"><a href="#树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）" class="headerlink" title="树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）"></a>树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）</h4></li><li><h4 id="树的根节点一定是黑色的"><a href="#树的根节点一定是黑色的" class="headerlink" title="树的根节点一定是黑色的"></a>树的根节点一定是黑色的</h4></li><li><h4 id="所有的叶子节点一定是黑色的，而且是空的节点。"><a href="#所有的叶子节点一定是黑色的，而且是空的节点。" class="headerlink" title="所有的叶子节点一定是黑色的，而且是空的节点。"></a>所有的叶子节点一定是黑色的，而且是空的节点。</h4></li><li><h4 id="红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻"><a href="#红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻" class="headerlink" title="红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻"></a>红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻</h4></li><li><h4 id="任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同"><a href="#任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同" class="headerlink" title="任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同"></a>任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同</h4></li></ul><hr><p><strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong>GO🌈黑🌲GO<strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong></p><p><img src="https://img-blog.csdnimg.cn/20200219213529673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="看！！！这就是典型的一个红黑树。注意！！！！！！！-有些博客很搞，互相抄来抄去，有些错误的图都被抄过去了，百度搜红黑树，10篇文章4篇文章用那个图，注意了，红黑树本身也是二叉查找树，右边的节点一定比左边的大。所以那些右边节点比左边节点小的，或者不满足上面五大特性的图都是错的。我这里这个图是正确的，不用担心。"><a href="#看！！！这就是典型的一个红黑树。注意！！！！！！！-有些博客很搞，互相抄来抄去，有些错误的图都被抄过去了，百度搜红黑树，10篇文章4篇文章用那个图，注意了，红黑树本身也是二叉查找树，右边的节点一定比左边的大。所以那些右边节点比左边节点小的，或者不满足上面五大特性的图都是错的。我这里这个图是正确的，不用担心。" class="headerlink" title="看！！！这就是典型的一个红黑树。注意！！！！！！！ 有些博客很搞，互相抄来抄去，有些错误的图都被抄过去了，百度搜红黑树，10篇文章4篇文章用那个图，注意了，红黑树本身也是二叉查找树，右边的节点一定比左边的大。所以那些右边节点比左边节点小的，或者不满足上面五大特性的图都是错的。我这里这个图是正确的，不用担心。"></a>看！！！这就是典型的一个红黑树。注意！！！！！！！ 有些博客很搞，互相抄来抄去，有些错误的图都被抄过去了，百度搜红黑树，10篇文章4篇文章用那个图，注意了，红黑树本身也是二叉查找树，右边的节点一定比左边的大。所以那些右边节点比左边节点小的，或者不满足上面五大特性的图都是错的。我这里这个图是正确的，不用担心。</h5><h4 id="了解完了红黑树基本性质，现在就要看看它的基操了对吧，所有的东西都要有基操才可以起飞对吧。你准备好了吗！！！"><a href="#了解完了红黑树基本性质，现在就要看看它的基操了对吧，所有的东西都要有基操才可以起飞对吧。你准备好了吗！！！" class="headerlink" title="了解完了红黑树基本性质，现在就要看看它的基操了对吧，所有的东西都要有基操才可以起飞对吧。你准备好了吗！！！"></a>了解完了红黑树基本性质，现在就要看看它的基操了对吧，所有的东西都要有基操才可以起飞对吧。你准备好了吗！！！</h4><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20200220221013814.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h2><h1 id="😄红黑树的基操✌️🐂👃"><a href="#😄红黑树的基操✌️🐂👃" class="headerlink" title="😄红黑树的基操✌️🐂👃"></a>😄红黑树的基操✌️🐂👃</h1><h3 id="变色"><a href="#变色" class="headerlink" title="变色"></a>变色</h3><p>变色很简单，我们刚插入的节点一定是红色的</p><h5 id="注意！！！再强调一遍，为了插入的节点尽量少影响红黑树的性质，一定是刚插入的节点填充为红色。不信你先复习一下五大特性："><a href="#注意！！！再强调一遍，为了插入的节点尽量少影响红黑树的性质，一定是刚插入的节点填充为红色。不信你先复习一下五大特性：" class="headerlink" title="注意！！！再强调一遍，为了插入的节点尽量少影响红黑树的性质，一定是刚插入的节点填充为红色。不信你先复习一下五大特性："></a>注意！！！再强调一遍，为了插入的节点尽量少影响红黑树的性质，一定是刚插入的节点填充为红色。不信你先复习一下五大特性：</h5><hr><ul><li><h4 id="树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）-1"><a href="#树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）-1" class="headerlink" title="树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）"></a>树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）</h4></li><li><h4 id="树的根节点一定是黑色的-1"><a href="#树的根节点一定是黑色的-1" class="headerlink" title="树的根节点一定是黑色的"></a>树的根节点一定是黑色的</h4></li><li><h4 id="所有的叶子节点一定是黑色的，而且是空的节点。-1"><a href="#所有的叶子节点一定是黑色的，而且是空的节点。-1" class="headerlink" title="所有的叶子节点一定是黑色的，而且是空的节点。"></a>所有的叶子节点一定是黑色的，而且是空的节点。</h4></li><li><h4 id="红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻-1"><a href="#红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻-1" class="headerlink" title="红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻"></a>红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻</h4></li><li><h4 id="任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同-1"><a href="#任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同-1" class="headerlink" title="任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同"></a>任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同</h4></li></ul><p>如果填充为黑色：不会违背特性1，2，3对吧，都是废话。虽然没有违背特性4，但是呢那还要红色节点有什么用呢，因为只说红色节点不能相邻，有没有说黑色节点不能相邻，那么这样就退化成了二叉查找树了。特性5就更可能违背了。</p><p>如果填充为红色：特性1，2，3，5都不会违背，只要看特性4，而且很适合红黑树的性质。</p><h5 id="记住了，所谓变色就是红变成黑，黑变成红。好像是废话。那不看了吧。"><a href="#记住了，所谓变色就是红变成黑，黑变成红。好像是废话。那不看了吧。" class="headerlink" title="记住了，所谓变色就是红变成黑，黑变成红。好像是废话。那不看了吧。"></a>记住了，所谓变色就是红变成黑，黑变成红。好像是废话。那不看了吧。</h5><hr><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p><img src="https://img-blog.csdnimg.cn/20200219214817459.gif" alt="在这里插入图片描述"></p><h6 id="看好上图了，哥哥姐姐们😄，这就是左旋，用你的余光看它，他就是在往左边转。-具体的就是：我们以待旋转的节点-E节点-为中心，将它的右节点-S节点-的左子树，变成自己的右子树，并且之前的右子树成为自己的父节点。"><a href="#看好上图了，哥哥姐姐们😄，这就是左旋，用你的余光看它，他就是在往左边转。-具体的就是：我们以待旋转的节点-E节点-为中心，将它的右节点-S节点-的左子树，变成自己的右子树，并且之前的右子树成为自己的父节点。" class="headerlink" title="看好上图了，哥哥姐姐们😄，这就是左旋，用你的余光看它，他就是在往左边转。 具体的就是：我们以待旋转的节点(E节点)为中心，将它的右节点(S节点)的左子树，变成自己的右子树，并且之前的右子树成为自己的父节点。"></a>看好上图了，哥哥姐姐们😄，这就是左旋，用你的余光看它，他就是在往左边转。 具体的就是：我们以待旋转的节点(E节点)为中心，将它的右节点(S节点)的左子树，变成自己的右子树，并且之前的右子树成为自己的父节点。</h6><hr><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p><img src="https://img-blog.csdnimg.cn/2020021921514350.gif" alt="在这里插入图片描述"></p><h6 id="看这个图也很明显了吧，用你的余光去看，它整体就是往右边转的。具体就是：以待旋转的点-S节点-，整体向右旋转，将左节点-E节点-的右子树变成自己的左子树，并且原来的左节点-E节点-变成自己的父节点。"><a href="#看这个图也很明显了吧，用你的余光去看，它整体就是往右边转的。具体就是：以待旋转的点-S节点-，整体向右旋转，将左节点-E节点-的右子树变成自己的左子树，并且原来的左节点-E节点-变成自己的父节点。" class="headerlink" title="看这个图也很明显了吧，用你的余光去看，它整体就是往右边转的。具体就是：以待旋转的点(S节点)，整体向右旋转，将左节点(E节点)的右子树变成自己的左子树，并且原来的左节点(E节点)变成自己的父节点。"></a>看这个图也很明显了吧，用你的余光去看，它整体就是往右边转的。具体就是：以待旋转的点(S节点)，整体向右旋转，将左节点(E节点)的右子树变成自己的左子树，并且原来的左节点(E节点)变成自己的父节点。</h6><hr><h3 id="你可以休息一下，因为等下会用到上面所有的东西，很复杂！！！！！"><a href="#你可以休息一下，因为等下会用到上面所有的东西，很复杂！！！！！" class="headerlink" title="你可以休息一下，因为等下会用到上面所有的东西，很复杂！！！！！"></a>你可以休息一下，因为等下会用到上面所有的东西，很复杂！！！！！</h3><hr><p><img src="https://img-blog.csdnimg.cn/20200220221047332.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="😷😄🐂🐶🐱🎩🐸红黑树的插入和删除😷😄🐂🐶🐱🎩🐸"><a href="#😷😄🐂🐶🐱🎩🐸红黑树的插入和删除😷😄🐂🐶🐱🎩🐸" class="headerlink" title="😷😄🐂🐶🐱🎩🐸红黑树的插入和删除😷😄🐂🐶🐱🎩🐸"></a>😷😄🐂🐶🐱🎩🐸红黑树的插入和删除😷😄🐂🐶🐱🎩🐸</h1><hr><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><h6 id="我们之前说过了，刚插入的节点一定是红色的。那么就会根据上面的五大特性，一旦违背了某一个特性，就要用一些基操来弥补。"><a href="#我们之前说过了，刚插入的节点一定是红色的。那么就会根据上面的五大特性，一旦违背了某一个特性，就要用一些基操来弥补。" class="headerlink" title="我们之前说过了，刚插入的节点一定是红色的。那么就会根据上面的五大特性，一旦违背了某一个特性，就要用一些基操来弥补。"></a>我们之前说过了，刚插入的节点一定是红色的。那么就会根据上面的五大特性，一旦违背了某一个特性，就要用一些基操来弥补。</h6><h6 id="1⃣️：插入的节点是根节点，那么不要任何左旋右旋，就是变色，将其变成黑色即可。"><a href="#1⃣️：插入的节点是根节点，那么不要任何左旋右旋，就是变色，将其变成黑色即可。" class="headerlink" title="1⃣️：插入的节点是根节点，那么不要任何左旋右旋，就是变色，将其变成黑色即可。"></a>1⃣️：插入的节点是根节点，那么不要任何左旋右旋，就是变色，将其变成黑色即可。</h6><h6 id="2⃣️：插入的节点的父节点刚好是黑色，这时候就不需要变色，因为不违背任何一条特性。"><a href="#2⃣️：插入的节点的父节点刚好是黑色，这时候就不需要变色，因为不违背任何一条特性。" class="headerlink" title="2⃣️：插入的节点的父节点刚好是黑色，这时候就不需要变色，因为不违背任何一条特性。"></a>2⃣️：插入的节点的父节点刚好是黑色，这时候就不需要变色，因为不违背任何一条特性。</h6><p><img src="https://img-blog.csdnimg.cn/20200220132653294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当我插入12<br><img src="https://img-blog.csdnimg.cn/20200220132715114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="3⃣️：但是插入的节点父节点是红色的话，就要又要分几种情况了。但是总的原理就是要把红色节点一直弄到根结点再把根结点弄成黑色，当然，半路可能遇到了连续的黑节点，当把一个节点弄成红色了，就不会有连续的红色节点了。不用担心，等会儿去看看。首先看看不同情况："><a href="#3⃣️：但是插入的节点父节点是红色的话，就要又要分几种情况了。但是总的原理就是要把红色节点一直弄到根结点再把根结点弄成黑色，当然，半路可能遇到了连续的黑节点，当把一个节点弄成红色了，就不会有连续的红色节点了。不用担心，等会儿去看看。首先看看不同情况：" class="headerlink" title="3⃣️：但是插入的节点父节点是红色的话，就要又要分几种情况了。但是总的原理就是要把红色节点一直弄到根结点再把根结点弄成黑色，当然，半路可能遇到了连续的黑节点，当把一个节点弄成红色了，就不会有连续的红色节点了。不用担心，等会儿去看看。首先看看不同情况："></a>3⃣️：但是插入的节点父节点是红色的话，就要又要分几种情况了。但是总的原理就是要把红色节点一直弄到根结点再把根结点弄成黑色，当然，半路可能遇到了连续的黑节点，当把一个节点弄成红色了，就不会有连续的红色节点了。不用担心，等会儿去看看。首先看看不同情况：</h6><h5 id="叔叔节点：即父亲节点的兄弟节点，例如上面14和38就是兄弟节点，12的叔叔节点是38"><a href="#叔叔节点：即父亲节点的兄弟节点，例如上面14和38就是兄弟节点，12的叔叔节点是38" class="headerlink" title="叔叔节点：即父亲节点的兄弟节点，例如上面14和38就是兄弟节点，12的叔叔节点是38."></a>叔叔节点：即父亲节点的兄弟节点，例如上面14和38就是兄弟节点，12的叔叔节点是38.</h5><p><img src="https://img-blog.csdnimg.cn/2020022013510870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Case1-父亲节点是红色，而且叔叔节点也是红色"><a href="#Case1-父亲节点是红色，而且叔叔节点也是红色" class="headerlink" title="Case1:父亲节点是红色，而且叔叔节点也是红色"></a>Case1:父亲节点是红色，而且叔叔节点也是红色</h3><h6 id="这个时候就是将父亲节点设置成黑色，叔叔节点设置成黑色，祖父节点设置成红色，然后以祖父节点为当前节点，继续向上操作（感觉就像变成祖父节点刚插入一样）。"><a href="#这个时候就是将父亲节点设置成黑色，叔叔节点设置成黑色，祖父节点设置成红色，然后以祖父节点为当前节点，继续向上操作（感觉就像变成祖父节点刚插入一样）。" class="headerlink" title="这个时候就是将父亲节点设置成黑色，叔叔节点设置成黑色，祖父节点设置成红色，然后以祖父节点为当前节点，继续向上操作（感觉就像变成祖父节点刚插入一样）。"></a>这个时候就是将父亲节点设置成黑色，叔叔节点设置成黑色，祖父节点设置成红色，然后以祖父节点为当前节点，继续向上操作（感觉就像变成祖父节点刚插入一样）。</h6><p>原因：首先，我们要知道，如果父亲节点也是红色节点，那么在我们插入新节点之前，这棵红黑树是已经平衡好的了，所以既然父亲节点是红色，那么祖父节点一定是黑色(因为两个红色节点不能连续)。然后当我们插入红色节点，将父亲节点染成黑色，但是这时候对祖父节点来说，它由父亲这边就会比叔叔节点那边多一个黑色节点，所以我们不得不把叔叔也变成黑色。那么为什么又要将祖父节点变成红色呢。其实道理是一样的，因为父节点和叔叔节点变成了黑色，那么对于祖父节点的父节点来说，祖父节点这边的黑色节点会比祖父节点的兄弟节点的黑色节点要多，所以我们必须把祖父节点变成红色来抵消掉叔叔和父亲节点的颜色变化。。有人又有疑问，明明是两个节点变成黑色，为什么只有祖父节点一个节点变成红色？注意了，是任意一个节点到自己叶子节点路径经过的黑色节点相同，所以对祖父节点的父亲节点来说，它经过祖父节点-&gt;父节点，和祖父节点-&gt;叔叔节点是两种不同路径，他们经历的黑色节点是一样的。<br><img src="https://img-blog.csdnimg.cn/2020022013595148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当我插入60</p><p><img src="https://img-blog.csdnimg.cn/20200220143431600.gif" alt="在这里插入图片描述"></p><h3 id="Case2-父亲节点是红色，但是叔叔节点是黑色，而且当前节点是父亲节点的右孩子"><a href="#Case2-父亲节点是红色，但是叔叔节点是黑色，而且当前节点是父亲节点的右孩子" class="headerlink" title="Case2:父亲节点是红色，但是叔叔节点是黑色，而且当前节点是父亲节点的右孩子"></a>Case2:父亲节点是红色，但是叔叔节点是黑色，而且当前节点是父亲节点的右孩子</h3><h6 id="这个时候是先将父亲节点作为当前节点，然后以当前节点为轴进行左旋。注意，左旋之后可能会出现Case3，所以两个case可以串起来看，相应的，case3后也可能出现case2。大家凑合着看。"><a href="#这个时候是先将父亲节点作为当前节点，然后以当前节点为轴进行左旋。注意，左旋之后可能会出现Case3，所以两个case可以串起来看，相应的，case3后也可能出现case2。大家凑合着看。" class="headerlink" title="这个时候是先将父亲节点作为当前节点，然后以当前节点为轴进行左旋。注意，左旋之后可能会出现Case3，所以两个case可以串起来看，相应的，case3后也可能出现case2。大家凑合着看。"></a>这个时候是先将父亲节点作为当前节点，然后以当前节点为轴进行左旋。注意，左旋之后可能会出现Case3，所以两个case可以串起来看，相应的，case3后也可能出现case2。大家凑合着看。</h6><p>原因：一般来说，我们一切的左旋右旋都是为了将插入的红色节点上浮一直到根结点，或者中途有连续的黑节点阻拦。但是呢，我们可以仔细看看这种情况，一旦当前节点是红色，父亲节点黑色，叔叔节点黑色，当进行左旋之后，是不是原来的当前节点变成了现在父节点，原来的父节点变成了现在的当前节点了。（注意这里当前节点已经变了，不要还在想之前的当前节点了），这时候就是Case3的情况了，所以应该又要根据Case3进行操作了。<br>首先看看Case2<br><img src="https://img-blog.csdnimg.cn/20200220150859611.gif" alt="在这里插入图片描述"></p><h6 id="看清楚最后了吗，左旋之后，一共两个红色点连在一起了，对不对。这样子"><a href="#看清楚最后了吗，左旋之后，一共两个红色点连在一起了，对不对。这样子" class="headerlink" title="看清楚最后了吗，左旋之后，一共两个红色点连在一起了，对不对。这样子"></a>看清楚最后了吗，左旋之后，一共两个红色点连在一起了，对不对。这样子</h6><p><img src="https://img-blog.csdnimg.cn/20200220151048668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="此时的当前节点是60，对不对？有人有疑问了，为啥当前节点是60，自己看清楚上面的Case2的处理逻辑，我们说好了先将当前节点变成父节点，然后以父亲节点进行左旋，所以左旋之后当前节点应该是60-60是原来的父节点对吧-。"><a href="#此时的当前节点是60，对不对？有人有疑问了，为啥当前节点是60，自己看清楚上面的Case2的处理逻辑，我们说好了先将当前节点变成父节点，然后以父亲节点进行左旋，所以左旋之后当前节点应该是60-60是原来的父节点对吧-。" class="headerlink" title="此时的当前节点是60，对不对？有人有疑问了，为啥当前节点是60，自己看清楚上面的Case2的处理逻辑，我们说好了先将当前节点变成父节点，然后以父亲节点进行左旋，所以左旋之后当前节点应该是60(60是原来的父节点对吧)。"></a>此时的当前节点是60，对不对？有人有疑问了，为啥当前节点是60，自己看清楚上面的Case2的处理逻辑，我们说好了先将当前节点变成父节点，然后以父亲节点进行左旋，所以左旋之后当前节点应该是60(60是原来的父节点对吧)。</h6><h6 id="如果你理清了当前节点是60的话，那么我们在来看现在的情况，就是说60是红色，它的父亲节点64是红色，而叔叔节点是Nil也就是黑色节点，那么很明显就满足了Case3，那么我们就来看看Case3"><a href="#如果你理清了当前节点是60的话，那么我们在来看现在的情况，就是说60是红色，它的父亲节点64是红色，而叔叔节点是Nil也就是黑色节点，那么很明显就满足了Case3，那么我们就来看看Case3" class="headerlink" title="如果你理清了当前节点是60的话，那么我们在来看现在的情况，就是说60是红色，它的父亲节点64是红色，而叔叔节点是Nil也就是黑色节点，那么很明显就满足了Case3，那么我们就来看看Case3"></a>如果你理清了当前节点是60的话，那么我们在来看现在的情况，就是说60是红色，它的父亲节点64是红色，而叔叔节点是Nil也就是黑色节点，那么很明显就满足了Case3，那么我们就来看看Case3</h6><h3 id="Case3-当前节点是红色节点，父亲节点也是红色，但是叔叔节点是黑色节点，这时候要将父亲节点设为黑色，然后将祖父节点设为红色，并且以祖父节点为轴进行右旋"><a href="#Case3-当前节点是红色节点，父亲节点也是红色，但是叔叔节点是黑色节点，这时候要将父亲节点设为黑色，然后将祖父节点设为红色，并且以祖父节点为轴进行右旋" class="headerlink" title="Case3:当前节点是红色节点，父亲节点也是红色，但是叔叔节点是黑色节点，这时候要将父亲节点设为黑色，然后将祖父节点设为红色，并且以祖父节点为轴进行右旋"></a>Case3:当前节点是红色节点，父亲节点也是红色，但是叔叔节点是黑色节点，这时候要将父亲节点设为黑色，然后将祖父节点设为红色，并且以祖父节点为轴进行右旋</h3><p>原因：我们遇到了种种情况，是要把父节点染成黑色的，但是对于祖父节点来说，父节点这边就多了一个黑色节点，又因为叔叔节点本身就是黑色的，无法像Case1一样染黑和父节点平衡。只能通过将祖父节点染成红色，然后以祖父节点为轴右旋，就如下面的gif图像所示。<br><img src="https://img-blog.csdnimg.cn/20200220151822974.gif" alt="在这里插入图片描述"><br>最终是不是这个样子<br><img src="https://img-blog.csdnimg.cn/20200220151842328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>以上就是红黑树的插入，注意了，一定要弄清楚当前节点是什么，理论上你可以把当前节点看作一个插入节点来看的，因为它一般是红的。不过还是按照上面的Case比较好。只要你掌握当前节点，然后以当前节点判断上面三种情况，自下而上不断操作，最后就会颜色平衡，其树的高度也能够自平衡。<br><img src="https://img-blog.csdnimg.cn/20200220152601320.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="好了，👍暂且可以休息一下♨️，因为我们才把红黑树的插入搞完，还有删除呢。之后还要实现代码。如果你休息完了直接开始把"><a href="#好了，👍暂且可以休息一下♨️，因为我们才把红黑树的插入搞完，还有删除呢。之后还要实现代码。如果你休息完了直接开始把" class="headerlink" title="好了，👍暂且可以休息一下♨️，因为我们才把红黑树的插入搞完，还有删除呢。之后还要实现代码。如果你休息完了直接开始把"></a>好了，👍暂且可以休息一下♨️，因为我们才把红黑树的插入搞完，还有删除呢。之后还要实现代码。如果你休息完了直接开始把</h3><p><img src="https://img-blog.csdnimg.cn/20200220221126770.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="红黑树的删除"><a href="#红黑树的删除" class="headerlink" title="红黑树的删除"></a>红黑树的删除</h1><h6 id="删除节点和普通的查找二叉树差不多，删除过程是一样的，只是后来多了一个自平衡的过程。不要担心，体谅体谅吧。复习一下删除节点过程："><a href="#删除节点和普通的查找二叉树差不多，删除过程是一样的，只是后来多了一个自平衡的过程。不要担心，体谅体谅吧。复习一下删除节点过程：" class="headerlink" title="删除节点和普通的查找二叉树差不多，删除过程是一样的，只是后来多了一个自平衡的过程。不要担心，体谅体谅吧。复习一下删除节点过程："></a>删除节点和普通的查找二叉树差不多，删除过程是一样的，只是后来多了一个自平衡的过程。不要担心，体谅体谅吧。复习一下删除节点过程：</h6><blockquote><ul><li><strong>1⃣️如果这个要删除的节点是最后一个节点，也就是叶子节点，但是在红黑树里面叶子节点是NIL的空节点，这里就理解成子节点是NIL的节点吧。这种情况下直接删除即可。</strong></li><li><strong>2⃣️如果要删除的节点有一个子节点，那么直接用子节点替代掉自己就行。</strong></li><li><strong>3⃣️这个就比较巧妙了，前面的情况要么是没儿子，要么只有一个儿子，那现在就是有两个儿子的情况了，这时候就是先找到带删除节点的后继节点(后继节点就是比当前大的下一个节点，注意这里并不一定是子节点。像下面这个图54的后继节点就是60。懂了吧)。找到之后，将后继节点的内容替代掉待删除节点的内容，然后我们就要删除后继节点。这个后继节点有个特点，它一定是某个节点的左节点，这是查找树的特质，因为左子节点一定比自己小。正因为这样，我们找54的后继节点就一定是在它的右子树找，然后一直往右子树的左节点找，最终的那个左节点才是后继节点。那么后继节点是肯定没有左节点的，可能有右节点，所以我们复制完后继节点后，就要将后继节点删除，这时候根据儿子的数量就去情况1⃣️或2⃣️</strong><br><img src="https://img-blog.csdnimg.cn/20200220160146495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h3 id="删除后的自平衡"><a href="#删除后的自平衡" class="headerlink" title="删除后的自平衡"></a>删除后的自平衡</h3><h6 id="不管怎么样，总不能违背那五个特性，所以我们需要通过旋转，变色来维持那五个特性。"><a href="#不管怎么样，总不能违背那五个特性，所以我们需要通过旋转，变色来维持那五个特性。" class="headerlink" title="不管怎么样，总不能违背那五个特性，所以我们需要通过旋转，变色来维持那五个特性。"></a>不管怎么样，总不能违背那五个特性，所以我们需要通过旋转，变色来维持那五个特性。</h6><hr><blockquote><ul><li><h6 id="树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）-2"><a href="#树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）-2" class="headerlink" title="树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）"></a>树的节点要么是红色的，要么就是黑色的（这是废话，不然怎么叫红黑树）</h6></li><li><h6 id="树的根节点一定是黑色的-2"><a href="#树的根节点一定是黑色的-2" class="headerlink" title="树的根节点一定是黑色的"></a>树的根节点一定是黑色的</h6></li><li><h6 id="所有的叶子节点一定是黑色的，而且是空的节点。-2"><a href="#所有的叶子节点一定是黑色的，而且是空的节点。-2" class="headerlink" title="所有的叶子节点一定是黑色的，而且是空的节点。"></a>所有的叶子节点一定是黑色的，而且是空的节点。</h6></li><li><h6 id="红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻-2"><a href="#红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻-2" class="headerlink" title="红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻"></a>红色节点的两个子节点一定是黑色的，换个方式说，任何两个红色节点都不可能相邻</h6></li><li><h6 id="任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同-2"><a href="#任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同-2" class="headerlink" title="任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同"></a>任意一个节点到他所有叶子节点所经过的黑色节点个数一定相同</h6></li></ul></blockquote><hr><h6 id="前面说了，要删除一个节点，如果有一个孩子或者没有孩子，可以直接拿孩子节点替代对吧。但是如果有两个孩子的话，找到这个节点的后继节点，颜色还是不变，只是把后继节点的内容复制过来就行，这样就不会影响颜色，然后转而去删除后继节点，这样后继节点也只有一个孩子或者没有孩子，从而可以将整个问题转变成删除一个最多只有一个孩子的节点。这里一定要弄清楚！！！！弄清楚再往后看。"><a href="#前面说了，要删除一个节点，如果有一个孩子或者没有孩子，可以直接拿孩子节点替代对吧。但是如果有两个孩子的话，找到这个节点的后继节点，颜色还是不变，只是把后继节点的内容复制过来就行，这样就不会影响颜色，然后转而去删除后继节点，这样后继节点也只有一个孩子或者没有孩子，从而可以将整个问题转变成删除一个最多只有一个孩子的节点。这里一定要弄清楚！！！！弄清楚再往后看。" class="headerlink" title="前面说了，要删除一个节点，如果有一个孩子或者没有孩子，可以直接拿孩子节点替代对吧。但是如果有两个孩子的话，找到这个节点的后继节点，颜色还是不变，只是把后继节点的内容复制过来就行，这样就不会影响颜色，然后转而去删除后继节点，这样后继节点也只有一个孩子或者没有孩子，从而可以将整个问题转变成删除一个最多只有一个孩子的节点。这里一定要弄清楚！！！！弄清楚再往后看。"></a>前面说了，要删除一个节点，如果有一个孩子或者没有孩子，可以直接拿孩子节点替代对吧。但是如果有两个孩子的话，找到这个节点的后继节点，颜色还是不变，只是把后继节点的内容复制过来就行，这样就不会影响颜色，然后转而去删除后继节点，这样后继节点也只有一个孩子或者没有孩子，从而可以将整个问题转变成删除一个最多只有一个孩子的节点。这里一定要弄清楚！！！！弄清楚再往后看。</h6><p><img src="https://img-blog.csdnimg.cn/20200220171501870.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="那么就开始进入真正的删除过程。这个真正的删除过程的删除的节点是最多只有一个孩子的节点！！还是再强调，整个问题已经转成了删除最多只有一个孩子的节点。OK。如果删除的节点是红色，我们直接拿孩子节点补上就行，但是如果删除的是黑色，那就麻烦了。"><a href="#那么就开始进入真正的删除过程。这个真正的删除过程的删除的节点是最多只有一个孩子的节点！！还是再强调，整个问题已经转成了删除最多只有一个孩子的节点。OK。如果删除的节点是红色，我们直接拿孩子节点补上就行，但是如果删除的是黑色，那就麻烦了。" class="headerlink" title="那么就开始进入真正的删除过程。这个真正的删除过程的删除的节点是最多只有一个孩子的节点！！还是再强调，整个问题已经转成了删除最多只有一个孩子的节点。OK。如果删除的节点是红色，我们直接拿孩子节点补上就行，但是如果删除的是黑色，那就麻烦了。"></a>那么就开始进入真正的删除过程。这个真正的删除过程的删除的节点是最多只有一个孩子的节点！！还是再强调，整个问题已经转成了删除最多只有一个孩子的节点。OK。如果删除的节点是红色，我们直接拿孩子节点补上就行，但是如果删除的是黑色，那就麻烦了。</h5><h4 id="但是不管怎么样，我们直接将删除节点用它的孩子替换掉，并将替换之后的节点作为N，删除节点的父节点也就是替换节点N的父节点作为P，而删除节点的兄弟节点也就是替换节点N的兄弟节点作为B，且兄弟节点的左节点为BL，右节点为BR。！！！！！！！而且注意了，下面情况中都没有删除节点的表示了，只有替换节点N！！！！"><a href="#但是不管怎么样，我们直接将删除节点用它的孩子替换掉，并将替换之后的节点作为N，删除节点的父节点也就是替换节点N的父节点作为P，而删除节点的兄弟节点也就是替换节点N的兄弟节点作为B，且兄弟节点的左节点为BL，右节点为BR。！！！！！！！而且注意了，下面情况中都没有删除节点的表示了，只有替换节点N！！！！" class="headerlink" title="但是不管怎么样，我们直接将删除节点用它的孩子替换掉，并将替换之后的节点作为N，删除节点的父节点也就是替换节点N的父节点作为P，而删除节点的兄弟节点也就是替换节点N的兄弟节点作为B，且兄弟节点的左节点为BL，右节点为BR。！！！！！！！而且注意了，下面情况中都没有删除节点的表示了，只有替换节点N！！！！"></a>但是不管怎么样，我们直接将删除节点用它的孩子替换掉，并将替换之后的节点作为N，删除节点的父节点也就是替换节点N的父节点作为P，而删除节点的兄弟节点也就是替换节点N的兄弟节点作为B，且兄弟节点的左节点为BL，右节点为BR。！！！！！！！而且注意了，下面情况中都没有删除节点的表示了，只有替换节点N！！！！</h4><p>那么我们就要分别去区分不同的情况了，各位老板们。</p><h4 id="Case1"><a href="#Case1" class="headerlink" title="Case1"></a>Case1</h4><ul><li><h6 id="如果删除的节点是红色的，那么我们可以直接将孩子节点N补位，因为孩子节点一定是黑色的，并没有影响任何五大特性。"><a href="#如果删除的节点是红色的，那么我们可以直接将孩子节点N补位，因为孩子节点一定是黑色的，并没有影响任何五大特性。" class="headerlink" title="如果删除的节点是红色的，那么我们可以直接将孩子节点N补位，因为孩子节点一定是黑色的，并没有影响任何五大特性。"></a>如果删除的节点是红色的，那么我们可以直接将孩子节点N补位，因为孩子节点一定是黑色的，并没有影响任何五大特性。</h6>这种情况不要说了吧，很明显应该没有问题，红色节点一定只有黑色孩子，这里因为找不到黑色非空孩子节点的情况，就将NIL叶子节点当作黑色节点吧，这也是算法导论里面为了让算法表达更容易从而加入NIL黑色空节点的原因。可以看到整个没有影响到平衡的。<br><img src="https://img-blog.csdnimg.cn/20200220173042506.gif" alt="在这里插入图片描述"><h4 id="Case2"><a href="#Case2" class="headerlink" title="Case2"></a>Case2</h4></li><li><h6 id="如果删除节点是黑色，且它的孩子是红色，那么直接拿红色孩子替换删除节点就行了。并且把孩子节点染成黑色。"><a href="#如果删除节点是黑色，且它的孩子是红色，那么直接拿红色孩子替换删除节点就行了。并且把孩子节点染成黑色。" class="headerlink" title="如果删除节点是黑色，且它的孩子是红色，那么直接拿红色孩子替换删除节点就行了。并且把孩子节点染成黑色。"></a>如果删除节点是黑色，且它的孩子是红色，那么直接拿红色孩子替换删除节点就行了。并且把孩子节点染成黑色。</h6><img src="https://img-blog.csdnimg.cn/20200220180003562.gif" alt="在这里插入图片描述"></li></ul><h4 id="以上两种情况都还好的，下面就是黑色删除节点-黑色N的各种情况了。而且下面的情况更为复杂，因为涉及到左旋右旋，所以下面情况可能是以删除节点作为其父节点的左孩子所做的操作，如果作为有孩子的操作就会相反。"><a href="#以上两种情况都还好的，下面就是黑色删除节点-黑色N的各种情况了。而且下面的情况更为复杂，因为涉及到左旋右旋，所以下面情况可能是以删除节点作为其父节点的左孩子所做的操作，如果作为有孩子的操作就会相反。" class="headerlink" title="以上两种情况都还好的，下面就是黑色删除节点+黑色N的各种情况了。而且下面的情况更为复杂，因为涉及到左旋右旋，所以下面情况可能是以删除节点作为其父节点的左孩子所做的操作，如果作为有孩子的操作就会相反。"></a>以上两种情况都还好的，下面就是黑色删除节点+黑色N的各种情况了。而且下面的情况更为复杂，因为涉及到左旋右旋，所以下面情况可能是以删除节点作为其父节点的左孩子所做的操作，如果作为有孩子的操作就会相反。</h4><h3 id="Case3"><a href="#Case3" class="headerlink" title="Case3"></a>Case3</h3><ul><li><h6 id="替换节点N是左节点：如果删除的节点是黑色，而删除的孩子节点N也是黑色。父节点P也是黑色，但是兄弟节点B是红色，兄弟节点的孩子BR和BL是黑色节点。那么这种情况就是当孩子节点N替代掉删除节点后，先将父亲节点P变为红色，然后将兄弟节点B变为黑色，再以父亲节点P为轴进行左旋。"><a href="#替换节点N是左节点：如果删除的节点是黑色，而删除的孩子节点N也是黑色。父节点P也是黑色，但是兄弟节点B是红色，兄弟节点的孩子BR和BL是黑色节点。那么这种情况就是当孩子节点N替代掉删除节点后，先将父亲节点P变为红色，然后将兄弟节点B变为黑色，再以父亲节点P为轴进行左旋。" class="headerlink" title="替换节点N是左节点：如果删除的节点是黑色，而删除的孩子节点N也是黑色。父节点P也是黑色，但是兄弟节点B是红色，兄弟节点的孩子BR和BL是黑色节点。那么这种情况就是当孩子节点N替代掉删除节点后，先将父亲节点P变为红色，然后将兄弟节点B变为黑色，再以父亲节点P为轴进行左旋。"></a>替换节点N是左节点：如果删除的节点是黑色，而删除的孩子节点N也是黑色。父节点P也是黑色，但是兄弟节点B是红色，兄弟节点的孩子BR和BL是黑色节点。那么这种情况就是当孩子节点N替代掉删除节点后，先将父亲节点P变为红色，然后将兄弟节点B变为黑色，再以父亲节点P为轴进行左旋。</h6></li><li><h6 id="替换节点N是右节点：如果删除的节点是黑色，而删除节点孩子N也是黑色。父节点P也是黑色，但是兄弟节点B是红色，兄弟节点的孩子BR和BL是黑色节点。那么这种情况就是当孩子节点N替代掉删除节点后，先将父亲接待你变成红色，然后兄弟节点B变成黑色，再以父亲节点P为轴进行右旋。"><a href="#替换节点N是右节点：如果删除的节点是黑色，而删除节点孩子N也是黑色。父节点P也是黑色，但是兄弟节点B是红色，兄弟节点的孩子BR和BL是黑色节点。那么这种情况就是当孩子节点N替代掉删除节点后，先将父亲接待你变成红色，然后兄弟节点B变成黑色，再以父亲节点P为轴进行右旋。" class="headerlink" title="替换节点N是右节点：如果删除的节点是黑色，而删除节点孩子N也是黑色。父节点P也是黑色，但是兄弟节点B是红色，兄弟节点的孩子BR和BL是黑色节点。那么这种情况就是当孩子节点N替代掉删除节点后，先将父亲接待你变成红色，然后兄弟节点B变成黑色，再以父亲节点P为轴进行右旋。"></a>替换节点N是右节点：如果删除的节点是黑色，而删除节点孩子N也是黑色。父节点P也是黑色，但是兄弟节点B是红色，兄弟节点的孩子BR和BL是黑色节点。那么这种情况就是当孩子节点N替代掉删除节点后，先将父亲接待你变成红色，然后兄弟节点B变成黑色，再以父亲节点P为轴进行右旋。</h6><img src="https://img-blog.csdnimg.cn/2020022019393585.gif" alt="在这里插入图片描述"><br>这里对于节点14，它的父节点23是黑色的，它的兄弟节点是红色的，这时候操作就是将14删除后，它的子节点或者空节点成为23的子节点，然后父亲节点变成红色，兄弟节点47变成黑色，最后以父亲节点23为中心进行左旋。<h6 id="注意一下，与14相同的还有最右边的99，只是14是作为23的做孩子，99作为90的右孩子，所以对99来说，旋转操作是右旋！！注意了，上图是作为左孩子才是左旋，如果是右孩子就是右旋。"><a href="#注意一下，与14相同的还有最右边的99，只是14是作为23的做孩子，99作为90的右孩子，所以对99来说，旋转操作是右旋！！注意了，上图是作为左孩子才是左旋，如果是右孩子就是右旋。" class="headerlink" title="注意一下，与14相同的还有最右边的99，只是14是作为23的做孩子，99作为90的右孩子，所以对99来说，旋转操作是右旋！！注意了，上图是作为左孩子才是左旋，如果是右孩子就是右旋。"></a>注意一下，与14相同的还有最右边的99，只是14是作为23的做孩子，99作为90的右孩子，所以对99来说，旋转操作是右旋！！注意了，上图是作为左孩子才是左旋，如果是右孩子就是右旋。</h6><h6 id="然后看看最后状态图，现在的N是23的左节点NULL-LEAF空节点，那么可以看见23的左右节点明显不平衡对吧，黑色节点多了。所以这时候就要看Case4了。"><a href="#然后看看最后状态图，现在的N是23的左节点NULL-LEAF空节点，那么可以看见23的左右节点明显不平衡对吧，黑色节点多了。所以这时候就要看Case4了。" class="headerlink" title="然后看看最后状态图，现在的N是23的左节点NULL LEAF空节点，那么可以看见23的左右节点明显不平衡对吧，黑色节点多了。所以这时候就要看Case4了。"></a>然后看看最后状态图，现在的N是23的左节点NULL LEAF空节点，那么可以看见23的左右节点明显不平衡对吧，黑色节点多了。所以这时候就要看Case4了。</h6></li></ul><p><img src="https://img-blog.csdnimg.cn/20200220201152122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Case4"><a href="#Case4" class="headerlink" title="Case4"></a>Case4</h4><ul><li><h6 id="如果当前节点作为左孩子，如果当前节点N是黑色，父节点颜色无所谓，兄弟节点B是黑色，兄弟节点的右孩子BR是红色，兄弟节点的左孩子BR无所谓，那么这时候就要将当前节点N的父亲节点P的颜色给兄弟节点B，然后将父节点设为黑色，将N兄弟节点的右子节点设为黑色，之后以N的父节点P为轴进行左旋。"><a href="#如果当前节点作为左孩子，如果当前节点N是黑色，父节点颜色无所谓，兄弟节点B是黑色，兄弟节点的右孩子BR是红色，兄弟节点的左孩子BR无所谓，那么这时候就要将当前节点N的父亲节点P的颜色给兄弟节点B，然后将父节点设为黑色，将N兄弟节点的右子节点设为黑色，之后以N的父节点P为轴进行左旋。" class="headerlink" title="如果当前节点作为左孩子，如果当前节点N是黑色，父节点颜色无所谓，兄弟节点B是黑色，兄弟节点的右孩子BR是红色，兄弟节点的左孩子BR无所谓，那么这时候就要将当前节点N的父亲节点P的颜色给兄弟节点B，然后将父节点设为黑色，将N兄弟节点的右子节点设为黑色，之后以N的父节点P为轴进行左旋。"></a>如果当前节点作为左孩子，如果当前节点N是黑色，父节点颜色无所谓，兄弟节点B是黑色，兄弟节点的右孩子BR是红色，兄弟节点的左孩子BR无所谓，那么这时候就要将当前节点N的父亲节点P的颜色给兄弟节点B，然后将父节点设为黑色，将N兄弟节点的右子节点设为黑色，之后以N的父节点P为轴进行左旋。</h6></li><li><h6 id="如果当前节点作为右孩子，如果当前节点N是黑色，父节点颜色无所谓，兄弟节点B是黑色，兄弟节点的左孩子BL是红色，兄弟节点的右孩子BR无所谓，那么这时候就要将当前节点N的父亲节点P的颜色给兄弟节点B，然后将父节点设为给色，将N兄弟节点的左节点BL设为黑色，之后以N的父节点P为轴进行右旋。"><a href="#如果当前节点作为右孩子，如果当前节点N是黑色，父节点颜色无所谓，兄弟节点B是黑色，兄弟节点的左孩子BL是红色，兄弟节点的右孩子BR无所谓，那么这时候就要将当前节点N的父亲节点P的颜色给兄弟节点B，然后将父节点设为给色，将N兄弟节点的左节点BL设为黑色，之后以N的父节点P为轴进行右旋。" class="headerlink" title="如果当前节点作为右孩子，如果当前节点N是黑色，父节点颜色无所谓，兄弟节点B是黑色，兄弟节点的左孩子BL是红色，兄弟节点的右孩子BR无所谓，那么这时候就要将当前节点N的父亲节点P的颜色给兄弟节点B，然后将父节点设为给色，将N兄弟节点的左节点BL设为黑色，之后以N的父节点P为轴进行右旋。"></a>如果当前节点作为右孩子，如果当前节点N是黑色，父节点颜色无所谓，兄弟节点B是黑色，兄弟节点的左孩子BL是红色，兄弟节点的右孩子BR无所谓，那么这时候就要将当前节点N的父亲节点P的颜色给兄弟节点B，然后将父节点设为给色，将N兄弟节点的左节点BL设为黑色，之后以N的父节点P为轴进行右旋。</h6><img src="https://img-blog.csdnimg.cn/20200220201720706.gif" alt="在这里插入图片描述"><br>看看这个，可以看到N(NULL LEAF)的父节点P(23)的颜色红色给了N的兄弟节点B(45)，然后父节点P(23)变成了红色，之后兄弟节点B的右孩子BR(45)变成黑色，最后将以父节点P(23)为轴进行了左旋。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200220202034708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Case5"><a href="#Case5" class="headerlink" title="Case5"></a>Case5</h4><ul><li><h6 id="如果N节点作为左孩子，如果N节点也是黑色，那么如果N的兄弟节点B是黑色，而且兄弟节点的两个孩子也是黑色的，而且父亲节点是红色的，那么直接将兄弟节点B和父亲节点颜色互换就行。"><a href="#如果N节点作为左孩子，如果N节点也是黑色，那么如果N的兄弟节点B是黑色，而且兄弟节点的两个孩子也是黑色的，而且父亲节点是红色的，那么直接将兄弟节点B和父亲节点颜色互换就行。" class="headerlink" title="如果N节点作为左孩子，如果N节点也是黑色，那么如果N的兄弟节点B是黑色，而且兄弟节点的两个孩子也是黑色的，而且父亲节点是红色的，那么直接将兄弟节点B和父亲节点颜色互换就行。"></a>如果N节点作为左孩子，如果N节点也是黑色，那么如果N的兄弟节点B是黑色，而且兄弟节点的两个孩子也是黑色的，而且父亲节点是红色的，那么直接将兄弟节点B和父亲节点颜色互换就行。</h6></li><li><h6 id="如果N节点作为右孩子，如果N节点也是黑色，那么如果N的兄弟节点B是黑色，而且兄弟节点的两个孩子也是黑色的，而且父亲节点是红色的，那么直接将兄弟节点B和父亲节点颜色互换就行。"><a href="#如果N节点作为右孩子，如果N节点也是黑色，那么如果N的兄弟节点B是黑色，而且兄弟节点的两个孩子也是黑色的，而且父亲节点是红色的，那么直接将兄弟节点B和父亲节点颜色互换就行。" class="headerlink" title="如果N节点作为右孩子，如果N节点也是黑色，那么如果N的兄弟节点B是黑色，而且兄弟节点的两个孩子也是黑色的，而且父亲节点是红色的，那么直接将兄弟节点B和父亲节点颜色互换就行。"></a>如果N节点作为右孩子，如果N节点也是黑色，那么如果N的兄弟节点B是黑色，而且兄弟节点的两个孩子也是黑色的，而且父亲节点是红色的，那么直接将兄弟节点B和父亲节点颜色互换就行。</h6><img src="https://img-blog.csdnimg.cn/20200220205229954.gif" alt="在这里插入图片描述"><br>为什么互换就可以了，我们想一想，我们删除了21，是不是23-&gt;21-&gt;NULL 这条路就少了一个黑色节点，但是23-&gt;34-&gt;NULL却没有问题，这时候将兄弟节点和父亲节点颜色互换就OK了。前提是兄弟节点的两个子节点也是黑色的。</li></ul><h4 id="Case6：官方的可能没有这种情况，但是我还是列举出来，因为和Case5其实差不多去。"><a href="#Case6：官方的可能没有这种情况，但是我还是列举出来，因为和Case5其实差不多去。" class="headerlink" title="Case6：官方的可能没有这种情况，但是我还是列举出来，因为和Case5其实差不多去。"></a>Case6：官方的可能没有这种情况，但是我还是列举出来，因为和Case5其实差不多去。</h4><ul><li><h6 id="这个就是N节点的兄弟节点是黑色，两个子节点也是黑色的，但是父亲节点是黑色的。这种情况下只能将兄弟节点变为红色，这样两边黑色节点个数就相同了。N节点作为左孩子右孩子无所谓"><a href="#这个就是N节点的兄弟节点是黑色，两个子节点也是黑色的，但是父亲节点是黑色的。这种情况下只能将兄弟节点变为红色，这样两边黑色节点个数就相同了。N节点作为左孩子右孩子无所谓" class="headerlink" title="这个就是N节点的兄弟节点是黑色，两个子节点也是黑色的，但是父亲节点是黑色的。这种情况下只能将兄弟节点变为红色，这样两边黑色节点个数就相同了。N节点作为左孩子右孩子无所谓"></a>这个就是N节点的兄弟节点是黑色，两个子节点也是黑色的，但是父亲节点是黑色的。这种情况下只能将兄弟节点变为红色，这样两边黑色节点个数就相同了。N节点作为左孩子右孩子无所谓</h6><img src="https://img-blog.csdnimg.cn/20200220210257127.gif" alt="在这里插入图片描述"><br>但是呢，虽说这样但是42-&gt;47还有42-&gt;23的黑色点明显就不同了，明显就少了一个，所以现在要对47进行平衡，也就是令47为N了，接下来就看Case7</li></ul><h4 id="Case7"><a href="#Case7" class="headerlink" title="Case7"></a>Case7</h4><h5 id="如果N是黑色左节点：那么不管父亲节点是什么颜色，如果兄弟节点B是黑色的，且兄弟节点B的左节点BL是红色，右节点BR是黑色，那么就以B为轴进行右旋操作，然后互换B和BL的颜色。"><a href="#如果N是黑色左节点：那么不管父亲节点是什么颜色，如果兄弟节点B是黑色的，且兄弟节点B的左节点BL是红色，右节点BR是黑色，那么就以B为轴进行右旋操作，然后互换B和BL的颜色。" class="headerlink" title="如果N是黑色左节点：那么不管父亲节点是什么颜色，如果兄弟节点B是黑色的，且兄弟节点B的左节点BL是红色，右节点BR是黑色，那么就以B为轴进行右旋操作，然后互换B和BL的颜色。"></a>如果N是黑色左节点：那么不管父亲节点是什么颜色，如果兄弟节点B是黑色的，且兄弟节点B的左节点BL是红色，右节点BR是黑色，那么就以B为轴进行右旋操作，然后互换B和BL的颜色。</h5><h5 id="如果N是黑色右节点：那么不管父亲节点什么颜色，如果兄弟节点B是黑色的，而且兄弟节点的右节点BR是红色，左节点BL是黑色，那么就以B为轴进行左旋操作，然后互换B和BR的颜色"><a href="#如果N是黑色右节点：那么不管父亲节点什么颜色，如果兄弟节点B是黑色的，而且兄弟节点的右节点BR是红色，左节点BL是黑色，那么就以B为轴进行左旋操作，然后互换B和BR的颜色" class="headerlink" title="如果N是黑色右节点：那么不管父亲节点什么颜色，如果兄弟节点B是黑色的，而且兄弟节点的右节点BR是红色，左节点BL是黑色，那么就以B为轴进行左旋操作，然后互换B和BR的颜色"></a>如果N是黑色右节点：那么不管父亲节点什么颜色，如果兄弟节点B是黑色的，而且兄弟节点的右节点BR是红色，左节点BL是黑色，那么就以B为轴进行左旋操作，然后互换B和BR的颜色</h5><p><img src="https://img-blog.csdnimg.cn/20200220212923188.gif" alt="在这里插入图片描述"><br>看看这个，接着上一个的，因为47那个点的黑色节点明显少了。所以以它为N，它作为父节点的右节点，然后它的兄弟节点是黑色，兄弟节点的右孩子是红色，左孩子是黑色，所以以23为中心进行左旋。至此Case6已经执行完毕。c x<br>这时候我们可以看到47这边还是少了，然后我们看看47的兄弟节点34是黑色的，34的左孩子是红色，不管34的右孩子啥颜色，也不管47的父节点什么颜色，现在满足的是Case4了，这时候应该以父节点42为轴进行右旋，并且将父节点颜色给兄弟节点34，然后父节点设置为黑色，将兄弟节点的左孩子变成黑色。结果如下<br><img src="https://img-blog.csdnimg.cn/20200220214240723.gif" alt="在这里插入图片描述"></p><h5 id="最终的树结构就是这样子了。"><a href="#最终的树结构就是这样子了。" class="headerlink" title="最终的树结构就是这样子了。"></a>最终的树结构就是这样子了。</h5><p><img src="https://img-blog.csdnimg.cn/20200220214259233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="这样，所有的删除情况就列举出来了，当然，我列举的有一部分其实可以归于一类，但是我还是分成了几种，大家可以去看官方的操作。下面总结一下删除"><a href="#这样，所有的删除情况就列举出来了，当然，我列举的有一部分其实可以归于一类，但是我还是分成了几种，大家可以去看官方的操作。下面总结一下删除" class="headerlink" title="这样，所有的删除情况就列举出来了，当然，我列举的有一部分其实可以归于一类，但是我还是分成了几种，大家可以去看官方的操作。下面总结一下删除"></a>这样，所有的删除情况就列举出来了，当然，我列举的有一部分其实可以归于一类，但是我还是分成了几种，大家可以去看官方的操作。下面总结一下删除</h4><p><img src="https://img-blog.csdnimg.cn/20200220220658745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码实现红黑树"><a href="#代码实现红黑树" class="headerlink" title="代码实现红黑树"></a>代码实现红黑树</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 红黑树 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给定一个序列，输出无重复，且按字典序的全排列——字典序算法</title>
      <link href="/2020/03/12/%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97%EF%BC%8C%E8%BE%93%E5%87%BA%E6%97%A0%E9%87%8D%E5%A4%8D%EF%BC%8C%E4%B8%94%E6%8C%89%E5%AD%97%E5%85%B8%E5%BA%8F%E7%9A%84%E5%85%A8%E6%8E%92%E5%88%97%E2%80%94%E2%80%94%E5%AD%97%E5%85%B8%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2020/03/12/%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97%EF%BC%8C%E8%BE%93%E5%87%BA%E6%97%A0%E9%87%8D%E5%A4%8D%EF%BC%8C%E4%B8%94%E6%8C%89%E5%AD%97%E5%85%B8%E5%BA%8F%E7%9A%84%E5%85%A8%E6%8E%92%E5%88%97%E2%80%94%E2%80%94%E5%AD%97%E5%85%B8%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p><strong>题目描述<br>输入一个字符串,按字典序打印出该字符串中字符的所有排列。<br>例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。<br>输入描述:<br>输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。</strong></p></blockquote><ul><li>重排序</li><li>从右到左找到正序对</li><li>从右到左找到第一个比正序对第一个元素大的元素</li><li>交换那两个元素</li><li>然后将正序对第一个元素后面的元素都从小到大排列<br>上面的过程就是找到一个正序对（i，j）<br>说明从j开始往后，一直都是递减的，也就是说i后面的数字排列已经到达最大的字典许排列了，需要找到以一个比i大的数字来代替它。<br>比如：<br>8947521<br>第一个正序对（4，7）<br>这时候说明7521已经到达了最大的排列了。<br>也可以说对于首位是4的数字来说，已经达到最大排列了<br>这时候需要找到第一个比4大的数，而且只能从最后开始找，因为对于9这个数字来说，4开头还不是最大排列，至少要到7开头吧。<br>这时候从右往左找到了5，交换4和5，说明4开头的已经排列完后要开始排列5了，那么现在是5开头，后面变成了7421，这时候还是能够保证从大到小的排列，然后需要将7421从小到达排列，即变成了8951247，这时候有继续上面的过程，找到正序对，交换，交换。比如（4，7），交换，交换就可以了。这样就可以将895开头的排列搞完了。<br><img src="https://img-blog.csdnimg.cn/20200327122230936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">L24</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">Permutation</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>           ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//字符串是空</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">==</span>null <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//将字符串重排序</span>           <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>aray<span class="token punctuation">)</span><span class="token punctuation">;</span>           String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>aray<span class="token punctuation">)</span><span class="token punctuation">;</span>           res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               s <span class="token operator">=</span> <span class="token function">nextString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"finish"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                   res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                   <span class="token keyword">else</span><span class="token punctuation">{</span>                       <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                          <span class="token punctuation">}</span>           <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">nextString</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lenght <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> lenght<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从右往左找到第一个正序对</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"finish"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从右往左找到第一个比i大的</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> lenght<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//交换i和j</span>        <span class="token keyword">char</span> tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将i后面的重排列，使其从小到大排列，重复上面的过程</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span>lenght<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">,</span>b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞了这么久基本JVM原理都不知道了</title>
      <link href="/2020/02/03/%E6%90%9E%E4%BA%86%E8%BF%99%E4%B9%88%E4%B9%85%E5%9F%BA%E6%9C%ACJVM%E5%8E%9F%E7%90%86%E9%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BA%86/"/>
      <url>/2020/02/03/%E6%90%9E%E4%BA%86%E8%BF%99%E4%B9%88%E4%B9%85%E5%9F%BA%E6%9C%ACJVM%E5%8E%9F%E7%90%86%E9%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h6 id="今天开始，连续三天，一定要复习完JVM。先来个JVM的直观感受。JVM是这样子的吗"><a href="#今天开始，连续三天，一定要复习完JVM。先来个JVM的直观感受。JVM是这样子的吗" class="headerlink" title="今天开始，连续三天，一定要复习完JVM。先来个JVM的直观感受。JVM是这样子的吗"></a>今天开始，连续三天，一定要复习完JVM。先来个JVM的直观感受。JVM是这样子的吗</h6><p><img src="https://img-blog.csdnimg.cn/20200302204919388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="JVM-ClassLoader-Runtime-Data-Area-Execution-Engine这三部分"><a href="#JVM-ClassLoader-Runtime-Data-Area-Execution-Engine这三部分" class="headerlink" title="JVM=ClassLoader + Runtime Data Area  +  Execution Engine这三部分"></a>JVM=ClassLoader + Runtime Data Area  +  Execution Engine这三部分</h6><ul><li><strong>ClassLoader主要用于类加载，就是将class文件加载到JVM里面，其涵盖的内容非常多</strong></li><li><strong>Runtime Data Area主要包括了PC，java栈，堆，本地方法栈和方法区，我们程序的执行的基本数据就是在这些地方</strong></li><li><strong>Execution Engine：执行引擎就是负责编译执行的，还有垃圾回收的一些方法</strong><h6 id="接下来就分几部分来复习复习吧。宝贝们！！！！！"><a href="#接下来就分几部分来复习复习吧。宝贝们！！！！！" class="headerlink" title="接下来就分几部分来复习复习吧。宝贝们！！！！！"></a>接下来就分几部分来复习复习吧。宝贝们！！！！！</h6></li></ul><p><a href="https://blog.csdn.net/weixin_43272605/article/details/104619422" target="_blank" rel="noopener">JVM：Garbage Collection</a><br><a href="https://blog.csdn.net/weixin_43272605/article/details/104619451" target="_blank" rel="noopener">JVM：类加载机制</a></p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> java </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合的接口到底干啥用</title>
      <link href="/2020/01/15/%E9%9B%86%E5%90%88%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%88%B0%E5%BA%95%E5%B9%B2%E5%95%A5%E7%94%A8/"/>
      <url>/2020/01/15/%E9%9B%86%E5%90%88%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%88%B0%E5%BA%95%E5%B9%B2%E5%95%A5%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>从今天开始，我要重新总结一遍java里面有关于集合的东西，便于自己复习，而且春招也在这里，非常可怕，我要认认真真学习了。疫情让我开不了学压哈哈哈。美哉美哉。</p><h4 id="先告诉自己，这篇文章没太多实用性，只要了解几个重点接口的关系就行了。"><a href="#先告诉自己，这篇文章没太多实用性，只要了解几个重点接口的关系就行了。" class="headerlink" title="先告诉自己，这篇文章没太多实用性，只要了解几个重点接口的关系就行了。"></a>先告诉自己，这篇文章没太多实用性，只要了解几个重点接口的关系就行了。</h4><p>好了，废话不多说了，先看一张图<br><img src="https://img-blog.csdnimg.cn/20200219171225598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是集合里面最常见的一张图，各种类和接口都在上面。可以看到，最顶层的是Iterator，接着是Collection和ListIterator。那么ListIterator我们不说，暂且先看看另外两个，扒光他们看看😄😄😄😄😄😄😄😄👨👨👨👨👨<br>GOGOGOGO～～～～</p><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>迭代器作用于集合，是用来遍历集合元素的对象。迭代器不是Java独有的，大部分高级语言都提供了迭代器来遍历集合。实际上，迭代器是一种设计模式：</p><blockquote><p><strong>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</strong></p></blockquote><p>迭代器封装了对集合的遍历，使得不用了解集合的内部细节，就可以使用同样的方式遍历不同的集合。</p><p>什么都不说，就只看源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 这个方法一般是在next方法之前使用，来判断迭代器还有没有元素     *      */</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *返回下一个元素     *如果已经没有元素了就会@throws NoSuchElementException      */</span>    E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 移除上一次调用next方法返回一个元素，也就是说他和next方法紧密相连，如果没有在之前调用next，就会出错     */</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"remove"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *      * 这个方法是JDK1.8才有的，这个可以调用然后传入一个lambda表达式，它相当于不用写循环就可以遍历，然后根据lambda的逻辑操作     *      */</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="foreachRemaining方法使用"><a href="#foreachRemaining方法使用" class="headerlink" title="foreachRemaining方法使用"></a>foreachRemaining方法使用</h5><p>当然，每个集合实现可能不同，到时候总结看看。<br><img src="https://img-blog.csdnimg.cn/20200219173312475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="插一段小话"><a href="#插一段小话" class="headerlink" title="插一段小话"></a>插一段小话</h2><p>看看这个<br><img src="https://img-blog.csdnimg.cn/20200219173938195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最上面的图，好像是Collection和Iterator有关系，而现在怎么又和Iterable有关系了。看看源码就知道怎么回事了。走，看看Iterable</p><h2 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *实现接口这个方法，可以返回迭代器，所以这里看清楚了，Iterable有个方法返回Iterator需要我们去实现的。     */</span>    Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这个是jdk1.8的一个语法糖的东西，这个方法在编译阶段会以迭代器去遍历元素，但是我们仍然可以使用foreach去使用     *     *其实和这种形式是一样的效果，他的默认实现就是这样。     *     for (T t : this)     *         action.accept(t);     *         }       */</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *      */</span>    <span class="token keyword">default</span> Spliterator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Spliterators<span class="token punctuation">.</span><span class="token function">spliteratorUnknownSize</span><span class="token punctuation">(</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码我们可以看见Iterable的iterator方法返回的是Iterator。这样关系就清楚了吧<br>那么我们再仔细看看Collection接口</p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h5 id="哇，原来是Collection接口又继承了Iterable接口，那么理应实现了Collection接口的话，就要实现iterator方法，这样就可以得到一个迭代器Iterator了。但是这个Iterator的方法没有实现怎么吧。不急，以后会看到的，今天只管Collection接口"><a href="#哇，原来是Collection接口又继承了Iterable接口，那么理应实现了Collection接口的话，就要实现iterator方法，这样就可以得到一个迭代器Iterator了。但是这个Iterator的方法没有实现怎么吧。不急，以后会看到的，今天只管Collection接口" class="headerlink" title="哇，原来是Collection接口又继承了Iterable接口，那么理应实现了Collection接口的话，就要实现iterator方法，这样就可以得到一个迭代器Iterator了。但是这个Iterator的方法没有实现怎么吧。不急，以后会看到的，今天只管Collection接口"></a>哇，原来是Collection接口又继承了Iterable接口，那么理应实现了Collection接口的话，就要实现iterator方法，这样就可以得到一个迭代器Iterator了。但是这个Iterator的方法没有实现怎么吧。不急，以后会看到的，今天只管Collection接口</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**     * 返回集合的大小     */</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">removeIf</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> removed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> each <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                each<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                removed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> removed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Comparison and hashing</span>  <span class="token comment" spellcheck="true">//hashcode和equals方法要重点注意</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">default</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Spliterators<span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> Stream<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> Stream<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>源代码没有多少行，目的在于搞清楚三者关系，下面慢慢深入其他的接口和抽象类和实现类。</p><p>但是呢，其实以后会看到，在其他的链表和树还有Set这些都可能用到Map的实现<br>那Map接口又是啥呢</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>我们都知道Map是一种键值对的形式存在的，比如Redis，MongoDB，JSON都运用了其中的原理，那我们先来看看java里面的Map接口到底有什么东西，可以实现的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>BiConsumer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>BiFunction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 一个Map对象不能有多个相同key，一个key最多对应一个valuepublic interface Map&lt;K,V> {   //返回Map的个数    int size();    boolean isEmpty();    boolean containsKey(Object key);    boolean containsValue(Object value);       V get(Object key);    V put(K key, V value);      V remove(Object key);       void putAll(Map&lt;? extends K, ? extends V> m);       void clear();    //这里居然还用到了集合里面的东西    Set&lt;K> keySet();    Collection&lt;V> values();    Set&lt;Map.Entry&lt;K, V>> entrySet();    /**     * 一个Map对象的实际数据结构     */</span>    <span class="token keyword">interface</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        K <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           V <span class="token function">setValue</span><span class="token punctuation">(</span>V value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/************************************************************/</span>    <span class="token comment" spellcheck="true">//下面是比较器，以后重点介绍，这一系列文章只复习集合主要结构，比较器用于排序。</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span><span class="token punctuation">,</span> V<span class="token operator">></span> Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> <span class="token function">comparingByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> <span class="token operator">&amp;</span> Serializable<span class="token punctuation">)</span>                <span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> c1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token operator">>></span> Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> <span class="token function">comparingByValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> <span class="token operator">&amp;</span> Serializable<span class="token punctuation">)</span>                <span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> c1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> <span class="token function">comparingByKey</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> cmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> <span class="token operator">&amp;</span> Serializable<span class="token punctuation">)</span>                <span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> cmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> <span class="token function">comparingByValue</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token operator">></span> cmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> <span class="token operator">&amp;</span> Serializable<span class="token punctuation">)</span>                <span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> cmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果存在就获取，如果没有就又一个默认值</span>    <span class="token keyword">default</span> V <span class="token function">getOrDefault</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> V defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        V v<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">?</span> v            <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>BiConsumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> entry <span class="token operator">:</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            K k<span class="token punctuation">;</span>            V v<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                k <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                v <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IllegalStateException ise<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// this usually means the entry is no longer in the map.</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span>ise<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> entry <span class="token operator">:</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            K k<span class="token punctuation">;</span>            V v<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                k <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                v <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IllegalStateException ise<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// this usually means the entry is no longer in the map.</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span>ise<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// ise thrown from function is not a cme.</span>            v <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IllegalStateException ise<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// this usually means the entry is no longer in the map.</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span>ise<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> V <span class="token function">putIfAbsent</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        V v <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            v <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object curValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>curValue<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>curValue <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">replace</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V oldValue<span class="token punctuation">,</span> V newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object curValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>curValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>curValue <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> V <span class="token function">replace</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        V curValue<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curValue <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> curValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> V <span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span>            Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> mappingFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mappingFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>        V v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            V newValue<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newValue <span class="token operator">=</span> mappingFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> V <span class="token function">computeIfPresent</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span>            BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> remappingFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>remappingFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>        V oldValue<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            V newValue <span class="token operator">=</span> remappingFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> V <span class="token function">compute</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span>            BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> remappingFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>remappingFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>        V oldValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        V newValue <span class="token operator">=</span> remappingFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// delete mapping</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// something to remove</span>                <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// nothing to do. Leave things as they were.</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// add or replace old mapping</span>            <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> V <span class="token function">merge</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span>            BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> remappingFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>remappingFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        V oldValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        V newValue <span class="token operator">=</span> <span class="token punctuation">(</span>oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> value <span class="token operator">:</span>                   remappingFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newValue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在BigTable之后入门HBase（一）</title>
      <link href="/2020/01/02/%E5%9C%A8BigTable%E4%B9%8B%E5%90%8E%E5%85%A5%E9%97%A8HBase%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/01/02/%E5%9C%A8BigTable%E4%B9%8B%E5%90%8E%E5%85%A5%E9%97%A8HBase%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>  最近刚开学，忙于各种琐事，学习的时间比较少，前几天对于Google的一篇论文BigTable学了学，不得不说关于MIT实验室所做的东西都是相当的有难度，几乎花了一整天的时间，才勉强弄懂了BigTable，但是具体的编程实现可能还需要一段时间，包括MIT专用的Go语言，以及我们自己现在开发用的java和scala语言，最近任务还是挺重的。其实写这篇博客除了为了自己以后复习之外，还有就是我在网上查阅相关的BigTable相关文档时，全是一些Google论文的翻译而已，并没有多少好处，而且还有很多错误，搞了几个月的分布式了，其实最好的学习方法还是看官方的论文以及去官方的网站进行查阅，毕竟翻译过来的东西总是会有些文化差异，翻译永远只能是搭配着看看。<br>    这篇博客主要分为两个部分，一个是对Google论文BigTable的简单理解，另一部分就是对于BigTable的类似实现版本HBase的一些理解与应用。<br>    ## ***</p><h2 id="BigTable"><a href="#BigTable" class="headerlink" title="BigTable"></a>BigTable</h2><hr><p>  对于Google的经典论文之一，它出现的时间和实现以及技术上的成功真的不是哪一个山寨的东西可以恭维的。简单来说他就是一个结构化的分布式存储系统。提到分布式，可知道几个基本特性了，高可用，一致性，高性能，可扩展，可伸缩，等等，一些CAP理论的东西都可以多多少少掺杂进来，但是，如果真的要完美实现这些，根本不可能，所以一般也只能折中的实现。这个东西类里面有些和关系型数据库差不多的术语，但是呢，内部的实现有完全不同，在他们的性能测试中，完全不比一般的数据库系统要差。现在我们就来仔细的了解了解它。</p><p><strong>数据模型—数据结构</strong><br><img src="https://img-blog.csdnimg.cn/20190306204435531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>看上面这个图片，我们先来理清几个概念。<br><strong>row</strong>：中文意思就是行呗，图片中也可以看出来，官方称作RowKey<br><strong>ColumnKey</strong>：可以看成列，其中有个术语column family叫做列簇。<br><strong>timestamp</strong>：时间戳。代表每一个cell（数据项）的版本，这个时间戳可以是电脑当前时间，也可以是自己所设定的序列号，反正就是用于区分根据row和column确定的value的不同版本。在HBase里面可以设定最多的版本数量，BigTable也可以，多余的那些最旧的版本就可以被回收掉。<br>有了上面的概念，我们就可以好好来分析了。<br>我们可以根据上面三个东西确定唯一的一个值，就像是map-value一样，不过这个map有点特殊而已：（row:rk01,column:cf1,timestamp:20190306）=&gt;(value:……)，形成这样的映射关系，我们可以想象成一个立体图，就是一个三维空间一样。<br>我们需要注意的是row是根据词典顺序排序的，我们根据图片可以看出网站的域名都是按顺序排列，然后作为RowKey每一行又有不同的column，（column：contents，language等等），再又根据时间戳确定value:t5，t6等等,每一个value是一个不间断的字节数组。<br>Tablet：可以说就是一个小数据块，或者说是小数据表，就说若干Row组成的Tablet</p></blockquote><p><strong>数据块</strong><br><img src="https://img-blog.csdnimg.cn/20190306211214886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>什么是数据块？<br>其实就是一些存放上面数据模型的一些数据槽：block<br>我们不用管它是什么，可以想象成存放数据的卡槽，每一个是64KB。<br>可是分布式的东西，又是庞大的数据集，这些东西存放在哪里呢？<br>这时候GFS就有用处了。<br>Google File System<br>我在画图里里面画了一张图片，可以很好的形容在GFS里面怎么存储这些数据的。<br>首先我们来看METADATA Tablets这个东西分成两种，一种是root tablet 还有一种是普通tablet<br><strong>METADATA Tablets</strong>：<br>root tablet：它是一个根tablet，它知道有哪些普通tablet<br>普通tablet：他保存了有哪些user tablet，即tablet1,2等等<br>这样的设计是一个B+的树形数据结构，为的是能够快速找到所需要的tablet以及相关的信息。<br><img src="https://img-blog.csdnimg.cn/20190306212308713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个图片我画的不是很完整，但是呢我们可以大概了解到在GFS里面这些Tablet是怎么找到的。<br>首先有一个服务器，在Bigtable‘里面’是chubby，在HBase里面是Zookeeper，它了解到哪里是rootTablet，然后根据客户端发来的想要查找的信息找到对应的普通的METADATA tablets 然后在找到具体的tablet，这样就需要三次的网络通信，还有一种比较复杂的情况就是，查找的数据丢失或者错误，还是没有找到，就会返回上一级查找，如果一样没找到就继续返回上一级，如此一来就需要有最多六次的网络通信，当然这是最坏的情况。<br>服务器可是一个大组件，可不要小看它的功能，在分布式里面他的协调作用可是很大的，不仅这样，他还可能减少整个网络和集群的负担。</p></blockquote><p><strong>组件</strong></p><blockquote><p>BigTable里面有几大组件：Chubby（服务器） Maseter（HBase里面是HMaster） tablet server，链接客户端的库。<br><strong>Chubby</strong>：这是一个协调整个集群的服务器。里面可以有一个derectory，里面包含了某些file，每个file有一个lock，当有一个tablet server注册进来时，就会创建一个file，并且这个tablet server能够获取到这个file的锁，暗示着这个集群有了这个tablet server，一般master也会通过这个文件锁来detect某个tablet server是否存在或者是否停机，故障，同时只要经过master和tablet server进行通信后，就可以直接和tablet server进行联系。这个服务器的功能：<br>                1：保证只有一个服务器能够运行，其实Chubby有几个副本，他们会通过某种算法来选择这个主要的服务器（可以去看看PAXOS算法）。<br>                2：保存那个Root tablet的位置信息，以便访问存储信息。<br>·            3：负责tablet server的生命周期调控<br>                4：存储访问控制的列表<br>                5：存储表格信息<br>    这几个可以在官方文档里面找到，我也不具体说，在以往的分布式系统，前三个功能减轻了master的负担，这样替master分担一部分。<br>    <strong>master：</strong> 先说一说它的功能：<br>              1：分配tablet给tablet server管理<br>              2：检测tablet server的状态<br>              3：平衡tablet server的负载<br>              4：垃圾回收GFS，比如已经过期的tablet，或者是一些混杂的tablet<br>              5：处理一些tabelt更改信息，比如创建，删除<br>              这个是一个主要的server，这个东西一出来，就要检测当前所有tablet和tablet server的状态，看所有的tablet是否对应到了归一个tablet server管理比如一个master出了故障，该怎么恢复。对于当前没有分配的tabelt，会分配给对应的当前存活的tablet server。刚才也说过了，master可以通过服务器的derectory中tablet的文件锁观察某个tabletserver是否存过。<br>              <strong>tablet server：</strong><br>              1：管理自己对应的tablet<br>              2：处理对应的读写操作<br>              3：当tablet到达一定的大小时候，分割他们<br>              总体来说，就是处理自己所管理的tablet信息，它本来就是这样。<br>              <strong>链接客户端的库：</strong> 这个建立在tablet server和master上，进行一些通信等等。这个不详细说了，我也不知道里面有些什么东东。</p></blockquote><p><strong>master启动</strong></p><blockquote><p>关于master启动，可能是因为原来的master没用了，这样就导致必须使用新的master，但是新的master进来之后怎么搞呢，<br><strong>首先我们可以想象成注册到Chubby服务器的一个锁，或者说是抢占Chubby服务器中唯一的master资源，避免其它的master做无用的竞争。<br>然后就是扫描那个Chubby中tablet server注册的文件锁，来获取当前存活的tablet server的状态。 然后和tablet<br>server进行通信，来找到哪些tablet对应哪些tablet server 如果GFS里面那个root<br>tablet没有被注册到，那么就会重新选一个root tablet。 最后就是通过root tablet扫描METADATA<br>tablet，进而扫描所有的tablet，就知道哪些tablet没有分配tablet server了，前面的选择root<br>tablet就为整个操作奠定了基础。</strong></p></blockquote><p><strong>读写操作</strong><br><img src="https://img-blog.csdnimg.cn/20190307164036236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>先看1,2，就是一个写操作过来了，这个tablet<br>server根据来得写操作，先检查他的格式是否符合规范，并且检查发送者是否有操作他的权限。<br>3就是把这个操作加入这个日志，等下再分析这个日志有什么用。 4:就是把具体的操作执行，并把写的文件加入memtable<br>需要注意的是看清这个图，memtable是在tablet server的内存中，而Commit log和SST file是在GFS中。<br>一旦一个memtable满了，就会形成一个新的SST（SS table），写入到GFS，并且清理原来的memtable。这个叫做minor compaction。<br>当然当SST越来越多了，也会合成一个大的SST，这个过程叫做Merging compaction<br>还有就是合成所有的SST 叫做Major compaction<br><img src="https://img-blog.csdnimg.cn/20190307164801357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当一个读操作过来了，同样也是检查这个请求格式是否是对的，检查请求者是否有权限。然后这个读操作就是从memtable和SST中读过来</p></blockquote><p>这个是基本的读写操作。以及穿插了一部分merging操作。和split操作</p><p>也是有人会问，这么多东西，那个Commit log到底有什么用处，他不过就是充当一下恢复tablet时，执行这个log可以恢复到原来的状态。<br><strong>缓存</strong><br><img src="https://img-blog.csdnimg.cn/20190307170452634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>在tablet server索引某个key-value时，会有个scan Cache，记录近段时间所索引的key-value，当在block index查找这个key-value时是在哪个block，又有个block Cache，记录是否索引过block。这样就加大了读取过着写操作速度。</p></blockquote><p>好了，我对于基本的BigTable理解就差不多这样了，通过这几个图就可以好好理解一下了。下面我们来看看HBase了。</p><p>**</p><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><p>**<br>一：HBase安装配置<br>这个不用多说，跟着官网文档来，当然我是在LInux环境下的安装配置<br>进入HBase官方网站<a href="http://hbase.apache.org/，在Download选择click" target="_blank" rel="noopener">http://hbase.apache.org/，在Download选择click</a> here，下载对应的bin包。<br><img src="https://img-blog.csdnimg.cn/20190307172607430.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190307172724388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后进入终端，解压你下载的包。<br><img src="https://img-blog.csdnimg.cn/20190307172939760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看到conf文件里面有两个配置文件，hbase-env.sh和hbase-site.xml<br><img src="https://img-blog.csdnimg.cn/20190307173537284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按照官方文档里面的方法，有单机模式，伪分布式模式，还有完全分布式，具体配置会额外的写一篇博客进行商量。</p><p>HBase也不过是一个分布式的存储系统而已，具体原理和BigTable差不多<br>先介绍到这里，后面我们再细说HBase的shell以及一些java API。</p>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> HBase </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/30/hello-world/"/>
      <url>/2019/11/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合之家——ArrayList（源码分析）</title>
      <link href="/2019/09/27/%E9%9B%86%E5%90%88%E4%B9%8B%E5%AE%B6%E2%80%94%E2%80%94ArrayList%EF%BC%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%89/"/>
      <url>/2019/09/27/%E9%9B%86%E5%90%88%E4%B9%8B%E5%AE%B6%E2%80%94%E2%80%94ArrayList%EF%BC%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这几天面试突然遇到几个ArrayList的问题，有几个还真是搞不出来，觉得自己之前还不够深入吧，于是就自己重新学了一遍集合，并从底层进行了源码分析。这里就先直接从源码开始了。</p><hr><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><hr><blockquote><p>public class ArrayList<E> extends AbstractList<E><br>        implements List<E>, RandomAccess, Cloneable, java.io.Serializable { 我们先看它的类声明：     继承了AbstractList     实现了List<E><br>    RandomAccess     Cloneable     java.io.Serializable接口</p><p>怎么说呢，后面三个分别是实现RandomAccess，Cloneable接口（源码里面没有具体的其他东西，估计就是摆给我们看，没有太大用处，不做重点分析，就是提供随机访问，克隆而已，具体的实现还是要看具体代码），还有序列化接口，也不做重点分析，我写了其他的序列化文章了。<br>我们重点先看看父类AbstractList和List接口<br><strong><em>AbstractList=&gt;List=&gt;ArrayList</em></strong></p></blockquote><p><strong><em>AbstractList父类</em></strong></p><blockquote><p>AbstractList是一个抽象类<br>public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E><br>由此可知，它又继承了AbstractCollection，更深一层就是顶层集合Collection，并实现List接口<br> public boolean add(E e) {<br>        add(size(), e);<br>        return true;<br>    }</p><pre><code>abstract public E get(int index);   //根据索引获取泛型Epublic E set(int index, E element) //修改元素public void add(int index, E element)//添加元素public E remove(int index) //移除元素public int indexOf(Object o) //根据对象获取索引public int lastIndexOf(Object o)     public void clear()//清空public boolean addAll//添加所有的</code></pre><p>   上面这些一般都是自己可以实现的，但是我们看源码其他实现的几个东西。</p><pre><code>public Iterator&lt;E&gt; iterator() {    return new Itr();}这个·方法马上就new了一个内部类Itr，就是下面这个 private class Itr implements Iterator&lt;E&gt;这个类无非就是一些迭代器Iterator的实现而已。</code></pre><p>   public ListIterator<E> listIterator() {<br>        return listIterator(0);<br>    }<br>    public ListIterator<E> listIterator(final int index) {<br>        rangeCheckForAdd(index);<br>        return new ListItr(index);<br>    }<br>    private class ListItr extends Itr implements ListIterator<E>//这也是一个内部类，里面方法没有摘抄过来，大家可以自己去看，<br>     <strong>protected transient int modCount = 0;**</strong>这是一个超级超级重要的变量，它是判断当前更改是否合理的判断标准，它记录的是修改次数，来判断是否线程安全**<br>   public List<E> subList(int fromIndex, int toIndex) {<br>        return (this instanceof RandomAccess ?<br>                new RandomAccessSubList&lt;&gt;(this, fromIndex, toIndex) :<br>                new SubList&lt;&gt;(this, fromIndex, toIndex));<br>    }<br>   这个东西有嗲意思了，它返回的是一个List，并且有两种可能的返回结果，一种是RandomAccessSubList还有一种是SubList，这两个也是它的内部类<br>SubList我也只弄了几个常用的：他表示要截取的父list视图<br>class SubList<E> extends AbstractList<E> {<br>    private final AbstractList<E> l;<br>    private final int offset;<br>    private int size;<br>    SubList(AbstractList<E> list, int fromIndex, int toIndex) {<br>        if (fromIndex &lt; 0)<br>            throw new IndexOutOfBoundsException(“fromIndex = “ + fromIndex);<br>        if (toIndex &gt; list.size())<br>            throw new IndexOutOfBoundsException(“toIndex = “ + toIndex);<br>        if (fromIndex &gt; toIndex)<br>            throw new IllegalArgumentException(“fromIndex(“ + fromIndex +<br>                                               “) &gt; toIndex(“ + toIndex + “)”);<br>        l = list;//接构造方法的AbstractList对象，赋给自己的对象变量<br>        offset = fromIndex;//偏移就是list的某一个索引位置<br>        size = toIndex - fromIndex;//toindex就是末端索引<br>        this.modCount = l.modCount;<br>    }<br>    public E set(int index, E element) //就是调用l的set方法，下面的一样<br>    public E get(int index)<br>    public int size()<br>    public void add(int index, E element)<br>    public E remove(int index)<br>    protected void removeRange(int fromIndex, int toIndex)<br>    public boolean addAll(Collection&lt;? extends E&gt; c)<br>    public boolean addAll(int index, Collection&lt;? extends E&gt; c)<br>    public Iterator<E> iterator() {<br>        return listIterator();<br>    }<br>    public ListIterator<E> listIterator(final int index) {<br>        checkForComodification();<br>        rangeCheckForAdd(index);<br>        return new ListIterator<E>() {<br>            private final ListIterator<E> i = l.listIterator(index+offset);<br>            public boolean hasNext() {<br>                return nextIndex() &lt; size;<br>            }<br>            public E next() {<br>                if (hasNext())<br>                    return i.next();<br>                else<br>                    throw new NoSuchElementException();<br>            }<br>            public boolean hasPrevious() {<br>                return previousIndex() &gt;= 0;<br>            }<br>            public E previous() {<br>                if (hasPrevious())<br>                    return i.previous();<br>                else<br>                    throw new NoSuchElementException();<br>            }<br>            public int nextIndex() {<br>                return i.nextIndex() - offset;<br>            }<br>            public int previousIndex() {<br>                return i.previousIndex() - offset;<br>            }<br>            public void remove() {<br>                i.remove();<br>                SubList.this.modCount = l.modCount;<br>                size–;<br>            }<br>            public void set(E e) {<br>                i.set(e);<br>            }<br>            public void add(E e) {<br>                i.add(e);<br>                SubList.this.modCount = l.modCount;<br>                size++;<br>            }<br>        };<br>    }<br>    public List<E> subList(int fromIndex, int toIndex) {<br>        return new SubList&lt;&gt;(this, fromIndex, toIndex);<br>    }<br>    private void rangeCheck(int index)<br>    private void rangeCheckForAdd(int index)<br>    private String outOfBoundsMsg(int index)<br>    private void checkForComodification() {//这个方法非常重要，这个涉及到后面将要讲的failfast机制，和多线程访问安不安全的问题，他其实就是根据当前的modCount和父list的modCount是不是相同的（就是修改次数是不是相同的），来判断这个Sublist类在操作是有没有受其他线程干扰。<br>        if (this.modCount != l.modCount)<br>            throw new ConcurrentModificationException();<br>    }<br>}<br>这个SubList方法其实返回的就是父List的一个子引用，也就是说，这个sublist方法得到的子引用做的任何修改，都会影响到原来的父List，也就是说他只是一个视图而已，这里特别要注意。<br>class RandomAccessSubList<E> extends SubList<E> implements RandomAccess {<br>    RandomAccessSubList(AbstractList<E> list, int fromIndex, int toIndex) {<br>        super(list, fromIndex, toIndex);<br>    }<br>    public List<E> subList(int fromIndex, int toIndex) {<br>        return new RandomAccessSubList&lt;&gt;(this, fromIndex, toIndex);<br>    }<br>}<br>这个和上面的sublist是同样的道理了<br>基本AbstractList到这里就差不多了</p></blockquote><p><strong><em>List接口</em></strong></p><blockquote><p>这个类没有多大看头，在集合中主要有几个东西实现它，一个是ArrayList，一个是Linklist还有就是Vector。</p></blockquote><h2 id="回到ArrayList"><a href="#回到ArrayList" class="headerlink" title="* # *回到ArrayList **"></a><em>* # *回到ArrayList</em> **</h2><blockquote><p>现在我们来正式看看ArrayList的源码<br>ArrayList其实就是一个动态数组，与传统不同的就是，它可以动态扩容。<br> private static final int DEFAULT_CAPACITY = 10;这个是ArrayList默认的容量<br>  private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};默认构造方法为空对的数组<br>   private static final Object[] EMPTY_ELEMENTDATA = {};初始化大小为0的数组<br> transient Object[] elementData; //这个元素的数据，当然底层实现还是数组，等会儿会知道怎么实现扩容了。<br> private int size;目前ArrrayList的大小<br>     <strong><em>第一个构造方法</em></strong>：初始化了想要的数组容量<br> public ArrayList(int initialCapacity) {<br>        if (initialCapacity &gt; 0) {<br>            this.elementData = new Object[initialCapacity];<br>        } else if (initialCapacity == 0) {<br>            this.elementData = EMPTY_ELEMENTDATA;<br>        } else {<br>            throw new IllegalArgumentException(“Illegal Capacity: “+                                             initialCapacity);<br>        }<br>    }<br>    <strong><em>默认构造方法</em></strong>：直接赋值<br>    public ArrayList() {<br>        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>    }<br>    <strong><em>集合构造方法</em></strong>：传递一个集合，利用集合转换成对象数组<br>     public ArrayList(Collection<? extends E> c) {        elementData = c.toArray();        if ((size = elementData.length) != 0) {            // c.toArray might (incorrectly) not return Object[]             if (elementData.getClass() != Object[].class)                elementData = Arrays.copyOf(elementData, size, Object[].class);        } else {            // replace with empty array.            this.elementData = EMPTY_ELEMENTDATA;        }    }    **ensureCapacity方法是计算当前最小的容量大小；**      public void ensureCapacity(int minCapacity) {        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA            ? 0            : DEFAULT_CAPACITY;        if (minCapacity > minExpand) {            ensureExplicitCapacity(minCapacity);**//转到ensureExplicitCapacity方法**        }    }     private void ensureExplicitCapacity(int minCapacity) {        modCount++;**//修改计数器+1，准备扩容**        if (minCapacity - elementData.length > 0)            grow(minCapacity);**//如果当前的容量小于当前所需容量，转到grow进行扩容**    }    **//真正的扩容方法**        private void grow(int minCapacity) {        int oldCapacity = elementData.length;**//先记录原来的容量大小**        int newCapacity = oldCapacity + (oldCapacity >> 1);**//相当于扩容2倍，在加上自己原来的容量**        if (newCapacity - minCapacity < 0)            newCapacity = minCapacity;        if (newCapacity - MAX_ARRAY_SIZE > 0)            newCapacity = hugeCapacity(minCapacity);        elementData = Arrays.copyOf(elementData, newCapacity);//**ArrayList的数组扩容，Arrays.copyOf方法底层调用的是系统的System.copy方法，所以特别注意尽量避免进行扩容，以免消耗性能**    }      public int size()       public boolean isEmpty()       public boolean contains(Object o)       public int indexOf(Object o)       public int lastIndexOf(Object o)       public Object clone()            public Object[] toArray()       public <T> T[] toArray(T[] a)       E elementData(int index)       public E get(int index)       public E set(int index, E element)         public boolean add(E e) {**//照道理应该添加操作要进行modCount+1**        ensureCapacityInternal(size + 1);  **// modCount在看是否要扩容的时候+1了**        elementData[size++] = e;        return true;    }    public void add(int index, E element)//在第index插入数据    public E remove(int index) {//删除元素也是一个重要的东西        rangeCheck(index);//检查index是否越界        modCount++;//修改次数+1        E oldValue = elementData(index);//oldValue        int numMoved = size - index - 1;        if (numMoved > 0)            System.arraycopy(elementData, index+1, elementData, index,                             numMoved);**//其实就是将删除的那个元素后面的元素向前移动，这个操作消耗也是非常大的。***        elementData[--size] = null; // clear to let GC do its work        return oldValue;    }**//这是移除按照索引移除**    public boolean remove(Object o){**//这个就是按照对象移除，最终都找到fastremove**        if (o == null) {            for (int index = 0; index < size; index++)                if (elementData[index] == null) {                    fastRemove(index);                    return true;                }        } else {            for (int index = 0; index < size; index++)                if (o.equals(elementData[index])) {                    fastRemove(index);                    return true;                }        }        return false;    }    private void fastRemove(int index) {**//fastremove，由对象移除而来**        modCount++;**修改次数+1**        int numMoved = size - index - 1;        if (numMoved > 0)            System.arraycopy(elementData, index+1, elementData, index,                             numMoved);****这里要特别注意特别注意的：*如果要求删除一个数字里面某一个东西，比如删除“a”,"b","b"中的b，如果直接从前往后遍历删除，那么当遍历到第一个b时，删除第一个b，那么后面的元素往前移动，第二个b就移到了第一个b的位置，而下一次循环就到了最后一个位置，但是最后一个位置已经被置为空，且原本的第二个b也到了前面，就删除不了了，所以注意的就是一定要从后往前遍历，或者用其他方法。****        elementData[--size] = null; **// clear to let GC do its work由GC回收**    }    protected void removeRange(int fromIndex, int toIndex)     public void clear()    public boolean addAll(Collection<? extends E> c)    public boolean addAll(int index, Collection<? extends E> c)private void rangeCheck(int index)private void rangeCheckForAdd(int index)private String outOfBoundsMsg(int index)public boolean removeAll(Collection<?> c)<br>public boolean retainAll(Collection<?> c) **//保存包含指定的集合的元素，调用batchRemove实现**private boolean batchRemove(Collection<?> c, boolean complement)<br>private void writeObject(java.io.ObjectOutputStream s)<br>private void writeObject(java.io.ObjectOutputStream s)序列化过程<br>private void readObject(java.io.ObjectInputStream s）反序列化<br>public ListIterator<E> listIterator(int index) {//剩下的就是一些迭代器了，就和其父类差不多。我就不一一列举了<br>        if (index &lt; 0 || index &gt; size)<br>            throw new IndexOutOfBoundsException(“Index: “+index);<br>        return new ListItr(index);<br>  }</p></blockquote><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>  上面列出了一些主要的类，方法，和变量，其中很重要的，有点坑对的我就做了详细的分析。其他的我就没有具体说了。<br>  通过上面的源码我们知道，Arraylist是<strong>线程不安全</strong>的。 当一个线程修改，一个线程访问时候，它的modCount可能会发生不一致，导致错误。ArrayList是<strong>有索引顺序的，且里面的元素可以重复</strong>   。<br>  而且ArrayList无非就是一个<strong>动态扩容的动态数组</strong>，其实原理和数组一模一样罢了。<br>  优势就是能够随机索引，实现扩容，但是呢插入和删除的消耗还是挺大的，一般适合随时查询的数列吧。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 源码 </tag>
            
            <tag> 集合 </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初步理解java的内存区域</title>
      <link href="/2019/07/15/%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3java%E7%9A%84%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
      <url>/2019/07/15/%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3java%E7%9A%84%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java与c++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想进去，墙里面的人却想出来。 —-《深入理解java虚拟机》</p></blockquote><h4 id="在java里面，不需要为每一个new操作还去使用delete-free操作，不那么容易出现内存泄漏和溢出的问题，这是因为java程序是由java虚拟机在执行，这些内存管理机制也是控制了内存，但是如果不了解这种机制，排错的工作是很艰难的。"><a href="#在java里面，不需要为每一个new操作还去使用delete-free操作，不那么容易出现内存泄漏和溢出的问题，这是因为java程序是由java虚拟机在执行，这些内存管理机制也是控制了内存，但是如果不了解这种机制，排错的工作是很艰难的。" class="headerlink" title="在java里面，不需要为每一个new操作还去使用delete/free操作，不那么容易出现内存泄漏和溢出的问题，这是因为java程序是由java虚拟机在执行，这些内存管理机制也是控制了内存，但是如果不了解这种机制，排错的工作是很艰难的。"></a>在java里面，不需要为每一个new操作还去使用delete/free操作，不那么容易出现内存泄漏和溢出的问题，这是因为java程序是由java虚拟机在执行，这些内存管理机制也是控制了内存，但是如果不了解这种机制，排错的工作是很艰难的。</h4><hr><h1 id="一：运行时的数据区域"><a href="#一：运行时的数据区域" class="headerlink" title="一：运行时的数据区域"></a>一：运行时的数据区域</h1><hr><p><img src="https://img-blog.csdnimg.cn/2019080212040860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>我们首先看看这张图片，相信很多人都很熟悉，但是里面的原理不见得都很理解，虽说一般的开发并不需要我们了解这些东西，但是我个人觉得了解这一些基础而又高深的机制是有必要的，毕竟java以后不知道怎么变，但是这些本质性的东西还是多了解了解，像我一样入个门也行。下面我来一一介绍这些东西。</p></blockquote><h4 id="（1）：程序计数器"><a href="#（1）：程序计数器" class="headerlink" title="（1）：程序计数器"></a>（1）：程序计数器</h4><blockquote><p>这个比较好理解，就把它当做一种计数器就行，但是专业术语把它看做当前线程所执行的字节码的行号指示器，在java虚拟机里面，字节码解释器就是通过改变这个计数器的值来选取吓一跳需要执行的字节码指令，各种基础功能都需要它来完成。它是一块较小的内存空间<br>之前讲过线程，一个处理器会为线程分配一定的时间片，一旦线程创建了，就相应的创建了一个特有的程序计数器，从专业术语来讲，所谓的“当前线程所执行的字节码行号指示器”，可以理解成记录线程的执行位置，这个通俗点讲，当你在写论文时，如果你对象突然叫你出去吃饭，当你回来时，你是不是还得接着原来的地方写，当然人是自己的意识知道自己写到哪，但是虚拟机不知道呀，比如线程A在执行，时间片到了，轮到线程B，当系统再分配给线程A时间片时，是不是就需要知道这个线程执行到了哪里了，这时候，虚拟机就会读取程序计数器，通过计数器的值来找到当前线程的字节码，进而执行线程A。这就是程序计数器的作用。<br><strong>特点：</strong><br>1：因为每个线程独有一个程序计数器，所以是线程安全的<br>2：这是线程私有的内存<br>3：如果线程执行的是一个java方法，这个计数器记录的就是正在执行的虚拟机字节码指令地址。<br>4：如果正在执行的是一个Native方法，计数器的值为空，因为调用Native（本地）方法时，调用的是本地的C/C++库，相当于这些库暴露给了java，但是不是java去实现，所以不能产生相应的字节码，自然的程序计数器也无法找到相应的字节码行号，所以为空。<br>5：程序计数器是一个极小的内存空间，计算内存时几乎忽略不计，也不会出现OutOfMemoryError情况。</p></blockquote><h4 id="（2）java虚拟机栈"><a href="#（2）java虚拟机栈" class="headerlink" title="（2）java虚拟机栈"></a>（2）java虚拟机栈</h4><blockquote><p>与虚拟机程序计数器一样，java虚拟机栈也是线程私有的，所以线程也是安全的，而且生命周期与线程相同，它描述的是java方法执行的内存模型，每个方法执行时会创建一个栈帧，这个栈帧里面有局部变量表，操作数栈，动态链接，方法出口等信息。在编译程序代码的时候，栈帧的局部变量表的最大容量，操作数栈的最大深度等等，都已经确定了。一个线程可能同时有很多个方法需要执行，但是对于一个线程，只有处于栈顶的栈帧才可以被执行，<br><img src="https://img-blog.csdnimg.cn/20190802120527103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看这张图片就显而易见了，我这里只画了一个线程，多个线程也是这样，只是线程执行的情况可能不一样而已。一个线程可能执行的链路可能很长，当前栈帧相关联的方法调用另一个方法时，就调用了另一个栈帧。<br><strong>一：局部变量表：</strong><br>局部变量很熟悉吧，没错，这是一个存储局部变量和方法参数的空间，在java程序被编译为class文件时，就在方法的code属性的max_locals数据项中确定了局部变量的最大容量。局部变量存储了各种基本数据类型，对象引用，returnAdress类型。局部变量的单位叫做变量槽（slot），每个slot占32位内存空间，每个基本数据类型都占一个slot，而double，long因为是64位长度的，所以占有两个slot，但是读写的时候是连续读写两个slot，虚拟机通过索引位置的方式来定位局部变量表，比如索引0就是第0个slot，索引n就是第n个slot，但是如果索引的是64的数据类型，那么索引n就是要找到第n个和第n+1个slot了，这就是简单的slot。<br>还有要注意的一点就是局部变量一定要赋值，局部变量是没有准备阶段的，没有赋值是不能运行的。就像下面这样的代码。<br>public class a{<br>public static void main（String[]args）{<br>int a；<br>System.out.println（a）；<br>}<br>}<br><strong>二：操作数栈</strong><br>这个就不用多说了，数据结构里面写的很清楚，后入先出是吧，这个相信大家都很熟悉了，和局部变量表一样，最大的容量已经写入了code属性里面的max_stacks里面了，里面放入的可以是32位的，也可以是64位的，只是64位的数据占容量为2而已。<br>先举个平常的例子，如果一个方法是要计算1+1，那么方法编译执行时，会有各种字节码指令来向操作数栈中写入数据，写入1和1，然后通过字节码相加指令，将两个1先后拿出栈，算出2有入栈，得出计算结果。<br>这个东西很容易懂得，我也不多说，详细的可以去看看数据结构栈，一些算法讲的很详细。<br><strong>三：动态链接</strong><br>每一个帧栈都有代码支持动态链接，class文件描述当一个方法调用其他方法，或者通过符号引用访问成员变量时，动态链接的作用就是将这些符号引用所表示的方法转换为实际方法的直接引用。<br>这个其实和c++里面的动态关联差不多。一个叫做静态关联，一个叫做动态关联，在java里面可以叫静态解析，动态链接（连接），静态解析就是在编译是就确定了是哪个类或者哪个方法了，比如函数重载的话，根据参数的个数就有可能会知道是要执行哪个方法了。而动态链接就是编译时无法确定具体调用哪个类哪个方法，编译时就只能做语法检查，这时候就要去运行时确定关联关系。所以，静态解析只要在编译时就可以将方法转为直接引用，而动态链接要在每次运行期间才可以。<br>符号引用：类和接口的完全限定名、字段的名称和描述符、方法的名称和描述符<br><strong>四：方法返回地址</strong><br>方法返回的方式有两种，第一种是在方法执行时遇到return这种正常的字节码指令来返回方法，有没有返回值也会根据你的定义和字节码来返回一个返回值给这个方法调用者，这种退出方法是正常的。第二种就是异常的了，在方法执行过程中遇到了异常，而且没有得到处理，这样就不管是java虚拟机内部异常，还是字节码的异常，都差不多，在这个方法异常表里面找不到对应的处理措施，方法就会终止退出，并且不会有任何返回值。<br>按理来说，方法退出以后，应该要返回上一层的调用者的位置，这时候线程的pc计数器应该会记录一些位置信息，但是异常退出的不会了。<br><strong>注意：</strong><br>虚拟机栈有两个异常情况：<br>1、线程请求的栈深度&gt;虚拟机栈的允许最大深度，抛出StackOverflowError<br>2、如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存是，抛出OutOfMemoryError(当前大部分虚拟机都支持动态扩展，只不过虚拟机规范中也允许固定大小的虚拟机栈)</p></blockquote><h4 id="（3）：本地方法栈"><a href="#（3）：本地方法栈" class="headerlink" title="（3）：本地方法栈"></a>（3）：本地方法栈</h4><blockquote><p>本地方法栈和虚拟机栈很相似，虚拟机栈只不过是为java方法服务的，而本地方法栈只不过为虚拟机用到的native方法服务的。什么是本地方法，你可以想象成一种用c语言编写的实现方法，在调用时，不会向虚拟机栈中压入方法，只是简单纯粹的调用而已，但是java虚拟机只能识别java编译后的代码的，这就涉及到底层操作系统之间的交互了，具体可以参考c与java交互，我们也不用知道怎么具体实现交互，反正本地方法就是给我们这样一个接口罢了，我们只需要通过这一个接口去引用本地方法，因为在某些情况下，java编写的方法是没有c语言的快的。但是注意，它和虚拟机栈也可以跑出OutOfMemoryError和StackOverflowError异常的。</p></blockquote><h4 id="（4）：java堆"><a href="#（4）：java堆" class="headerlink" title="（4）：java堆"></a>（4）：java堆</h4><blockquote><p>java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的就可以了。java堆是java虚拟机管理内存中最大的一块了，而且是被线程共享的一块区域，一旦虚拟机启动了，相应的堆就创建了。它是用来存所有实例对象的，而且它是垃圾收集管理的主要区域，称作GC堆，java堆中可以分为新生代和老年代。</p></blockquote><h4 id="（5）方法区"><a href="#（5）方法区" class="headerlink" title="（5）方法区"></a>（5）方法区</h4><blockquote><p>方法区也叫做永久代，它本来是java堆中的逻辑部分，但是为了与java堆区别，他还有个别名叫做非堆，和java堆一样，是线程共享的区域，他可以存储各种已经被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。这是基于HotSpot的虚拟机才有的概念，它的设计团队把GC分代收集扩展到方法区，以便管理这部分内存，以后我会更新博客详细介绍的。</p></blockquote><h4 id="（6）运行时常量池"><a href="#（6）运行时常量池" class="headerlink" title="（6）运行时常量池"></a>（6）运行时常量池</h4><p><img src="https://img-blog.csdnimg.cn/20190802120729285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>先给这个图片给大家看一下，这样就能够很清楚的明白方法区和运行时常量池之间的关系了。<br>先理清楚下面的概念：</p><ul><li>常量池（Constant Pool）：常量池数据编译期被确定，是Class文件中的一部分。存储了类、方法、接口等中的常量，当然也包括字符串常量。我们可以理解为class文件中的资源仓库。</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/20190802120808361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p> 常量池中主要存放两大类常量：字面量和符号引用。<br>符号引用在前面的虚拟机栈中的动态链接已经叙述过了，字面量就是文本字符串、声明为final的常量值等</p><ul><li>字符串池/字符串常量池（String Pool/String Constant Pool）：是常量池中的一部分，存储编译期类中产生的字符串类型数据。听说JDK1.6之前字符串常量池是在方法区中，1.7之后就被移出去了。</li><li>运行时常量池（Runtime Constant Pool）：方法区的一部分，所有线程共享。虚拟机加载Class后把常量池中的数据放入到运行时常量池。</li><li>当然在运行的时候也可能向运行时常量池中添加数据的。</li></ul></blockquote><hr><h1 id="二：HotSpot虚拟机对象"><a href="#二：HotSpot虚拟机对象" class="headerlink" title="二：HotSpot虚拟机对象"></a>二：HotSpot虚拟机对象</h1><hr><h3 id="（1）对象的创建过程"><a href="#（1）对象的创建过程" class="headerlink" title="（1）对象的创建过程"></a>（1）对象的创建过程</h3><blockquote><p>1：虚拟机接受到创建对象的指令，来到方法区，找到方法区有没有对应的符号引用，其实就是一些类的信息啦。如果发现类已经被加载过了，就直接进入分配新的内存。否则需要虚拟机加载这个类。<br>2：为对象在堆中划分一个区域内存，这里就要遵守内存分配的原则了，内存分配原则以后再说啦，大家可以暂时查一查，然后分配方法有指针碰撞和空闲列表两种。<br>指针碰撞：这个是假设java堆中的内存是绝对规整的，然后将用过的内存放在一边，空闲的放在了一边，中间有指针作为分界线，分配内存移动指针就行了。<br>空闲列表：如果java堆中的内存不是绝对规整的，这样用过的和没用过的就乱七八糟，这样通过建立一个空闲列表来记录那些内存区域可以使用，分配内存是只要更新一下列表就行了。<br>在分配内存是，还有一个线程安全的问题，在并发时，有可能一个对象创建了，指针还没来得及改变，另一个对象就创建并占有了这个指针移动的内存区域，导致内存分配矛盾。这里通常两种解决的方法：<br>对分配内存采用同步处理，失败重试。<br>将分配内存的线程划分不同的空间中，为每一个线程划分内存，保证每个线程有个缓冲区；<br>3：内存分配后就要初始化了，虚拟机将内存空间都初始化为零，保证了实力对象的字段能不赋初值就能使用。<br>4：虚拟机对对象进行必要的设置，比如这个对象是哪个类的实例，这个对象的GC分代啥的。<br>5：对象创建刚刚开始，这时候要用到<init>方法初始化，所有字段还为零。</p></blockquote><h3 id="（2）对象的内存布局"><a href="#（2）对象的内存布局" class="headerlink" title="（2）对象的内存布局"></a>（2）对象的内存布局</h3><blockquote><p>在HotSpot虚拟机中，对象在内存中的布局可以分为3块区域：对象头，实例数据，对齐填充。<br><img src="https://img-blog.csdnimg.cn/201908021209478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对象头：对象头包括两个部分：<br>1：用于存储对象自身的运行时数据：比如上图的哈希吗，GC分代年龄，锁状态标识，线程持有的锁，偏向线程ID，偏向时间戳，等等，官方称它叫做“Mark Word”，考虑到虚拟机的空间效率，官方设计者把它设计成非固定的数据结构，以便在很小的空间里存储尽量多的信息，根据对象的状态复用自己的存储空间。<br>2：类型指针：这个是指向元数据的一个指针，用来描述这个对象属于哪一个类。<br>补充：如果为对象数组，则应该还有描述数组长度的int数据，java虚拟机从对象的元数据可以获得数组的大小，但是不能从数组的元数据获得数组大小。<br>实例数据：就是对象真正存储有效的内容，也是在程序代码中所定义的各种类型的字段内容。这部分的存储顺序会受到虚拟机分配策略参数和字段在 Java 源码中定义顺序的影响。<br>对齐填充：这个部分没有多大意义，就起了一个占位符的作用，主要是虚拟机的对象起始地址必须满足8的整数倍，有时候不足就要补齐。</p></blockquote><h5 id="计算对象内存的大小：对象头-实例数据-对齐补充"><a href="#计算对象内存的大小：对象头-实例数据-对齐补充" class="headerlink" title="计算对象内存的大小：对象头+实例数据+对齐补充"></a>计算对象内存的大小：对象头+实例数据+对齐补充</h5><blockquote><p>对象头：如下图所示，对象头包括了一下几个部分。在32位系统中，Mark work的字节是4字节，class指针也是4字节，一搬情况下就是8字节，如果是64位系统中，就都变成了8字节，但是如果开启了指针压缩，class指针就变成了4字节，一共是8字节，然后对齐后就是16字节了。<br><img src="https://img-blog.csdnimg.cn/20190802121029205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实例数据：根据本来的数据类型大小计算所占字节。但是要根据指针是否压缩来对齐。</p></blockquote><h3 id="（3）对象的定位访问"><a href="#（3）对象的定位访问" class="headerlink" title="（3）对象的定位访问"></a>（3）对象的定位访问</h3><blockquote><h5 id="1：句柄访问："><a href="#1：句柄访问：" class="headerlink" title="1：句柄访问："></a>1：句柄访问：</h5><p><img src="https://img-blog.csdnimg.cn/20190802121112560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过 栈帧中局部变量表所存储的对象引用来对堆内存中的对象实例进行访问或操作的，我们就只要想成栈帧里面对象引用有指针通过一些办法指向堆里面的实例对象。上面这张图，java堆中划分出一块内存作为句柄池，reference中存储的是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。<br>优点：reference中存储的是稳定的句柄地址，在对象被移动时，只用修改句柄中的实例数据指针，而reference本身不需要修改。<br>缺点：通过两次引用指针，开销相对较大。</p><h5 id="2：直接访问："><a href="#2：直接访问：" class="headerlink" title="2：直接访问： "></a>2：直接访问： <img src="https://img-blog.csdnimg.cn/20190802121148819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3MjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h5><p>reference直接指向了对象类型数据，reference存储的就是对象地址。</p><p>优点：一次指针访问，开销相对较小</p><p>缺点：必须考虑如何放置访问类型数据的相关信息</p></blockquote><h3 id="以上就是一些对象创建，内存布局，访问等一些知识点，希望对大家有所帮助，当然还有很多细节的东西我还没弄清楚，这只是一个大概的轮廓，后面我会更新更正它。"><a href="#以上就是一些对象创建，内存布局，访问等一些知识点，希望对大家有所帮助，当然还有很多细节的东西我还没弄清楚，这只是一个大概的轮廓，后面我会更新更正它。" class="headerlink" title="以上就是一些对象创建，内存布局，访问等一些知识点，希望对大家有所帮助，当然还有很多细节的东西我还没弄清楚，这只是一个大概的轮廓，后面我会更新更正它。"></a>以上就是一些对象创建，内存布局，访问等一些知识点，希望对大家有所帮助，当然还有很多细节的东西我还没弄清楚，这只是一个大概的轮廓，后面我会更新更正它。</h3>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> java </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
